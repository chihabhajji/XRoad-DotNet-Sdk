/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// security server backup with extra information
    /// </summary>
    [DataContract(Name = "BackupExt")]
    public partial class BackupExt : IEquatable<BackupExt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupExt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BackupExt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupExt" /> class.
        /// </summary>
        /// <param name="backup">backup (required).</param>
        /// <param name="localConfPresent">localConfPresent (required).</param>
        public BackupExt(Backup backup = default(Backup), bool localConfPresent = default(bool))
        {
            // to ensure "backup" is required (not null)
            if (backup == null) {
                throw new ArgumentNullException("backup is a required property for BackupExt and cannot be null");
            }
            this.Backup = backup;
            this.LocalConfPresent = localConfPresent;
        }

        /// <summary>
        /// Gets or Sets Backup
        /// </summary>
        [DataMember(Name = "backup", IsRequired = true, EmitDefaultValue = false)]
        public Backup Backup { get; set; }

        /// <summary>
        /// Gets or Sets LocalConfPresent
        /// </summary>
        [DataMember(Name = "local_conf_present", IsRequired = true, EmitDefaultValue = true)]
        public bool LocalConfPresent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BackupExt {\n");
            sb.Append("  Backup: ").Append(Backup).Append("\n");
            sb.Append("  LocalConfPresent: ").Append(LocalConfPresent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BackupExt);
        }

        /// <summary>
        /// Returns true if BackupExt instances are equal
        /// </summary>
        /// <param name="input">Instance of BackupExt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackupExt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Backup == input.Backup ||
                    (this.Backup != null &&
                    this.Backup.Equals(input.Backup))
                ) && 
                (
                    this.LocalConfPresent == input.LocalConfPresent ||
                    this.LocalConfPresent.Equals(input.LocalConfPresent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Backup != null)
                {
                    hashCode = (hashCode * 59) + this.Backup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocalConfPresent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
