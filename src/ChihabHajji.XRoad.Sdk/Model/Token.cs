/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// Token. Also includes the possible actions that can be done to this object, e.g DELETE (only for token related operations and does not consider user authorization).
    /// </summary>
    [DataContract(Name = "Token")]
    public partial class Token : IEquatable<Token>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TokenType Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public TokenStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Token() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="name">token name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="keys">token keys (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="loggedIn">if the token has been logged in to (required).</param>
        /// <param name="available">if the token is available (required).</param>
        /// <param name="savedToConfiguration">if the token is saved to configuration (required).</param>
        /// <param name="readOnly">if the token is read-only (required).</param>
        /// <param name="serialNumber">serial number of the token.</param>
        /// <param name="tokenInfos">Contains label-value pairs of information.</param>
        /// <param name="possibleActions">array containing the possible actions that can be done for this item.</param>
        public Token(string name = default(string), TokenType type = default(TokenType), List<Key> keys = default(List<Key>), TokenStatus status = default(TokenStatus), bool loggedIn = default(bool), bool available = default(bool), bool savedToConfiguration = default(bool), bool readOnly = default(bool), string serialNumber = default(string), List<KeyValuePair> tokenInfos = default(List<KeyValuePair>), List<PossibleAction> possibleActions = default(List<PossibleAction>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Token and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            // to ensure "keys" is required (not null)
            if (keys == null) {
                throw new ArgumentNullException("keys is a required property for Token and cannot be null");
            }
            this.Keys = keys;
            this.Status = status;
            this.LoggedIn = loggedIn;
            this.Available = available;
            this.SavedToConfiguration = savedToConfiguration;
            this.ReadOnly = readOnly;
            this.SerialNumber = serialNumber;
            this.TokenInfos = tokenInfos;
            this.PossibleActions = possibleActions;
        }

        /// <summary>
        /// token id
        /// </summary>
        /// <value>token id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// token name
        /// </summary>
        /// <value>token name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// token keys
        /// </summary>
        /// <value>token keys</value>
        [DataMember(Name = "keys", IsRequired = true, EmitDefaultValue = false)]
        public List<Key> Keys { get; set; }

        /// <summary>
        /// if the token has been logged in to
        /// </summary>
        /// <value>if the token has been logged in to</value>
        [DataMember(Name = "logged_in", IsRequired = true, EmitDefaultValue = true)]
        public bool LoggedIn { get; set; }

        /// <summary>
        /// if the token is available
        /// </summary>
        /// <value>if the token is available</value>
        [DataMember(Name = "available", IsRequired = true, EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// if the token is saved to configuration
        /// </summary>
        /// <value>if the token is saved to configuration</value>
        [DataMember(Name = "saved_to_configuration", IsRequired = true, EmitDefaultValue = true)]
        public bool SavedToConfiguration { get; set; }

        /// <summary>
        /// if the token is read-only
        /// </summary>
        /// <value>if the token is read-only</value>
        [DataMember(Name = "read_only", IsRequired = true, EmitDefaultValue = true)]
        public bool ReadOnly { get; set; }

        /// <summary>
        /// serial number of the token
        /// </summary>
        /// <value>serial number of the token</value>
        [DataMember(Name = "serial_number", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Contains label-value pairs of information
        /// </summary>
        /// <value>Contains label-value pairs of information</value>
        [DataMember(Name = "token_infos", EmitDefaultValue = false)]
        public List<KeyValuePair> TokenInfos { get; set; }

        /// <summary>
        /// array containing the possible actions that can be done for this item
        /// </summary>
        /// <value>array containing the possible actions that can be done for this item</value>
        [DataMember(Name = "possible_actions", EmitDefaultValue = false)]
        public List<PossibleAction> PossibleActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  LoggedIn: ").Append(LoggedIn).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  SavedToConfiguration: ").Append(SavedToConfiguration).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  TokenInfos: ").Append(TokenInfos).Append("\n");
            sb.Append("  PossibleActions: ").Append(PossibleActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Token);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="input">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Keys == input.Keys ||
                    this.Keys != null &&
                    input.Keys != null &&
                    this.Keys.SequenceEqual(input.Keys)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.LoggedIn == input.LoggedIn ||
                    this.LoggedIn.Equals(input.LoggedIn)
                ) && 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.SavedToConfiguration == input.SavedToConfiguration ||
                    this.SavedToConfiguration.Equals(input.SavedToConfiguration)
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.TokenInfos == input.TokenInfos ||
                    this.TokenInfos != null &&
                    input.TokenInfos != null &&
                    this.TokenInfos.SequenceEqual(input.TokenInfos)
                ) && 
                (
                    this.PossibleActions == input.PossibleActions ||
                    this.PossibleActions != null &&
                    input.PossibleActions != null &&
                    this.PossibleActions.SequenceEqual(input.PossibleActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Keys != null)
                {
                    hashCode = (hashCode * 59) + this.Keys.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.LoggedIn.GetHashCode();
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.SavedToConfiguration.GetHashCode();
                hashCode = (hashCode * 59) + this.ReadOnly.GetHashCode();
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.TokenInfos != null)
                {
                    hashCode = (hashCode * 59) + this.TokenInfos.GetHashCode();
                }
                if (this.PossibleActions != null)
                {
                    hashCode = (hashCode * 59) + this.PossibleActions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
