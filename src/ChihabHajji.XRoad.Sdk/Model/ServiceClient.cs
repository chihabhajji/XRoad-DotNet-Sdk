/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// service client. May be a subsystem, local group, or a global group
    /// </summary>
    [DataContract(Name = "ServiceClient")]
    public partial class ServiceClient : IEquatable<ServiceClient>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ServiceClientType
        /// </summary>
        [DataMember(Name = "service_client_type", EmitDefaultValue = false)]
        public ServiceClientType? ServiceClientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceClient" /> class.
        /// </summary>
        /// <param name="id">subject id - can be a subsystem id &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt; | globalgroup id &lt;instance_id&gt;:&lt;group_code&gt; | localgroup resource id in number format &lt;id&gt; (required).</param>
        /// <param name="serviceClientType">serviceClientType.</param>
        public ServiceClient(string id = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for ServiceClient and cannot be null");
            }
            this.Id = id;
            this.ServiceClientType = serviceClientType;
        }

        /// <summary>
        /// subject id - can be a subsystem id &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt; | globalgroup id &lt;instance_id&gt;:&lt;group_code&gt; | localgroup resource id in number format &lt;id&gt;
        /// </summary>
        /// <value>subject id - can be a subsystem id &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt; | globalgroup id &lt;instance_id&gt;:&lt;group_code&gt; | localgroup resource id in number format &lt;id&gt;</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// name of the ServiceClient - can be the name of a member or the description of a group
        /// </summary>
        /// <value>name of the ServiceClient - can be the name of a member or the description of a group</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// group code in case the object is a local group
        /// </summary>
        /// <value>group code in case the object is a local group</value>
        [DataMember(Name = "local_group_code", EmitDefaultValue = false)]
        public string LocalGroupCode { get; private set; }

        /// <summary>
        /// Returns false as LocalGroupCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocalGroupCode()
        {
            return false;
        }
        /// <summary>
        /// time when access right were given at. When listing client&#39;s service clients without specifying the service, the time when first service access right was given to this service client for any service. When listing service clients for a specific service, time when service client was added permission to that service.
        /// </summary>
        /// <value>time when access right were given at. When listing client&#39;s service clients without specifying the service, the time when first service access right was given to this service client for any service. When listing service clients for a specific service, time when service client was added permission to that service.</value>
        [DataMember(Name = "rights_given_at", EmitDefaultValue = false)]
        public DateTime RightsGivenAt { get; private set; }

        /// <summary>
        /// Returns false as RightsGivenAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRightsGivenAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceClient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LocalGroupCode: ").Append(LocalGroupCode).Append("\n");
            sb.Append("  ServiceClientType: ").Append(ServiceClientType).Append("\n");
            sb.Append("  RightsGivenAt: ").Append(RightsGivenAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceClient);
        }

        /// <summary>
        /// Returns true if ServiceClient instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LocalGroupCode == input.LocalGroupCode ||
                    (this.LocalGroupCode != null &&
                    this.LocalGroupCode.Equals(input.LocalGroupCode))
                ) && 
                (
                    this.ServiceClientType == input.ServiceClientType ||
                    this.ServiceClientType.Equals(input.ServiceClientType)
                ) && 
                (
                    this.RightsGivenAt == input.RightsGivenAt ||
                    (this.RightsGivenAt != null &&
                    this.RightsGivenAt.Equals(input.RightsGivenAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.LocalGroupCode != null)
                {
                    hashCode = (hashCode * 59) + this.LocalGroupCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServiceClientType.GetHashCode();
                if (this.RightsGivenAt != null)
                {
                    hashCode = (hashCode * 59) + this.RightsGivenAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 1279)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 1279.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // LocalGroupCode (string) maxLength
            if (this.LocalGroupCode != null && this.LocalGroupCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocalGroupCode, length must be less than 255.", new [] { "LocalGroupCode" });
            }

            // LocalGroupCode (string) minLength
            if (this.LocalGroupCode != null && this.LocalGroupCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocalGroupCode, length must be greater than 1.", new [] { "LocalGroupCode" });
            }

            yield break;
        }
    }

}
