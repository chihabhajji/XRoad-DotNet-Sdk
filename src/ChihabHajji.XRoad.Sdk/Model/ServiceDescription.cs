/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// WSDL/OPENAPI3/REST service
    /// </summary>
    [DataContract(Name = "ServiceDescription")]
    public partial class ServiceDescription : IEquatable<ServiceDescription>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public ServiceType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServiceDescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceDescription" /> class.
        /// </summary>
        /// <param name="id">unique identifier (required).</param>
        /// <param name="url">service url (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="disabled">service disabled (required).</param>
        /// <param name="disabledNotice">disabled notice (required).</param>
        /// <param name="refreshedAt">time for service refresh (required).</param>
        /// <param name="services">service description services (required).</param>
        /// <param name="clientId">&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional) (required).</param>
        public ServiceDescription(string id = default(string), string url = default(string), ServiceType type = default(ServiceType), bool disabled = default(bool), string disabledNotice = default(string), DateTime refreshedAt = default(DateTime), List<Service> services = default(List<Service>), string clientId = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for ServiceDescription and cannot be null");
            }
            this.Id = id;
            // to ensure "url" is required (not null)
            if (url == null) {
                throw new ArgumentNullException("url is a required property for ServiceDescription and cannot be null");
            }
            this.Url = url;
            this.Type = type;
            this.Disabled = disabled;
            // to ensure "disabledNotice" is required (not null)
            if (disabledNotice == null) {
                throw new ArgumentNullException("disabledNotice is a required property for ServiceDescription and cannot be null");
            }
            this.DisabledNotice = disabledNotice;
            this.RefreshedAt = refreshedAt;
            // to ensure "services" is required (not null)
            if (services == null) {
                throw new ArgumentNullException("services is a required property for ServiceDescription and cannot be null");
            }
            this.Services = services;
            // to ensure "clientId" is required (not null)
            if (clientId == null) {
                throw new ArgumentNullException("clientId is a required property for ServiceDescription and cannot be null");
            }
            this.ClientId = clientId;
        }

        /// <summary>
        /// unique identifier
        /// </summary>
        /// <value>unique identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// service url
        /// </summary>
        /// <value>service url</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// service disabled
        /// </summary>
        /// <value>service disabled</value>
        [DataMember(Name = "disabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// disabled notice
        /// </summary>
        /// <value>disabled notice</value>
        [DataMember(Name = "disabled_notice", IsRequired = true, EmitDefaultValue = false)]
        public string DisabledNotice { get; set; }

        /// <summary>
        /// time for service refresh
        /// </summary>
        /// <value>time for service refresh</value>
        [DataMember(Name = "refreshed_at", IsRequired = true, EmitDefaultValue = false)]
        public DateTime RefreshedAt { get; set; }

        /// <summary>
        /// service description services
        /// </summary>
        /// <value>service description services</value>
        [DataMember(Name = "services", IsRequired = true, EmitDefaultValue = false)]
        public List<Service> Services { get; set; }

        /// <summary>
        /// &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional)
        /// </summary>
        /// <value>&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional)</value>
        [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceDescription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  DisabledNotice: ").Append(DisabledNotice).Append("\n");
            sb.Append("  RefreshedAt: ").Append(RefreshedAt).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceDescription);
        }

        /// <summary>
        /// Returns true if ServiceDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceDescription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.DisabledNotice == input.DisabledNotice ||
                    (this.DisabledNotice != null &&
                    this.DisabledNotice.Equals(input.DisabledNotice))
                ) && 
                (
                    this.RefreshedAt == input.RefreshedAt ||
                    (this.RefreshedAt != null &&
                    this.RefreshedAt.Equals(input.RefreshedAt))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.DisabledNotice != null)
                {
                    hashCode = (hashCode * 59) + this.DisabledNotice.GetHashCode();
                }
                if (this.RefreshedAt != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshedAt.GetHashCode();
                }
                if (this.Services != null)
                {
                    hashCode = (hashCode * 59) + this.Services.GetHashCode();
                }
                if (this.ClientId != null)
                {
                    hashCode = (hashCode * 59) + this.ClientId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 255.", new [] { "Url" });
            }

            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            // DisabledNotice (string) maxLength
            if (this.DisabledNotice != null && this.DisabledNotice.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisabledNotice, length must be less than 255.", new [] { "DisabledNotice" });
            }

            // DisabledNotice (string) minLength
            if (this.DisabledNotice != null && this.DisabledNotice.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisabledNotice, length must be greater than 0.", new [] { "DisabledNotice" });
            }
            // TODO
            // // RefreshedAt (DateTime) maxLength
            // if (this.RefreshedAt != null && this.RefreshedAt.Length > 24)
            // {
            //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefreshedAt, length must be less than 24.", new [] { "RefreshedAt" });
            // }
            //
            // // RefreshedAt (DateTime) minLength
            // if (this.RefreshedAt != null && this.RefreshedAt.Length < 24)
            // {
            //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RefreshedAt, length must be greater than 24.", new [] { "RefreshedAt" });
            // }

            // ClientId (string) maxLength
            if (this.ClientId != null && this.ClientId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientId, length must be less than 255.", new [] { "ClientId" });
            }

            // ClientId (string) minLength
            if (this.ClientId != null && this.ClientId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClientId, length must be greater than 1.", new [] { "ClientId" });
            }

            yield break;
        }
    }

}
