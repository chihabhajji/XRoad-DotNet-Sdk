/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// certificate details for any kind of certificate (TLS, auth, sign)
    /// </summary>
    [DataContract(Name = "CertificateDetails")]
    public partial class CertificateDetails : IEquatable<CertificateDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateDetails" /> class.
        /// </summary>
        /// <param name="issuerDistinguishedName">certificate issuer distinguished name (required).</param>
        /// <param name="issuerCommonName">certificate issuer common name (required).</param>
        /// <param name="subjectDistinguishedName">certificate subject distinguished name (required).</param>
        /// <param name="subjectCommonName">certificate subject common name (required).</param>
        /// <param name="notBefore">certificate validity not before (required).</param>
        /// <param name="notAfter">certificate validity not after (required).</param>
        /// <param name="serial">serial number (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="signatureAlgorithm">certificate signature algorithm (required).</param>
        /// <param name="signature">hex encoded certificate signature (required).</param>
        /// <param name="publicKeyAlgorithm">certificate public key algorithm (required).</param>
        /// <param name="rsaPublicKeyModulus">hex encoded RSA public key modulus (if RSA key) (required).</param>
        /// <param name="rsaPublicKeyExponent">RSA public key exponent (if RSA key) as an integer (required).</param>
        /// <param name="hash">certificate SHA-1 hash (required).</param>
        /// <param name="keyUsages">certificate key usage array (required).</param>
        /// <param name="subjectAlternativeNames">certificate subject alternative names (required).</param>
        public CertificateDetails(string issuerDistinguishedName = default(string), string issuerCommonName = default(string), string subjectDistinguishedName = default(string), string subjectCommonName = default(string), DateTime notBefore = default(DateTime), DateTime notAfter = default(DateTime), string serial = default(string), int version = default(int), string signatureAlgorithm = default(string), string signature = default(string), string publicKeyAlgorithm = default(string), string rsaPublicKeyModulus = default(string), int rsaPublicKeyExponent = default(int), string hash = default(string), List<KeyUsage> keyUsages = default(List<KeyUsage>), string subjectAlternativeNames = default(string))
        {
            // to ensure "issuerDistinguishedName" is required (not null)
            if (issuerDistinguishedName == null) {
                throw new ArgumentNullException("issuerDistinguishedName is a required property for CertificateDetails and cannot be null");
            }
            this.IssuerDistinguishedName = issuerDistinguishedName;
            // to ensure "issuerCommonName" is required (not null)
            if (issuerCommonName == null) {
                throw new ArgumentNullException("issuerCommonName is a required property for CertificateDetails and cannot be null");
            }
            this.IssuerCommonName = issuerCommonName;
            // to ensure "subjectDistinguishedName" is required (not null)
            if (subjectDistinguishedName == null) {
                throw new ArgumentNullException("subjectDistinguishedName is a required property for CertificateDetails and cannot be null");
            }
            this.SubjectDistinguishedName = subjectDistinguishedName;
            // to ensure "subjectCommonName" is required (not null)
            if (subjectCommonName == null) {
                throw new ArgumentNullException("subjectCommonName is a required property for CertificateDetails and cannot be null");
            }
            this.SubjectCommonName = subjectCommonName;
            this.NotBefore = notBefore;
            this.NotAfter = notAfter;
            // to ensure "serial" is required (not null)
            if (serial == null) {
                throw new ArgumentNullException("serial is a required property for CertificateDetails and cannot be null");
            }
            this.Serial = serial;
            this._Version = version;
            // to ensure "signatureAlgorithm" is required (not null)
            if (signatureAlgorithm == null) {
                throw new ArgumentNullException("signatureAlgorithm is a required property for CertificateDetails and cannot be null");
            }
            this.SignatureAlgorithm = signatureAlgorithm;
            // to ensure "signature" is required (not null)
            if (signature == null) {
                throw new ArgumentNullException("signature is a required property for CertificateDetails and cannot be null");
            }
            this.Signature = signature;
            // to ensure "publicKeyAlgorithm" is required (not null)
            if (publicKeyAlgorithm == null) {
                throw new ArgumentNullException("publicKeyAlgorithm is a required property for CertificateDetails and cannot be null");
            }
            this.PublicKeyAlgorithm = publicKeyAlgorithm;
            // to ensure "rsaPublicKeyModulus" is required (not null)
            if (rsaPublicKeyModulus == null) {
                throw new ArgumentNullException("rsaPublicKeyModulus is a required property for CertificateDetails and cannot be null");
            }
            this.RsaPublicKeyModulus = rsaPublicKeyModulus;
            this.RsaPublicKeyExponent = rsaPublicKeyExponent;
            // to ensure "hash" is required (not null)
            if (hash == null) {
                throw new ArgumentNullException("hash is a required property for CertificateDetails and cannot be null");
            }
            this.Hash = hash;
            // to ensure "keyUsages" is required (not null)
            if (keyUsages == null) {
                throw new ArgumentNullException("keyUsages is a required property for CertificateDetails and cannot be null");
            }
            this.KeyUsages = keyUsages;
            // to ensure "subjectAlternativeNames" is required (not null)
            if (subjectAlternativeNames == null) {
                throw new ArgumentNullException("subjectAlternativeNames is a required property for CertificateDetails and cannot be null");
            }
            this.SubjectAlternativeNames = subjectAlternativeNames;
        }

        /// <summary>
        /// certificate issuer distinguished name
        /// </summary>
        /// <value>certificate issuer distinguished name</value>
        [DataMember(Name = "issuer_distinguished_name", IsRequired = true, EmitDefaultValue = false)]
        public string IssuerDistinguishedName { get; set; }

        /// <summary>
        /// certificate issuer common name
        /// </summary>
        /// <value>certificate issuer common name</value>
        [DataMember(Name = "issuer_common_name", IsRequired = true, EmitDefaultValue = false)]
        public string IssuerCommonName { get; set; }

        /// <summary>
        /// certificate subject distinguished name
        /// </summary>
        /// <value>certificate subject distinguished name</value>
        [DataMember(Name = "subject_distinguished_name", IsRequired = true, EmitDefaultValue = false)]
        public string SubjectDistinguishedName { get; set; }

        /// <summary>
        /// certificate subject common name
        /// </summary>
        /// <value>certificate subject common name</value>
        [DataMember(Name = "subject_common_name", IsRequired = true, EmitDefaultValue = false)]
        public string SubjectCommonName { get; set; }

        /// <summary>
        /// certificate validity not before
        /// </summary>
        /// <value>certificate validity not before</value>
        [DataMember(Name = "not_before", IsRequired = true, EmitDefaultValue = false)]
        public DateTime NotBefore { get; set; }

        /// <summary>
        /// certificate validity not after
        /// </summary>
        /// <value>certificate validity not after</value>
        [DataMember(Name = "not_after", IsRequired = true, EmitDefaultValue = false)]
        public DateTime NotAfter { get; set; }

        /// <summary>
        /// serial number
        /// </summary>
        /// <value>serial number</value>
        [DataMember(Name = "serial", IsRequired = true, EmitDefaultValue = false)]
        public string Serial { get; set; }

        /// <summary>
        /// version
        /// </summary>
        /// <value>version</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// certificate signature algorithm
        /// </summary>
        /// <value>certificate signature algorithm</value>
        [DataMember(Name = "signature_algorithm", IsRequired = true, EmitDefaultValue = false)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// hex encoded certificate signature
        /// </summary>
        /// <value>hex encoded certificate signature</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// certificate public key algorithm
        /// </summary>
        /// <value>certificate public key algorithm</value>
        [DataMember(Name = "public_key_algorithm", IsRequired = true, EmitDefaultValue = false)]
        public string PublicKeyAlgorithm { get; set; }

        /// <summary>
        /// hex encoded RSA public key modulus (if RSA key)
        /// </summary>
        /// <value>hex encoded RSA public key modulus (if RSA key)</value>
        [DataMember(Name = "rsa_public_key_modulus", IsRequired = true, EmitDefaultValue = false)]
        public string RsaPublicKeyModulus { get; set; }

        /// <summary>
        /// RSA public key exponent (if RSA key) as an integer
        /// </summary>
        /// <value>RSA public key exponent (if RSA key) as an integer</value>
        [DataMember(Name = "rsa_public_key_exponent", IsRequired = true, EmitDefaultValue = false)]
        public int RsaPublicKeyExponent { get; set; }

        /// <summary>
        /// certificate SHA-1 hash
        /// </summary>
        /// <value>certificate SHA-1 hash</value>
        [DataMember(Name = "hash", IsRequired = true, EmitDefaultValue = false)]
        public string Hash { get; set; }

        /// <summary>
        /// certificate key usage array
        /// </summary>
        /// <value>certificate key usage array</value>
        [DataMember(Name = "key_usages", IsRequired = true, EmitDefaultValue = false)]
        public List<KeyUsage> KeyUsages { get; set; }

        /// <summary>
        /// certificate subject alternative names
        /// </summary>
        /// <value>certificate subject alternative names</value>
        [DataMember(Name = "subject_alternative_names", IsRequired = true, EmitDefaultValue = false)]
        public string SubjectAlternativeNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateDetails {\n");
            sb.Append("  IssuerDistinguishedName: ").Append(IssuerDistinguishedName).Append("\n");
            sb.Append("  IssuerCommonName: ").Append(IssuerCommonName).Append("\n");
            sb.Append("  SubjectDistinguishedName: ").Append(SubjectDistinguishedName).Append("\n");
            sb.Append("  SubjectCommonName: ").Append(SubjectCommonName).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  PublicKeyAlgorithm: ").Append(PublicKeyAlgorithm).Append("\n");
            sb.Append("  RsaPublicKeyModulus: ").Append(RsaPublicKeyModulus).Append("\n");
            sb.Append("  RsaPublicKeyExponent: ").Append(RsaPublicKeyExponent).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  KeyUsages: ").Append(KeyUsages).Append("\n");
            sb.Append("  SubjectAlternativeNames: ").Append(SubjectAlternativeNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateDetails);
        }

        /// <summary>
        /// Returns true if CertificateDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IssuerDistinguishedName == input.IssuerDistinguishedName ||
                    (this.IssuerDistinguishedName != null &&
                    this.IssuerDistinguishedName.Equals(input.IssuerDistinguishedName))
                ) && 
                (
                    this.IssuerCommonName == input.IssuerCommonName ||
                    (this.IssuerCommonName != null &&
                    this.IssuerCommonName.Equals(input.IssuerCommonName))
                ) && 
                (
                    this.SubjectDistinguishedName == input.SubjectDistinguishedName ||
                    (this.SubjectDistinguishedName != null &&
                    this.SubjectDistinguishedName.Equals(input.SubjectDistinguishedName))
                ) && 
                (
                    this.SubjectCommonName == input.SubjectCommonName ||
                    (this.SubjectCommonName != null &&
                    this.SubjectCommonName.Equals(input.SubjectCommonName))
                ) && 
                (
                    this.NotBefore == input.NotBefore ||
                    (this.NotBefore != null &&
                    this.NotBefore.Equals(input.NotBefore))
                ) && 
                (
                    this.NotAfter == input.NotAfter ||
                    (this.NotAfter != null &&
                    this.NotAfter.Equals(input.NotAfter))
                ) && 
                (
                    this.Serial == input.Serial ||
                    (this.Serial != null &&
                    this.Serial.Equals(input.Serial))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.PublicKeyAlgorithm == input.PublicKeyAlgorithm ||
                    (this.PublicKeyAlgorithm != null &&
                    this.PublicKeyAlgorithm.Equals(input.PublicKeyAlgorithm))
                ) && 
                (
                    this.RsaPublicKeyModulus == input.RsaPublicKeyModulus ||
                    (this.RsaPublicKeyModulus != null &&
                    this.RsaPublicKeyModulus.Equals(input.RsaPublicKeyModulus))
                ) && 
                (
                    this.RsaPublicKeyExponent == input.RsaPublicKeyExponent ||
                    this.RsaPublicKeyExponent.Equals(input.RsaPublicKeyExponent)
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.KeyUsages == input.KeyUsages ||
                    this.KeyUsages != null &&
                    input.KeyUsages != null &&
                    this.KeyUsages.SequenceEqual(input.KeyUsages)
                ) && 
                (
                    this.SubjectAlternativeNames == input.SubjectAlternativeNames ||
                    (this.SubjectAlternativeNames != null &&
                    this.SubjectAlternativeNames.Equals(input.SubjectAlternativeNames))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssuerDistinguishedName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerDistinguishedName.GetHashCode();
                }
                if (this.IssuerCommonName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerCommonName.GetHashCode();
                }
                if (this.SubjectDistinguishedName != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectDistinguishedName.GetHashCode();
                }
                if (this.SubjectCommonName != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectCommonName.GetHashCode();
                }
                if (this.NotBefore != null)
                {
                    hashCode = (hashCode * 59) + this.NotBefore.GetHashCode();
                }
                if (this.NotAfter != null)
                {
                    hashCode = (hashCode * 59) + this.NotAfter.GetHashCode();
                }
                if (this.Serial != null)
                {
                    hashCode = (hashCode * 59) + this.Serial.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                if (this.SignatureAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.SignatureAlgorithm.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.PublicKeyAlgorithm != null)
                {
                    hashCode = (hashCode * 59) + this.PublicKeyAlgorithm.GetHashCode();
                }
                if (this.RsaPublicKeyModulus != null)
                {
                    hashCode = (hashCode * 59) + this.RsaPublicKeyModulus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RsaPublicKeyExponent.GetHashCode();
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                if (this.KeyUsages != null)
                {
                    hashCode = (hashCode * 59) + this.KeyUsages.GetHashCode();
                }
                if (this.SubjectAlternativeNames != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectAlternativeNames.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // IssuerDistinguishedName (string) maxLength
            if (this.IssuerDistinguishedName != null && this.IssuerDistinguishedName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerDistinguishedName, length must be less than 255.", new [] { "IssuerDistinguishedName" });
            }

            // IssuerDistinguishedName (string) minLength
            if (this.IssuerDistinguishedName != null && this.IssuerDistinguishedName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerDistinguishedName, length must be greater than 1.", new [] { "IssuerDistinguishedName" });
            }

            // IssuerCommonName (string) maxLength
            if (this.IssuerCommonName != null && this.IssuerCommonName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerCommonName, length must be less than 255.", new [] { "IssuerCommonName" });
            }

            // IssuerCommonName (string) minLength
            if (this.IssuerCommonName != null && this.IssuerCommonName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerCommonName, length must be greater than 1.", new [] { "IssuerCommonName" });
            }

            // SubjectDistinguishedName (string) maxLength
            if (this.SubjectDistinguishedName != null && this.SubjectDistinguishedName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectDistinguishedName, length must be less than 255.", new [] { "SubjectDistinguishedName" });
            }

            // SubjectDistinguishedName (string) minLength
            if (this.SubjectDistinguishedName != null && this.SubjectDistinguishedName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectDistinguishedName, length must be greater than 1.", new [] { "SubjectDistinguishedName" });
            }

            // SubjectCommonName (string) maxLength
            if (this.SubjectCommonName != null && this.SubjectCommonName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectCommonName, length must be less than 255.", new [] { "SubjectCommonName" });
            }

            // SubjectCommonName (string) minLength
            if (this.SubjectCommonName != null && this.SubjectCommonName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectCommonName, length must be greater than 1.", new [] { "SubjectCommonName" });
            }

            // NotBefore (DateTime) maxLength
            if (this.NotBefore != null && this.NotBefore.Length > 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotBefore, length must be less than 24.", new [] { "NotBefore" });
            }

            // NotBefore (DateTime) minLength
            if (this.NotBefore != null && this.NotBefore.Length < 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotBefore, length must be greater than 24.", new [] { "NotBefore" });
            }

            // NotAfter (DateTime) maxLength
            if (this.NotAfter != null && this.NotAfter.Length > 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotAfter, length must be less than 24.", new [] { "NotAfter" });
            }

            // NotAfter (DateTime) minLength
            if (this.NotAfter != null && this.NotAfter.Length < 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotAfter, length must be greater than 24.", new [] { "NotAfter" });
            }

            // Serial (string) maxLength
            if (this.Serial != null && this.Serial.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Serial, length must be less than 255.", new [] { "Serial" });
            }

            // Serial (string) minLength
            if (this.Serial != null && this.Serial.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Serial, length must be greater than 1.", new [] { "Serial" });
            }

            // SignatureAlgorithm (string) maxLength
            if (this.SignatureAlgorithm != null && this.SignatureAlgorithm.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignatureAlgorithm, length must be less than 255.", new [] { "SignatureAlgorithm" });
            }

            // SignatureAlgorithm (string) minLength
            if (this.SignatureAlgorithm != null && this.SignatureAlgorithm.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SignatureAlgorithm, length must be greater than 1.", new [] { "SignatureAlgorithm" });
            }

            // Signature (string) maxLength
            if (this.Signature != null && this.Signature.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signature, length must be less than 255.", new [] { "Signature" });
            }

            // Signature (string) minLength
            if (this.Signature != null && this.Signature.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signature, length must be greater than 1.", new [] { "Signature" });
            }

            // PublicKeyAlgorithm (string) maxLength
            if (this.PublicKeyAlgorithm != null && this.PublicKeyAlgorithm.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublicKeyAlgorithm, length must be less than 255.", new [] { "PublicKeyAlgorithm" });
            }

            // PublicKeyAlgorithm (string) minLength
            if (this.PublicKeyAlgorithm != null && this.PublicKeyAlgorithm.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublicKeyAlgorithm, length must be greater than 1.", new [] { "PublicKeyAlgorithm" });
            }

            // RsaPublicKeyModulus (string) maxLength
            if (this.RsaPublicKeyModulus != null && this.RsaPublicKeyModulus.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RsaPublicKeyModulus, length must be less than 1000.", new [] { "RsaPublicKeyModulus" });
            }

            // RsaPublicKeyModulus (string) minLength
            if (this.RsaPublicKeyModulus != null && this.RsaPublicKeyModulus.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RsaPublicKeyModulus, length must be greater than 1.", new [] { "RsaPublicKeyModulus" });
            }

            // Hash (string) maxLength
            if (this.Hash != null && this.Hash.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be less than 40.", new [] { "Hash" });
            }

            // Hash (string) minLength
            if (this.Hash != null && this.Hash.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hash, length must be greater than 1.", new [] { "Hash" });
            }

            // SubjectAlternativeNames (string) maxLength
            if (this.SubjectAlternativeNames != null && this.SubjectAlternativeNames.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectAlternativeNames, length must be less than 1000.", new [] { "SubjectAlternativeNames" });
            }

            // SubjectAlternativeNames (string) minLength
            if (this.SubjectAlternativeNames != null && this.SubjectAlternativeNames.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectAlternativeNames, length must be greater than 1.", new [] { "SubjectAlternativeNames" });
            }

            yield break;
        }
    }

}
