/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// object describing input fields for CSR subject DN info
    /// </summary>
    [DataContract(Name = "CsrSubjectFieldDescription")]
    public partial class CsrSubjectFieldDescription : IEquatable<CsrSubjectFieldDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CsrSubjectFieldDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public CsrSubjectFieldDescription()
        {
        }

        /// <summary>
        /// the identifier of the field (such as &#39;O&#39;, &#39;OU&#39; etc)
        /// </summary>
        /// <value>the identifier of the field (such as &#39;O&#39;, &#39;OU&#39; etc)</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// label of the field, used to display the field in the user interface
        /// </summary>
        /// <value>label of the field, used to display the field in the user interface</value>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; private set; }

        /// <summary>
        /// Returns false as Label should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabel()
        {
            return false;
        }
        /// <summary>
        /// localization key for label of the field, used to display the field in the user interface
        /// </summary>
        /// <value>localization key for label of the field, used to display the field in the user interface</value>
        [DataMember(Name = "label_key", EmitDefaultValue = false)]
        public string LabelKey { get; private set; }

        /// <summary>
        /// Returns false as LabelKey should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLabelKey()
        {
            return false;
        }
        /// <summary>
        /// the default value of the field. Can be empty.
        /// </summary>
        /// <value>the default value of the field. Can be empty.</value>
        [DataMember(Name = "default_value", EmitDefaultValue = false)]
        public string DefaultValue { get; private set; }

        /// <summary>
        /// Returns false as DefaultValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultValue()
        {
            return false;
        }
        /// <summary>
        /// if this field is read-only
        /// </summary>
        /// <value>if this field is read-only</value>
        [DataMember(Name = "read_only", IsRequired = true, EmitDefaultValue = true)]
        public bool ReadOnly { get; private set; }

        /// <summary>
        /// Returns false as ReadOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReadOnly()
        {
            return false;
        }
        /// <summary>
        /// if this field is required to be filled
        /// </summary>
        /// <value>if this field is required to be filled</value>
        [DataMember(Name = "required", IsRequired = true, EmitDefaultValue = true)]
        public bool Required { get; private set; }

        /// <summary>
        /// Returns false as Required should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequired()
        {
            return false;
        }
        /// <summary>
        /// if true, label key is in property \&quot;label_key\&quot;. If false, actual label is in property \&quot;label\&quot;
        /// </summary>
        /// <value>if true, label key is in property \&quot;label_key\&quot;. If false, actual label is in property \&quot;label\&quot;</value>
        [DataMember(Name = "localized", IsRequired = true, EmitDefaultValue = true)]
        public bool Localized { get; private set; }

        /// <summary>
        /// Returns false as Localized should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocalized()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CsrSubjectFieldDescription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LabelKey: ").Append(LabelKey).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Localized: ").Append(Localized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CsrSubjectFieldDescription);
        }

        /// <summary>
        /// Returns true if CsrSubjectFieldDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of CsrSubjectFieldDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CsrSubjectFieldDescription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.LabelKey == input.LabelKey ||
                    (this.LabelKey != null &&
                    this.LabelKey.Equals(input.LabelKey))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.ReadOnly == input.ReadOnly ||
                    this.ReadOnly.Equals(input.ReadOnly)
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Localized == input.Localized ||
                    this.Localized.Equals(input.Localized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.LabelKey != null)
                {
                    hashCode = (hashCode * 59) + this.LabelKey.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReadOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                hashCode = (hashCode * 59) + this.Localized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Label (string) minLength
            if (this.Label != null && this.Label.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 1.", new [] { "Label" });
            }

            // LabelKey (string) minLength
            if (this.LabelKey != null && this.LabelKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LabelKey, length must be greater than 1.", new [] { "LabelKey" });
            }

            // DefaultValue (string) minLength
            if (this.DefaultValue != null && this.DefaultValue.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultValue, length must be greater than 0.", new [] { "DefaultValue" });
            }

            yield break;
        }
    }

}
