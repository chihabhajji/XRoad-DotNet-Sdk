/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// x-road client
    /// </summary>
    [DataContract(Name = "_Client")]
    public partial class ModelClient : IEquatable<ModelClient>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConnectionType
        /// </summary>
        [DataMember(Name = "connection_type", EmitDefaultValue = false)]
        public ConnectionType? ConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public ClientStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelClient" /> class.
        /// </summary>
        /// <param name="memberClass">Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters (required).</param>
        /// <param name="memberCode">Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters (required).</param>
        /// <param name="subsystemCode">Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters.</param>
        /// <param name="connectionType">connectionType.</param>
        /// <param name="status">status.</param>
        public ModelClient(string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), ConnectionType? connectionType = default(ConnectionType?), ClientStatus? status = default(ClientStatus?))
        {
            // to ensure "memberClass" is required (not null)
            if (memberClass == null) {
                throw new ArgumentNullException("memberClass is a required property for ModelClient and cannot be null");
            }
            this.MemberClass = memberClass;
            // to ensure "memberCode" is required (not null)
            if (memberCode == null) {
                throw new ArgumentNullException("memberCode is a required property for ModelClient and cannot be null");
            }
            this.MemberCode = memberCode;
            this.SubsystemCode = subsystemCode;
            this.ConnectionType = connectionType;
            this.Status = status;
        }

        /// <summary>
        /// &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional). Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
        /// </summary>
        /// <value>&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional). Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
        /// </summary>
        /// <value>Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
        [DataMember(Name = "instance_id", EmitDefaultValue = false)]
        public string InstanceId { get; private set; }

        /// <summary>
        /// Returns false as InstanceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInstanceId()
        {
            return false;
        }
        /// <summary>
        /// Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
        /// </summary>
        /// <value>Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
        [DataMember(Name = "member_name", EmitDefaultValue = false)]
        public string MemberName { get; private set; }

        /// <summary>
        /// Returns false as MemberName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMemberName()
        {
            return false;
        }
        /// <summary>
        /// Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
        /// </summary>
        /// <value>Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
        [DataMember(Name = "member_class", IsRequired = true, EmitDefaultValue = false)]
        public string MemberClass { get; set; }

        /// <summary>
        /// Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
        /// </summary>
        /// <value>Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
        [DataMember(Name = "member_code", IsRequired = true, EmitDefaultValue = false)]
        public string MemberCode { get; set; }

        /// <summary>
        /// Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
        /// </summary>
        /// <value>Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
        [DataMember(Name = "subsystem_code", EmitDefaultValue = false)]
        public string SubsystemCode { get; set; }

        /// <summary>
        /// if this client is the owner member of this security server
        /// </summary>
        /// <value>if this client is the owner member of this security server</value>
        [DataMember(Name = "owner", EmitDefaultValue = true)]
        public bool Owner { get; private set; }

        /// <summary>
        /// Returns false as Owner should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOwner()
        {
            return false;
        }
        /// <summary>
        /// if this client has a valid (registered and with good OCSP response) sign cert stored on this security server
        /// </summary>
        /// <value>if this client has a valid (registered and with good OCSP response) sign cert stored on this security server</value>
        [DataMember(Name = "has_valid_local_sign_cert", EmitDefaultValue = true)]
        public bool HasValidLocalSignCert { get; private set; }

        /// <summary>
        /// Returns false as HasValidLocalSignCert should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasValidLocalSignCert()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelClient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  MemberName: ").Append(MemberName).Append("\n");
            sb.Append("  MemberClass: ").Append(MemberClass).Append("\n");
            sb.Append("  MemberCode: ").Append(MemberCode).Append("\n");
            sb.Append("  SubsystemCode: ").Append(SubsystemCode).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  HasValidLocalSignCert: ").Append(HasValidLocalSignCert).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelClient);
        }

        /// <summary>
        /// Returns true if ModelClient instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.MemberName == input.MemberName ||
                    (this.MemberName != null &&
                    this.MemberName.Equals(input.MemberName))
                ) && 
                (
                    this.MemberClass == input.MemberClass ||
                    (this.MemberClass != null &&
                    this.MemberClass.Equals(input.MemberClass))
                ) && 
                (
                    this.MemberCode == input.MemberCode ||
                    (this.MemberCode != null &&
                    this.MemberCode.Equals(input.MemberCode))
                ) && 
                (
                    this.SubsystemCode == input.SubsystemCode ||
                    (this.SubsystemCode != null &&
                    this.SubsystemCode.Equals(input.SubsystemCode))
                ) && 
                (
                    this.Owner == input.Owner ||
                    this.Owner.Equals(input.Owner)
                ) && 
                (
                    this.HasValidLocalSignCert == input.HasValidLocalSignCert ||
                    this.HasValidLocalSignCert.Equals(input.HasValidLocalSignCert)
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    this.ConnectionType.Equals(input.ConnectionType)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.MemberName != null)
                {
                    hashCode = (hashCode * 59) + this.MemberName.GetHashCode();
                }
                if (this.MemberClass != null)
                {
                    hashCode = (hashCode * 59) + this.MemberClass.GetHashCode();
                }
                if (this.MemberCode != null)
                {
                    hashCode = (hashCode * 59) + this.MemberCode.GetHashCode();
                }
                if (this.SubsystemCode != null)
                {
                    hashCode = (hashCode * 59) + this.SubsystemCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                hashCode = (hashCode * 59) + this.HasValidLocalSignCert.GetHashCode();
                hashCode = (hashCode * 59) + this.ConnectionType.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 1023)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 1023.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // InstanceId (string) maxLength
            if (this.InstanceId != null && this.InstanceId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be less than 255.", new [] { "InstanceId" });
            }

            // InstanceId (string) minLength
            if (this.InstanceId != null && this.InstanceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be greater than 1.", new [] { "InstanceId" });
            }

            // MemberName (string) maxLength
            if (this.MemberName != null && this.MemberName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberName, length must be less than 255.", new [] { "MemberName" });
            }

            // MemberName (string) minLength
            if (this.MemberName != null && this.MemberName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberName, length must be greater than 1.", new [] { "MemberName" });
            }

            // MemberClass (string) maxLength
            if (this.MemberClass != null && this.MemberClass.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberClass, length must be less than 255.", new [] { "MemberClass" });
            }

            // MemberClass (string) minLength
            if (this.MemberClass != null && this.MemberClass.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberClass, length must be greater than 1.", new [] { "MemberClass" });
            }

            // MemberCode (string) maxLength
            if (this.MemberCode != null && this.MemberCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberCode, length must be less than 255.", new [] { "MemberCode" });
            }

            // MemberCode (string) minLength
            if (this.MemberCode != null && this.MemberCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberCode, length must be greater than 1.", new [] { "MemberCode" });
            }

            // SubsystemCode (string) maxLength
            if (this.SubsystemCode != null && this.SubsystemCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubsystemCode, length must be less than 255.", new [] { "SubsystemCode" });
            }

            // SubsystemCode (string) minLength
            if (this.SubsystemCode != null && this.SubsystemCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubsystemCode, length must be greater than 1.", new [] { "SubsystemCode" });
            }

            yield break;
        }
    }

}
