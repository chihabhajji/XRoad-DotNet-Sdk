/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// version information
    /// </summary>
    [DataContract(Name = "VersionInfo")]
    public partial class VersionInfo : IEquatable<VersionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VersionInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionInfo" /> class.
        /// </summary>
        /// <param name="info">information about the security server (required).</param>
        /// <param name="javaVersion">java version currently in use (required).</param>
        /// <param name="minJavaVersion">minimum supported java version (required).</param>
        /// <param name="maxJavaVersion">maximum supported java version (required).</param>
        /// <param name="usingSupportedJavaVersion">true if currently used java version is supported (required).</param>
        /// <param name="javaVendor">java vendor string from java.vendor system property (required).</param>
        /// <param name="javaRuntimeVersion">java runtime version string from java.runtime.version system property (required).</param>
        public VersionInfo(string info = default(string), int javaVersion = default(int), int minJavaVersion = default(int), int maxJavaVersion = default(int), bool usingSupportedJavaVersion = default(bool), string javaVendor = default(string), string javaRuntimeVersion = default(string))
        {
            // to ensure "info" is required (not null)
            if (info == null) {
                throw new ArgumentNullException("info is a required property for VersionInfo and cannot be null");
            }
            this.Info = info;
            this.JavaVersion = javaVersion;
            this.MinJavaVersion = minJavaVersion;
            this.MaxJavaVersion = maxJavaVersion;
            this.UsingSupportedJavaVersion = usingSupportedJavaVersion;
            // to ensure "javaVendor" is required (not null)
            if (javaVendor == null) {
                throw new ArgumentNullException("javaVendor is a required property for VersionInfo and cannot be null");
            }
            this.JavaVendor = javaVendor;
            // to ensure "javaRuntimeVersion" is required (not null)
            if (javaRuntimeVersion == null) {
                throw new ArgumentNullException("javaRuntimeVersion is a required property for VersionInfo and cannot be null");
            }
            this.JavaRuntimeVersion = javaRuntimeVersion;
        }

        /// <summary>
        /// information about the security server
        /// </summary>
        /// <value>information about the security server</value>
        [DataMember(Name = "info", IsRequired = true, EmitDefaultValue = false)]
        public string Info { get; set; }

        /// <summary>
        /// java version currently in use
        /// </summary>
        /// <value>java version currently in use</value>
        [DataMember(Name = "java_version", IsRequired = true, EmitDefaultValue = false)]
        public int JavaVersion { get; set; }

        /// <summary>
        /// minimum supported java version
        /// </summary>
        /// <value>minimum supported java version</value>
        [DataMember(Name = "min_java_version", IsRequired = true, EmitDefaultValue = false)]
        public int MinJavaVersion { get; set; }

        /// <summary>
        /// maximum supported java version
        /// </summary>
        /// <value>maximum supported java version</value>
        [DataMember(Name = "max_java_version", IsRequired = true, EmitDefaultValue = false)]
        public int MaxJavaVersion { get; set; }

        /// <summary>
        /// true if currently used java version is supported
        /// </summary>
        /// <value>true if currently used java version is supported</value>
        [DataMember(Name = "using_supported_java_version", IsRequired = true, EmitDefaultValue = true)]
        public bool UsingSupportedJavaVersion { get; set; }

        /// <summary>
        /// java vendor string from java.vendor system property
        /// </summary>
        /// <value>java vendor string from java.vendor system property</value>
        [DataMember(Name = "java_vendor", IsRequired = true, EmitDefaultValue = false)]
        public string JavaVendor { get; set; }

        /// <summary>
        /// java runtime version string from java.runtime.version system property
        /// </summary>
        /// <value>java runtime version string from java.runtime.version system property</value>
        [DataMember(Name = "java_runtime_version", IsRequired = true, EmitDefaultValue = false)]
        public string JavaRuntimeVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionInfo {\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  JavaVersion: ").Append(JavaVersion).Append("\n");
            sb.Append("  MinJavaVersion: ").Append(MinJavaVersion).Append("\n");
            sb.Append("  MaxJavaVersion: ").Append(MaxJavaVersion).Append("\n");
            sb.Append("  UsingSupportedJavaVersion: ").Append(UsingSupportedJavaVersion).Append("\n");
            sb.Append("  JavaVendor: ").Append(JavaVendor).Append("\n");
            sb.Append("  JavaRuntimeVersion: ").Append(JavaRuntimeVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionInfo);
        }

        /// <summary>
        /// Returns true if VersionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.JavaVersion == input.JavaVersion ||
                    this.JavaVersion.Equals(input.JavaVersion)
                ) && 
                (
                    this.MinJavaVersion == input.MinJavaVersion ||
                    this.MinJavaVersion.Equals(input.MinJavaVersion)
                ) && 
                (
                    this.MaxJavaVersion == input.MaxJavaVersion ||
                    this.MaxJavaVersion.Equals(input.MaxJavaVersion)
                ) && 
                (
                    this.UsingSupportedJavaVersion == input.UsingSupportedJavaVersion ||
                    this.UsingSupportedJavaVersion.Equals(input.UsingSupportedJavaVersion)
                ) && 
                (
                    this.JavaVendor == input.JavaVendor ||
                    (this.JavaVendor != null &&
                    this.JavaVendor.Equals(input.JavaVendor))
                ) && 
                (
                    this.JavaRuntimeVersion == input.JavaRuntimeVersion ||
                    (this.JavaRuntimeVersion != null &&
                    this.JavaRuntimeVersion.Equals(input.JavaRuntimeVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Info != null)
                {
                    hashCode = (hashCode * 59) + this.Info.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JavaVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.MinJavaVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxJavaVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.UsingSupportedJavaVersion.GetHashCode();
                if (this.JavaVendor != null)
                {
                    hashCode = (hashCode * 59) + this.JavaVendor.GetHashCode();
                }
                if (this.JavaRuntimeVersion != null)
                {
                    hashCode = (hashCode * 59) + this.JavaRuntimeVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Info (string) maxLength
            if (this.Info != null && this.Info.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Info, length must be less than 255.", new [] { "Info" });
            }

            // Info (string) minLength
            if (this.Info != null && this.Info.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Info, length must be greater than 1.", new [] { "Info" });
            }

            yield break;
        }
    }

}
