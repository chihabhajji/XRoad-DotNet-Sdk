/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// object that contains a code identifier and possibly collection of associated metadata or validation errors. Used to relay error and warning information.
    /// </summary>
    [DataContract(Name = "CodeWithDetails")]
    public partial class CodeWithDetails : IEquatable<CodeWithDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeWithDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CodeWithDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeWithDetails" /> class.
        /// </summary>
        /// <param name="code">identifier of the item (for example errorcode) (required).</param>
        /// <param name="metadata">array containing metadata associated with the item. For example names of services were attempted to add, but failed.</param>
        /// <param name="validationErrors">A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors.</param>
        public CodeWithDetails(string code = default(string), List<string> metadata = default(List<string>), Dictionary<string, List<string>> validationErrors = default(Dictionary<string, List<string>>))
        {
            // to ensure "code" is required (not null)
            if (code == null) {
                throw new ArgumentNullException("code is a required property for CodeWithDetails and cannot be null");
            }
            this.Code = code;
            this.Metadata = metadata;
            this.ValidationErrors = validationErrors;
        }

        /// <summary>
        /// identifier of the item (for example errorcode)
        /// </summary>
        /// <value>identifier of the item (for example errorcode)</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// array containing metadata associated with the item. For example names of services were attempted to add, but failed
        /// </summary>
        /// <value>array containing metadata associated with the item. For example names of services were attempted to add, but failed</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public List<string> Metadata { get; set; }

        /// <summary>
        /// A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors
        /// </summary>
        /// <value>A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors</value>
        [DataMember(Name = "validation_errors", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeWithDetails {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeWithDetails);
        }

        /// <summary>
        /// Returns true if CodeWithDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeWithDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeWithDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    input.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.ValidationErrors != null)
                {
                    hashCode = (hashCode * 59) + this.ValidationErrors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
