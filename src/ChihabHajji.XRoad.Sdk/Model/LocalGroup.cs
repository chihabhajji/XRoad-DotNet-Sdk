/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// group
    /// </summary>
    [DataContract(Name = "LocalGroup")]
    public partial class LocalGroup : IEquatable<LocalGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalGroup" /> class.
        /// </summary>
        /// <param name="code">group code (required).</param>
        /// <param name="description">group description (required).</param>
        /// <param name="memberCount">member count.</param>
        /// <param name="updatedAt">last time updated.</param>
        /// <param name="members">group members.</param>
        public LocalGroup(string code = default(string), string description = default(string), int memberCount = default(int), DateTime updatedAt = default(DateTime), List<GroupMember> members = default(List<GroupMember>))
        {
            // to ensure "code" is required (not null)
            if (code == null) {
                throw new ArgumentNullException("code is a required property for LocalGroup and cannot be null");
            }
            this.Code = code;
            // to ensure "description" is required (not null)
            if (description == null) {
                throw new ArgumentNullException("description is a required property for LocalGroup and cannot be null");
            }
            this.Description = description;
            this.MemberCount = memberCount;
            this.UpdatedAt = updatedAt;
            this.Members = members;
        }

        /// <summary>
        /// unique identifier
        /// </summary>
        /// <value>unique identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// group code
        /// </summary>
        /// <value>group code</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// group description
        /// </summary>
        /// <value>group description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// member count
        /// </summary>
        /// <value>member count</value>
        [DataMember(Name = "member_count", EmitDefaultValue = false)]
        public int MemberCount { get; set; }

        /// <summary>
        /// last time updated
        /// </summary>
        /// <value>last time updated</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// group members
        /// </summary>
        /// <value>group members</value>
        [DataMember(Name = "members", EmitDefaultValue = false)]
        public List<GroupMember> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocalGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalGroup);
        }

        /// <summary>
        /// Returns true if LocalGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MemberCount == input.MemberCount ||
                    this.MemberCount.Equals(input.MemberCount)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MemberCount.GetHashCode();
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Members != null)
                {
                    hashCode = (hashCode * 59) + this.Members.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 255.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 255.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // MemberCount (int) maximum
            if (this.MemberCount > (int)1000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberCount, must be a value less than or equal to 1000000.", new [] { "MemberCount" });
            }

            // MemberCount (int) minimum
            if (this.MemberCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberCount, must be a value greater than or equal to 0.", new [] { "MemberCount" });
            }
            // TODO
            // // UpdatedAt (DateTime) maxLength
            // if (this.UpdatedAt != null && this.UpdatedAt.Length > 24)
            // {
            //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpdatedAt, length must be less than 24.", new [] { "UpdatedAt" });
            // }
            //
            // // UpdatedAt (DateTime) minLength
            // if (this.UpdatedAt != null && this.UpdatedAt.Length < 24)
            // {
            //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UpdatedAt, length must be greater than 24.", new [] { "UpdatedAt" });
            // }

            yield break;
        }
    }

}
