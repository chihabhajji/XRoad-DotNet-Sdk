/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// TokenPinUpdate
    /// </summary>
    [DataContract(Name = "TokenPinUpdate")]
    public partial class TokenPinUpdate : IEquatable<TokenPinUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenPinUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenPinUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenPinUpdate" /> class.
        /// </summary>
        /// <param name="oldPin">the old pin code of the token (required).</param>
        /// <param name="newPin">the new pin code of the token (required).</param>
        public TokenPinUpdate(string oldPin = default(string), string newPin = default(string))
        {
            // to ensure "oldPin" is required (not null)
            if (oldPin == null) {
                throw new ArgumentNullException("oldPin is a required property for TokenPinUpdate and cannot be null");
            }
            this.OldPin = oldPin;
            // to ensure "newPin" is required (not null)
            if (newPin == null) {
                throw new ArgumentNullException("newPin is a required property for TokenPinUpdate and cannot be null");
            }
            this.NewPin = newPin;
        }

        /// <summary>
        /// the old pin code of the token
        /// </summary>
        /// <value>the old pin code of the token</value>
        [DataMember(Name = "old_pin", IsRequired = true, EmitDefaultValue = false)]
        public string OldPin { get; set; }

        /// <summary>
        /// the new pin code of the token
        /// </summary>
        /// <value>the new pin code of the token</value>
        [DataMember(Name = "new_pin", IsRequired = true, EmitDefaultValue = false)]
        public string NewPin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenPinUpdate {\n");
            sb.Append("  OldPin: ").Append(OldPin).Append("\n");
            sb.Append("  NewPin: ").Append(NewPin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenPinUpdate);
        }

        /// <summary>
        /// Returns true if TokenPinUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenPinUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenPinUpdate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OldPin == input.OldPin ||
                    (this.OldPin != null &&
                    this.OldPin.Equals(input.OldPin))
                ) && 
                (
                    this.NewPin == input.NewPin ||
                    (this.NewPin != null &&
                    this.NewPin.Equals(input.NewPin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldPin != null)
                {
                    hashCode = (hashCode * 59) + this.OldPin.GetHashCode();
                }
                if (this.NewPin != null)
                {
                    hashCode = (hashCode * 59) + this.NewPin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OldPin (string) maxLength
            if (this.OldPin != null && this.OldPin.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OldPin, length must be less than 255.", new [] { "OldPin" });
            }

            // OldPin (string) minLength
            if (this.OldPin != null && this.OldPin.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OldPin, length must be greater than 1.", new [] { "OldPin" });
            }

            // NewPin (string) maxLength
            if (this.NewPin != null && this.NewPin.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewPin, length must be less than 255.", new [] { "NewPin" });
            }

            // NewPin (string) minLength
            if (this.NewPin != null && this.NewPin.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewPin, length must be greater than 1.", new [] { "NewPin" });
            }

            yield break;
        }
    }

}
