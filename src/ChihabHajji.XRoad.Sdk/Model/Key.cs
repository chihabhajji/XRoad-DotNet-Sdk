/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// Key for the certificate. Also includes the possible actions that can be done to this object, e.g DELETE (only for key related operations and does not consider user authorization).
    /// </summary>
    [DataContract(Name = "Key")]
    public partial class Key : IEquatable<Key>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name = "usage", EmitDefaultValue = false)]
        public KeyUsageType? Usage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Key" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Key() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Key" /> class.
        /// </summary>
        /// <param name="name">key name (required).</param>
        /// <param name="label">key label (required).</param>
        /// <param name="certificates">list of certificates for the key (required).</param>
        /// <param name="certificateSigningRequests">list of CSRs for the key (required).</param>
        /// <param name="usage">usage.</param>
        /// <param name="available">if the key is available.</param>
        /// <param name="savedToConfiguration">if the key is saved to configuration.</param>
        /// <param name="possibleActions">array containing the possible actions that can be done for this item.</param>
        public Key(string name = default(string), string label = default(string), List<TokenCertificate> certificates = default(List<TokenCertificate>), List<TokenCertificateSigningRequest> certificateSigningRequests = default(List<TokenCertificateSigningRequest>), KeyUsageType? usage = default(KeyUsageType?), bool available = default(bool), bool savedToConfiguration = default(bool), List<PossibleAction> possibleActions = default(List<PossibleAction>))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for Key and cannot be null");
            }
            this.Name = name;
            // to ensure "label" is required (not null)
            if (label == null) {
                throw new ArgumentNullException("label is a required property for Key and cannot be null");
            }
            this.Label = label;
            // to ensure "certificates" is required (not null)
            if (certificates == null) {
                throw new ArgumentNullException("certificates is a required property for Key and cannot be null");
            }
            this.Certificates = certificates;
            // to ensure "certificateSigningRequests" is required (not null)
            if (certificateSigningRequests == null) {
                throw new ArgumentNullException("certificateSigningRequests is a required property for Key and cannot be null");
            }
            this.CertificateSigningRequests = certificateSigningRequests;
            this.Usage = usage;
            this.Available = available;
            this.SavedToConfiguration = savedToConfiguration;
            this.PossibleActions = possibleActions;
        }

        /// <summary>
        /// key id
        /// </summary>
        /// <value>key id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// key name
        /// </summary>
        /// <value>key name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// key label
        /// </summary>
        /// <value>key label</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// list of certificates for the key
        /// </summary>
        /// <value>list of certificates for the key</value>
        [DataMember(Name = "certificates", IsRequired = true, EmitDefaultValue = false)]
        public List<TokenCertificate> Certificates { get; set; }

        /// <summary>
        /// list of CSRs for the key
        /// </summary>
        /// <value>list of CSRs for the key</value>
        [DataMember(Name = "certificate_signing_requests", IsRequired = true, EmitDefaultValue = false)]
        public List<TokenCertificateSigningRequest> CertificateSigningRequests { get; set; }

        /// <summary>
        /// if the key is available
        /// </summary>
        /// <value>if the key is available</value>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// if the key is saved to configuration
        /// </summary>
        /// <value>if the key is saved to configuration</value>
        [DataMember(Name = "saved_to_configuration", EmitDefaultValue = true)]
        public bool SavedToConfiguration { get; set; }

        /// <summary>
        /// array containing the possible actions that can be done for this item
        /// </summary>
        /// <value>array containing the possible actions that can be done for this item</value>
        [DataMember(Name = "possible_actions", EmitDefaultValue = false)]
        public List<PossibleAction> PossibleActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Key {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  CertificateSigningRequests: ").Append(CertificateSigningRequests).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  SavedToConfiguration: ").Append(SavedToConfiguration).Append("\n");
            sb.Append("  PossibleActions: ").Append(PossibleActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Key);
        }

        /// <summary>
        /// Returns true if Key instances are equal
        /// </summary>
        /// <param name="input">Instance of Key to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Key input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Certificates == input.Certificates ||
                    this.Certificates != null &&
                    input.Certificates != null &&
                    this.Certificates.SequenceEqual(input.Certificates)
                ) && 
                (
                    this.CertificateSigningRequests == input.CertificateSigningRequests ||
                    this.CertificateSigningRequests != null &&
                    input.CertificateSigningRequests != null &&
                    this.CertificateSigningRequests.SequenceEqual(input.CertificateSigningRequests)
                ) && 
                (
                    this.Usage == input.Usage ||
                    this.Usage.Equals(input.Usage)
                ) && 
                (
                    this.Available == input.Available ||
                    this.Available.Equals(input.Available)
                ) && 
                (
                    this.SavedToConfiguration == input.SavedToConfiguration ||
                    this.SavedToConfiguration.Equals(input.SavedToConfiguration)
                ) && 
                (
                    this.PossibleActions == input.PossibleActions ||
                    this.PossibleActions != null &&
                    input.PossibleActions != null &&
                    this.PossibleActions.SequenceEqual(input.PossibleActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                if (this.Certificates != null)
                {
                    hashCode = (hashCode * 59) + this.Certificates.GetHashCode();
                }
                if (this.CertificateSigningRequests != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateSigningRequests.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Usage.GetHashCode();
                hashCode = (hashCode * 59) + this.Available.GetHashCode();
                hashCode = (hashCode * 59) + this.SavedToConfiguration.GetHashCode();
                if (this.PossibleActions != null)
                {
                    hashCode = (hashCode * 59) + this.PossibleActions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Label (string) maxLength
            if (this.Label != null && this.Label.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 255.", new [] { "Label" });
            }

            // Label (string) minLength
            if (this.Label != null && this.Label.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be greater than 1.", new [] { "Label" });
            }

            yield break;
        }
    }

}
