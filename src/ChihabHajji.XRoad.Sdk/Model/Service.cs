/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// service for the service description
    /// </summary>
    [DataContract(Name = "Service")]
    public partial class Service : IEquatable<Service>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Service() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="id">encoded service id, including client id (required).</param>
        /// <param name="fullServiceCode">encoded service code and version.</param>
        /// <param name="serviceCode">encoded service code (required).</param>
        /// <param name="timeout">service time out value (required).</param>
        /// <param name="sslAuth">service ssl auth.</param>
        /// <param name="subjectsCount">count of acl subjects.</param>
        /// <param name="url">service url (required).</param>
        /// <param name="endpoints">list of endpoints linked to this service.</param>
        public Service(string id = default(string), string fullServiceCode = default(string), string serviceCode = default(string), int timeout = default(int), bool sslAuth = default(bool), int subjectsCount = default(int), string url = default(string), List<Endpoint> endpoints = default(List<Endpoint>))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for Service and cannot be null");
            }
            this.Id = id;
            // to ensure "serviceCode" is required (not null)
            if (serviceCode == null) {
                throw new ArgumentNullException("serviceCode is a required property for Service and cannot be null");
            }
            this.ServiceCode = serviceCode;
            this.Timeout = timeout;
            // to ensure "url" is required (not null)
            if (url == null) {
                throw new ArgumentNullException("url is a required property for Service and cannot be null");
            }
            this.Url = url;
            this.FullServiceCode = fullServiceCode;
            this.SslAuth = sslAuth;
            this.SubjectsCount = subjectsCount;
            this.Endpoints = endpoints;
        }

        /// <summary>
        /// encoded service id, including client id
        /// </summary>
        /// <value>encoded service id, including client id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// encoded service code and version
        /// </summary>
        /// <value>encoded service code and version</value>
        [DataMember(Name = "full_service_code", EmitDefaultValue = false)]
        public string FullServiceCode { get; set; }

        /// <summary>
        /// encoded service code
        /// </summary>
        /// <value>encoded service code</value>
        [DataMember(Name = "service_code", IsRequired = true, EmitDefaultValue = false)]
        public string ServiceCode { get; set; }

        /// <summary>
        /// service time out value
        /// </summary>
        /// <value>service time out value</value>
        [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = false)]
        public int Timeout { get; set; }

        /// <summary>
        /// service title
        /// </summary>
        /// <value>service title</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; private set; }

        /// <summary>
        /// Returns false as Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTitle()
        {
            return false;
        }
        /// <summary>
        /// service ssl auth
        /// </summary>
        /// <value>service ssl auth</value>
        [DataMember(Name = "ssl_auth", EmitDefaultValue = true)]
        public bool SslAuth { get; set; }

        /// <summary>
        /// count of acl subjects
        /// </summary>
        /// <value>count of acl subjects</value>
        [DataMember(Name = "subjects_count", EmitDefaultValue = false)]
        public int SubjectsCount { get; set; }

        /// <summary>
        /// service url
        /// </summary>
        /// <value>service url</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// list of endpoints linked to this service
        /// </summary>
        /// <value>list of endpoints linked to this service</value>
        [DataMember(Name = "endpoints", EmitDefaultValue = false)]
        public List<Endpoint> Endpoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FullServiceCode: ").Append(FullServiceCode).Append("\n");
            sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SslAuth: ").Append(SslAuth).Append("\n");
            sb.Append("  SubjectsCount: ").Append(SubjectsCount).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Service);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="input">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FullServiceCode == input.FullServiceCode ||
                    (this.FullServiceCode != null &&
                    this.FullServiceCode.Equals(input.FullServiceCode))
                ) && 
                (
                    this.ServiceCode == input.ServiceCode ||
                    (this.ServiceCode != null &&
                    this.ServiceCode.Equals(input.ServiceCode))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.SslAuth == input.SslAuth ||
                    this.SslAuth.Equals(input.SslAuth)
                ) && 
                (
                    this.SubjectsCount == input.SubjectsCount ||
                    this.SubjectsCount.Equals(input.SubjectsCount)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    input.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.FullServiceCode != null)
                {
                    hashCode = (hashCode * 59) + this.FullServiceCode.GetHashCode();
                }
                if (this.ServiceCode != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SslAuth.GetHashCode();
                hashCode = (hashCode * 59) + this.SubjectsCount.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Endpoints != null)
                {
                    hashCode = (hashCode * 59) + this.Endpoints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if (this.Id != null && this.Id.Length > 1279)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 1279.", new [] { "Id" });
            }

            // Id (string) minLength
            if (this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // FullServiceCode (string) maxLength
            if (this.FullServiceCode != null && this.FullServiceCode.Length > 511)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FullServiceCode, length must be less than 511.", new [] { "FullServiceCode" });
            }

            // FullServiceCode (string) minLength
            if (this.FullServiceCode != null && this.FullServiceCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FullServiceCode, length must be greater than 1.", new [] { "FullServiceCode" });
            }

            // ServiceCode (string) maxLength
            if (this.ServiceCode != null && this.ServiceCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceCode, length must be less than 255.", new [] { "ServiceCode" });
            }

            // ServiceCode (string) minLength
            if (this.ServiceCode != null && this.ServiceCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceCode, length must be greater than 1.", new [] { "ServiceCode" });
            }

            // Timeout (int) maximum
            if (this.Timeout > (int)1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value less than or equal to 1000.", new [] { "Timeout" });
            }

            // Timeout (int) minimum
            if (this.Timeout < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 0.", new [] { "Timeout" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 255.", new [] { "Title" });
            }

            // Title (string) minLength
            if (this.Title != null && this.Title.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be greater than 1.", new [] { "Title" });
            }

            // SubjectsCount (int) maximum
            if (this.SubjectsCount > (int)100000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectsCount, must be a value less than or equal to 100000.", new [] { "SubjectsCount" });
            }

            // SubjectsCount (int) minimum
            if (this.SubjectsCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectsCount, must be a value greater than or equal to 0.", new [] { "SubjectsCount" });
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be less than 255.", new [] { "Url" });
            }

            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            yield break;
        }
    }

}
