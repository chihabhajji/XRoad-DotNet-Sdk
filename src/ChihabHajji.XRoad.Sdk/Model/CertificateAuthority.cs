/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// approved certificate authority information. Only for top CAs.
    /// </summary>
    [DataContract(Name = "CertificateAuthority")]
    public partial class CertificateAuthority : IEquatable<CertificateAuthority>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OcspResponse
        /// </summary>
        [DataMember(Name = "ocsp_response", IsRequired = true, EmitDefaultValue = false)]
        public CertificateAuthorityOcspResponse OcspResponse { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAuthority" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CertificateAuthority() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAuthority" /> class.
        /// </summary>
        /// <param name="name">name of the CA, as defined in global conf. Used also as an identifier (required).</param>
        /// <param name="subjectDistinguishedName">subject distinguished name (required).</param>
        /// <param name="issuerDistinguishedName">issuer distinguished name (required).</param>
        /// <param name="ocspResponse">ocspResponse (required).</param>
        /// <param name="notAfter">certificate authority expires at (required).</param>
        /// <param name="topCa">if the certificate authority is top CA (instead of intermediate) (required).</param>
        /// <param name="path">encoded path string from this CA to top CA (required).</param>
        /// <param name="authenticationOnly">if certificate authority is limited for authentication use only (required).</param>
        public CertificateAuthority(string name = default(string), string subjectDistinguishedName = default(string), string issuerDistinguishedName = default(string), CertificateAuthorityOcspResponse ocspResponse = default(CertificateAuthorityOcspResponse), DateTime notAfter = default(DateTime), bool topCa = default(bool), string path = default(string), bool authenticationOnly = default(bool))
        {
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for CertificateAuthority and cannot be null");
            }
            this.Name = name;
            // to ensure "subjectDistinguishedName" is required (not null)
            if (subjectDistinguishedName == null) {
                throw new ArgumentNullException("subjectDistinguishedName is a required property for CertificateAuthority and cannot be null");
            }
            this.SubjectDistinguishedName = subjectDistinguishedName;
            // to ensure "issuerDistinguishedName" is required (not null)
            if (issuerDistinguishedName == null) {
                throw new ArgumentNullException("issuerDistinguishedName is a required property for CertificateAuthority and cannot be null");
            }
            this.IssuerDistinguishedName = issuerDistinguishedName;
            this.OcspResponse = ocspResponse;
            this.NotAfter = notAfter;
            this.TopCa = topCa;
            // to ensure "path" is required (not null)
            if (path == null) {
                throw new ArgumentNullException("path is a required property for CertificateAuthority and cannot be null");
            }
            this.Path = path;
            this.AuthenticationOnly = authenticationOnly;
        }

        /// <summary>
        /// name of the CA, as defined in global conf. Used also as an identifier
        /// </summary>
        /// <value>name of the CA, as defined in global conf. Used also as an identifier</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// subject distinguished name
        /// </summary>
        /// <value>subject distinguished name</value>
        [DataMember(Name = "subject_distinguished_name", IsRequired = true, EmitDefaultValue = false)]
        public string SubjectDistinguishedName { get; set; }

        /// <summary>
        /// issuer distinguished name
        /// </summary>
        /// <value>issuer distinguished name</value>
        [DataMember(Name = "issuer_distinguished_name", IsRequired = true, EmitDefaultValue = false)]
        public string IssuerDistinguishedName { get; set; }

        /// <summary>
        /// certificate authority expires at
        /// </summary>
        /// <value>certificate authority expires at</value>
        [DataMember(Name = "not_after", IsRequired = true, EmitDefaultValue = false)]
        public DateTime NotAfter { get; set; }

        /// <summary>
        /// if the certificate authority is top CA (instead of intermediate)
        /// </summary>
        /// <value>if the certificate authority is top CA (instead of intermediate)</value>
        [DataMember(Name = "top_ca", IsRequired = true, EmitDefaultValue = true)]
        public bool TopCa { get; set; }

        /// <summary>
        /// encoded path string from this CA to top CA
        /// </summary>
        /// <value>encoded path string from this CA to top CA</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// if certificate authority is limited for authentication use only
        /// </summary>
        /// <value>if certificate authority is limited for authentication use only</value>
        [DataMember(Name = "authentication_only", IsRequired = true, EmitDefaultValue = true)]
        public bool AuthenticationOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CertificateAuthority {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubjectDistinguishedName: ").Append(SubjectDistinguishedName).Append("\n");
            sb.Append("  IssuerDistinguishedName: ").Append(IssuerDistinguishedName).Append("\n");
            sb.Append("  OcspResponse: ").Append(OcspResponse).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("  TopCa: ").Append(TopCa).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateAuthority);
        }

        /// <summary>
        /// Returns true if CertificateAuthority instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateAuthority to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateAuthority input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SubjectDistinguishedName == input.SubjectDistinguishedName ||
                    (this.SubjectDistinguishedName != null &&
                    this.SubjectDistinguishedName.Equals(input.SubjectDistinguishedName))
                ) && 
                (
                    this.IssuerDistinguishedName == input.IssuerDistinguishedName ||
                    (this.IssuerDistinguishedName != null &&
                    this.IssuerDistinguishedName.Equals(input.IssuerDistinguishedName))
                ) && 
                (
                    this.OcspResponse == input.OcspResponse ||
                    this.OcspResponse.Equals(input.OcspResponse)
                ) && 
                (
                    this.NotAfter == input.NotAfter ||
                    (this.NotAfter != null &&
                    this.NotAfter.Equals(input.NotAfter))
                ) && 
                (
                    this.TopCa == input.TopCa ||
                    this.TopCa.Equals(input.TopCa)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.AuthenticationOnly == input.AuthenticationOnly ||
                    this.AuthenticationOnly.Equals(input.AuthenticationOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SubjectDistinguishedName != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectDistinguishedName.GetHashCode();
                }
                if (this.IssuerDistinguishedName != null)
                {
                    hashCode = (hashCode * 59) + this.IssuerDistinguishedName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OcspResponse.GetHashCode();
                if (this.NotAfter != null)
                {
                    hashCode = (hashCode * 59) + this.NotAfter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TopCa.GetHashCode();
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AuthenticationOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // SubjectDistinguishedName (string) maxLength
            if (this.SubjectDistinguishedName != null && this.SubjectDistinguishedName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectDistinguishedName, length must be less than 1024.", new [] { "SubjectDistinguishedName" });
            }

            // SubjectDistinguishedName (string) minLength
            if (this.SubjectDistinguishedName != null && this.SubjectDistinguishedName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubjectDistinguishedName, length must be greater than 1.", new [] { "SubjectDistinguishedName" });
            }

            // IssuerDistinguishedName (string) maxLength
            if (this.IssuerDistinguishedName != null && this.IssuerDistinguishedName.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerDistinguishedName, length must be less than 1024.", new [] { "IssuerDistinguishedName" });
            }

            // IssuerDistinguishedName (string) minLength
            if (this.IssuerDistinguishedName != null && this.IssuerDistinguishedName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerDistinguishedName, length must be greater than 1.", new [] { "IssuerDistinguishedName" });
            }
            // TODO 
            // NotAfter (DateTime) maxLength
            // if (this.NotAfter != null && this.NotAfter.Length > 24)
            // {
            //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotAfter, length must be less than 24.", new [] { "NotAfter" });
            // }
            //
            // // NotAfter (DateTime) minLength
            // if (this.NotAfter != null && this.NotAfter.Length < 24)
            // {
            //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotAfter, length must be greater than 24.", new [] { "NotAfter" });
            // }

            // Path (string) minLength
            if (this.Path != null && this.Path.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Path, length must be greater than 1.", new [] { "Path" });
            }

            yield break;
        }
    }

}
