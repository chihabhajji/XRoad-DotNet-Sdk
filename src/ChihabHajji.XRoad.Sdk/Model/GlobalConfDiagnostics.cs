/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// global configuration diagnostics
    /// </summary>
    [DataContract(Name = "GlobalConfDiagnostics")]
    public partial class GlobalConfDiagnostics : IEquatable<GlobalConfDiagnostics>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets StatusClass
        /// </summary>
        [DataMember(Name = "status_class", IsRequired = true, EmitDefaultValue = true)]
        public DiagnosticStatusClass StatusClass { get; set; }

        /// <summary>
        /// Returns false as StatusClass should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatusClass()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "status_code", IsRequired = true, EmitDefaultValue = true)]
        public ConfigurationStatus StatusCode { get; set; }

        /// <summary>
        /// Returns false as StatusCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatusCode()
        {
            return false;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalConfDiagnostics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GlobalConfDiagnostics()
        {
        }

        /// <summary>
        /// last time updated
        /// </summary>
        /// <value>last time updated</value>
        [DataMember(Name = "prev_update_at", IsRequired = true, EmitDefaultValue = false)]
        public DateTime PrevUpdateAt { get; private set; }

        /// <summary>
        /// Returns false as PrevUpdateAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrevUpdateAt()
        {
            return false;
        }
        /// <summary>
        /// last time updated
        /// </summary>
        /// <value>last time updated</value>
        [DataMember(Name = "next_update_at", IsRequired = true, EmitDefaultValue = false)]
        public DateTime NextUpdateAt { get; private set; }

        /// <summary>
        /// Returns false as NextUpdateAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextUpdateAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GlobalConfDiagnostics {\n");
            sb.Append("  StatusClass: ").Append(StatusClass).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  PrevUpdateAt: ").Append(PrevUpdateAt).Append("\n");
            sb.Append("  NextUpdateAt: ").Append(NextUpdateAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GlobalConfDiagnostics);
        }

        /// <summary>
        /// Returns true if GlobalConfDiagnostics instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalConfDiagnostics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalConfDiagnostics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatusClass == input.StatusClass ||
                    this.StatusClass.Equals(input.StatusClass)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.PrevUpdateAt == input.PrevUpdateAt ||
                    (this.PrevUpdateAt != null &&
                    this.PrevUpdateAt.Equals(input.PrevUpdateAt))
                ) && 
                (
                    this.NextUpdateAt == input.NextUpdateAt ||
                    (this.NextUpdateAt != null &&
                    this.NextUpdateAt.Equals(input.NextUpdateAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StatusClass.GetHashCode();
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                if (this.PrevUpdateAt != null)
                {
                    hashCode = (hashCode * 59) + this.PrevUpdateAt.GetHashCode();
                }
                if (this.NextUpdateAt != null)
                {
                    hashCode = (hashCode * 59) + this.NextUpdateAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PrevUpdateAt (DateTime) maxLength
            if (this.PrevUpdateAt != null && this.PrevUpdateAt.Length > 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrevUpdateAt, length must be less than 24.", new [] { "PrevUpdateAt" });
            }

            // PrevUpdateAt (DateTime) minLength
            if (this.PrevUpdateAt != null && this.PrevUpdateAt.Length < 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PrevUpdateAt, length must be greater than 24.", new [] { "PrevUpdateAt" });
            }

            // NextUpdateAt (DateTime) maxLength
            if (this.NextUpdateAt != null && this.NextUpdateAt.Length > 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextUpdateAt, length must be less than 24.", new [] { "NextUpdateAt" });
            }

            // NextUpdateAt (DateTime) minLength
            if (this.NextUpdateAt != null && this.NextUpdateAt.Length < 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NextUpdateAt, length must be greater than 24.", new [] { "NextUpdateAt" });
            }

            yield break;
        }
    }

}
