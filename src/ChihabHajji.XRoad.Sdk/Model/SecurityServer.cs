/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ChihabHajji.XRoad.Sdk.Client.OpenAPIDateConverter;

namespace ChihabHajji.XRoad.Sdk.Model
{
    /// <summary>
    /// security server information
    /// </summary>
    [DataContract(Name = "SecurityServer")]
    public partial class SecurityServer : IEquatable<SecurityServer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityServer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityServer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityServer" /> class.
        /// </summary>
        /// <param name="id">&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;security_server_code&gt; (required).</param>
        /// <param name="instanceId">xroad instance id.</param>
        /// <param name="memberClass">member class.</param>
        /// <param name="memberCode">member code.</param>
        /// <param name="serverCode">security server code.</param>
        /// <param name="serverAddress">security server address (ip or name).</param>
        public SecurityServer(string id = default(string), string instanceId = default(string), string memberClass = default(string), string memberCode = default(string), string serverCode = default(string), string serverAddress = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for SecurityServer and cannot be null");
            }
            this.Id = id;
            this.InstanceId = instanceId;
            this.MemberClass = memberClass;
            this.MemberCode = memberCode;
            this.ServerCode = serverCode;
            this.ServerAddress = serverAddress;
        }

        /// <summary>
        /// &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;security_server_code&gt;
        /// </summary>
        /// <value>&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;security_server_code&gt;</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// xroad instance id
        /// </summary>
        /// <value>xroad instance id</value>
        [DataMember(Name = "instance_id", EmitDefaultValue = false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// member class
        /// </summary>
        /// <value>member class</value>
        [DataMember(Name = "member_class", EmitDefaultValue = false)]
        public string MemberClass { get; set; }

        /// <summary>
        /// member code
        /// </summary>
        /// <value>member code</value>
        [DataMember(Name = "member_code", EmitDefaultValue = false)]
        public string MemberCode { get; set; }

        /// <summary>
        /// security server code
        /// </summary>
        /// <value>security server code</value>
        [DataMember(Name = "server_code", EmitDefaultValue = false)]
        public string ServerCode { get; set; }

        /// <summary>
        /// security server address (ip or name)
        /// </summary>
        /// <value>security server address (ip or name)</value>
        [DataMember(Name = "server_address", EmitDefaultValue = false)]
        public string ServerAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecurityServer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  MemberClass: ").Append(MemberClass).Append("\n");
            sb.Append("  MemberCode: ").Append(MemberCode).Append("\n");
            sb.Append("  ServerCode: ").Append(ServerCode).Append("\n");
            sb.Append("  ServerAddress: ").Append(ServerAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityServer);
        }

        /// <summary>
        /// Returns true if SecurityServer instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityServer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.MemberClass == input.MemberClass ||
                    (this.MemberClass != null &&
                    this.MemberClass.Equals(input.MemberClass))
                ) && 
                (
                    this.MemberCode == input.MemberCode ||
                    (this.MemberCode != null &&
                    this.MemberCode.Equals(input.MemberCode))
                ) && 
                (
                    this.ServerCode == input.ServerCode ||
                    (this.ServerCode != null &&
                    this.ServerCode.Equals(input.ServerCode))
                ) && 
                (
                    this.ServerAddress == input.ServerAddress ||
                    (this.ServerAddress != null &&
                    this.ServerAddress.Equals(input.ServerAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.InstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceId.GetHashCode();
                }
                if (this.MemberClass != null)
                {
                    hashCode = (hashCode * 59) + this.MemberClass.GetHashCode();
                }
                if (this.MemberCode != null)
                {
                    hashCode = (hashCode * 59) + this.MemberCode.GetHashCode();
                }
                if (this.ServerCode != null)
                {
                    hashCode = (hashCode * 59) + this.ServerCode.GetHashCode();
                }
                if (this.ServerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ServerAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // InstanceId (string) maxLength
            if (this.InstanceId != null && this.InstanceId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be less than 255.", new [] { "InstanceId" });
            }

            // InstanceId (string) minLength
            if (this.InstanceId != null && this.InstanceId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstanceId, length must be greater than 1.", new [] { "InstanceId" });
            }

            // MemberClass (string) maxLength
            if (this.MemberClass != null && this.MemberClass.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberClass, length must be less than 255.", new [] { "MemberClass" });
            }

            // MemberClass (string) minLength
            if (this.MemberClass != null && this.MemberClass.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberClass, length must be greater than 1.", new [] { "MemberClass" });
            }

            // MemberCode (string) maxLength
            if (this.MemberCode != null && this.MemberCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberCode, length must be less than 255.", new [] { "MemberCode" });
            }

            // MemberCode (string) minLength
            if (this.MemberCode != null && this.MemberCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MemberCode, length must be greater than 1.", new [] { "MemberCode" });
            }

            // ServerCode (string) maxLength
            if (this.ServerCode != null && this.ServerCode.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerCode, length must be less than 255.", new [] { "ServerCode" });
            }

            // ServerCode (string) minLength
            if (this.ServerCode != null && this.ServerCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerCode, length must be greater than 1.", new [] { "ServerCode" });
            }

            // ServerAddress (string) maxLength
            if (this.ServerAddress != null && this.ServerAddress.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerAddress, length must be less than 255.", new [] { "ServerAddress" });
            }

            yield break;
        }
    }

}
