/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChihabHajji.XRoad.Sdk.Client;
using ChihabHajji.XRoad.Sdk.Model;

namespace ChihabHajji.XRoad.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeysApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// delete csr from the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns></returns>
        void DeleteCsr(string id, string csrId);

        /// <summary>
        /// delete csr from the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCsrWithHttpInfo(string id, string csrId);
        /// <summary>
        /// delete key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <returns></returns>
        void DeleteKey(string id, bool? ignoreWarnings = default(bool?));

        /// <summary>
        /// delete key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteKeyWithHttpInfo(string id, bool? ignoreWarnings = default(bool?));
        /// <summary>
        /// download a CSR binary
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadCsr(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?));

        /// <summary>
        /// download a CSR binary
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadCsrWithHttpInfo(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?));
        /// <summary>
        /// generate csr for the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GenerateCsr(string id, CsrGenerate csrGenerate = default(CsrGenerate));

        /// <summary>
        /// generate csr for the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GenerateCsrWithHttpInfo(string id, CsrGenerate csrGenerate = default(CsrGenerate));
        /// <summary>
        /// get information for the selected key in selected token
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>Key</returns>
        Key GetKey(string id);

        /// <summary>
        /// get information for the selected key in selected token
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>ApiResponse of Key</returns>
        ApiResponse<Key> GetKeyWithHttpInfo(string id);
        /// <summary>
        /// get possible actions for one csr
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns>List&lt;PossibleAction&gt;</returns>
        List<PossibleAction> GetPossibleActionsForCsr(string id, string csrId);

        /// <summary>
        /// get possible actions for one csr
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns>ApiResponse of List&lt;PossibleAction&gt;</returns>
        ApiResponse<List<PossibleAction>> GetPossibleActionsForCsrWithHttpInfo(string id, string csrId);
        /// <summary>
        /// get possible actions for one key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>List&lt;PossibleAction&gt;</returns>
        List<PossibleAction> GetPossibleActionsForKey(string id);

        /// <summary>
        /// get possible actions for one key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>ApiResponse of List&lt;PossibleAction&gt;</returns>
        ApiResponse<List<PossibleAction>> GetPossibleActionsForKeyWithHttpInfo(string id);
        /// <summary>
        /// update key information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <returns>Key</returns>
        Key UpdateKey(string id, KeyName keyName = default(KeyName));

        /// <summary>
        /// update key information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <returns>ApiResponse of Key</returns>
        ApiResponse<Key> UpdateKeyWithHttpInfo(string id, KeyName keyName = default(KeyName));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeysApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// delete csr from the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCsrAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete csr from the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCsrWithHttpInfoAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteKeyAsync(string id, bool? ignoreWarnings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeyWithHttpInfoAsync(string id, bool? ignoreWarnings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// download a CSR binary
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadCsrAsync(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// download a CSR binary
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadCsrWithHttpInfoAsync(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// generate csr for the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GenerateCsrAsync(string id, CsrGenerate csrGenerate = default(CsrGenerate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// generate csr for the selected key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GenerateCsrWithHttpInfoAsync(string id, CsrGenerate csrGenerate = default(CsrGenerate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get information for the selected key in selected token
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Key</returns>
        System.Threading.Tasks.Task<Key> GetKeyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get information for the selected key in selected token
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Key)</returns>
        System.Threading.Tasks.Task<ApiResponse<Key>> GetKeyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get possible actions for one csr
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PossibleAction&gt;</returns>
        System.Threading.Tasks.Task<List<PossibleAction>> GetPossibleActionsForCsrAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get possible actions for one csr
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PossibleAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PossibleAction>>> GetPossibleActionsForCsrWithHttpInfoAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get possible actions for one key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PossibleAction&gt;</returns>
        System.Threading.Tasks.Task<List<PossibleAction>> GetPossibleActionsForKeyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get possible actions for one key
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PossibleAction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PossibleAction>>> GetPossibleActionsForKeyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update key information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Key</returns>
        System.Threading.Tasks.Task<Key> UpdateKeyAsync(string id, KeyName keyName = default(KeyName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update key information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Key)</returns>
        System.Threading.Tasks.Task<ApiResponse<Key>> UpdateKeyWithHttpInfoAsync(string id, KeyName keyName = default(KeyName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeysApi : IKeysApiSync, IKeysApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeysApi : IKeysApi
    {
        private ChihabHajji.XRoad.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeysApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeysApi(string basePath)
        {
            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                new ChihabHajji.XRoad.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeysApi(ChihabHajji.XRoad.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public KeysApi(ChihabHajji.XRoad.Sdk.Client.ISynchronousClient client, ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient asyncClient, ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// delete csr from the selected key &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns></returns>
        public void DeleteCsr(string id, string csrId)
        {
            DeleteCsrWithHttpInfo(id, csrId);
        }

        /// <summary>
        /// delete csr from the selected key &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteCsrWithHttpInfo(string id, string csrId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->DeleteCsr");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling KeysApi->DeleteCsr");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("csr_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/keys/{id}/csrs/{csr_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete csr from the selected key &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCsrAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCsrWithHttpInfoAsync(id, csrId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete csr from the selected key &lt;h3&gt;Administrator deletes csr from the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteCsrWithHttpInfoAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->DeleteCsr");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling KeysApi->DeleteCsr");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("csr_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/keys/{id}/csrs/{csr_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete key &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteKey(string id, bool? ignoreWarnings = default(bool?))
        {
            DeleteKeyWithHttpInfo(id, ignoreWarnings);
        }

        /// <summary>
        /// delete key &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteKeyWithHttpInfo(string id, bool? ignoreWarnings = default(bool?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->DeleteKey");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ignoreWarnings != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ignore_warnings", ignoreWarnings));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete key &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteKeyAsync(string id, bool? ignoreWarnings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteKeyWithHttpInfoAsync(id, ignoreWarnings, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete key &lt;h3&gt;Administrator deletes the key.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending an auth cert deletion management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt; &lt;p&gt; Note that with this endpoint it&#39;s possible to delete an authentication key with a registered authentication certificate. &lt;ul&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to delete an authentication key with a registered authentication certificate and with &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true succeeds. The authentication certificate is first unregistered, and the key and certificate are deleted after that.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When trying to delete an authentication key with a registered authentication certificate, the warning response has a warning code &lt;code&gt;auth_key_with_registered_cert_warning&lt;/code&gt; and the metadata field contains the key id of the key&lt;/p&gt; &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteKeyWithHttpInfoAsync(string id, bool? ignoreWarnings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->DeleteKey");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (ignoreWarnings != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ignore_warnings", ignoreWarnings));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download a CSR binary &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadCsr(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadCsrWithHttpInfo(id, csrId, csrFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download a CSR binary &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> DownloadCsrWithHttpInfo(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->DownloadCsr");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling KeysApi->DownloadCsr");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("csr_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter
            if (csrFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "csr_format", csrFormat));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/keys/{id}/csrs/{csr_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download a CSR binary &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadCsrAsync(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadCsrWithHttpInfoAsync(id, csrId, csrFormat, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download a CSR binary &lt;h3&gt;Administrator downloads a csr that has been created earlier.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="csrFormat">format of the certificate signing request (PEM or DER) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream>> DownloadCsrWithHttpInfoAsync(string id, string csrId, CsrFormat? csrFormat = default(CsrFormat?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->DownloadCsr");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling KeysApi->DownloadCsr");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("csr_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter
            if (csrFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "csr_format", csrFormat));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/keys/{id}/csrs/{csr_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// generate csr for the selected key &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GenerateCsr(string id, CsrGenerate csrGenerate = default(CsrGenerate))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = GenerateCsrWithHttpInfo(id, csrGenerate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// generate csr for the selected key &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> GenerateCsrWithHttpInfo(string id, CsrGenerate csrGenerate = default(CsrGenerate))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GenerateCsr");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = csrGenerate;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<System.IO.Stream>("/keys/{id}/csrs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// generate csr for the selected key &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GenerateCsrAsync(string id, CsrGenerate csrGenerate = default(CsrGenerate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await GenerateCsrWithHttpInfoAsync(id, csrGenerate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// generate csr for the selected key &lt;h3&gt;Administrator generates csr for the key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrGenerate">request to generate csr (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream>> GenerateCsrWithHttpInfoAsync(string id, CsrGenerate csrGenerate = default(CsrGenerate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GenerateCsr");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = csrGenerate;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/keys/{id}/csrs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get information for the selected key in selected token &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>Key</returns>
        public Key GetKey(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key> localVarResponse = GetKeyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get information for the selected key in selected token &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>ApiResponse of Key</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key> GetKeyWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GetKey");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Key>("/keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get information for the selected key in selected token &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Key</returns>
        public async System.Threading.Tasks.Task<Key> GetKeyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key> localVarResponse = await GetKeyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get information for the selected key in selected token &lt;h3&gt;Administrator views key details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Key)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key>> GetKeyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GetKey");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Key>("/keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get possible actions for one csr &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns>List&lt;PossibleAction&gt;</returns>
        public List<PossibleAction> GetPossibleActionsForCsr(string id, string csrId)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>> localVarResponse = GetPossibleActionsForCsrWithHttpInfo(id, csrId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get possible actions for one csr &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <returns>ApiResponse of List&lt;PossibleAction&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>> GetPossibleActionsForCsrWithHttpInfo(string id, string csrId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GetPossibleActionsForCsr");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling KeysApi->GetPossibleActionsForCsr");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("csr_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PossibleAction>>("/keys/{id}/csrs/{csr_id}/possible-actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPossibleActionsForCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get possible actions for one csr &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PossibleAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<PossibleAction>> GetPossibleActionsForCsrAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>> localVarResponse = await GetPossibleActionsForCsrWithHttpInfoAsync(id, csrId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get possible actions for one csr &lt;h3&gt;UI needs to know which actions can be done on one csr.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="csrId">id of the csr</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PossibleAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>>> GetPossibleActionsForCsrWithHttpInfoAsync(string id, string csrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GetPossibleActionsForCsr");
            }

            // verify the required parameter 'csrId' is set
            if (csrId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'csrId' when calling KeysApi->GetPossibleActionsForCsr");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("csr_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(csrId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PossibleAction>>("/keys/{id}/csrs/{csr_id}/possible-actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPossibleActionsForCsr", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get possible actions for one key &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>List&lt;PossibleAction&gt;</returns>
        public List<PossibleAction> GetPossibleActionsForKey(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>> localVarResponse = GetPossibleActionsForKeyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get possible actions for one key &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <returns>ApiResponse of List&lt;PossibleAction&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>> GetPossibleActionsForKeyWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GetPossibleActionsForKey");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PossibleAction>>("/keys/{id}/possible-actions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPossibleActionsForKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get possible actions for one key &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PossibleAction&gt;</returns>
        public async System.Threading.Tasks.Task<List<PossibleAction>> GetPossibleActionsForKeyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>> localVarResponse = await GetPossibleActionsForKeyWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get possible actions for one key &lt;h3&gt;UI needs to know which actions can be done on one key.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PossibleAction&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<PossibleAction>>> GetPossibleActionsForKeyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->GetPossibleActionsForKey");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PossibleAction>>("/keys/{id}/possible-actions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPossibleActionsForKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update key information &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <returns>Key</returns>
        public Key UpdateKey(string id, KeyName keyName = default(KeyName))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key> localVarResponse = UpdateKeyWithHttpInfo(id, keyName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update key information &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <returns>ApiResponse of Key</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key> UpdateKeyWithHttpInfo(string id, KeyName keyName = default(KeyName))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->UpdateKey");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = keyName;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Key>("/keys/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update key information &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Key</returns>
        public async System.Threading.Tasks.Task<Key> UpdateKeyAsync(string id, KeyName keyName = default(KeyName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key> localVarResponse = await UpdateKeyWithHttpInfoAsync(id, keyName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update key information &lt;h3&gt;Administrator updates the key information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the key</param>
        /// <param name="keyName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Key)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Key>> UpdateKeyWithHttpInfoAsync(string id, KeyName keyName = default(KeyName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling KeysApi->UpdateKey");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = keyName;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Key>("/keys/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
