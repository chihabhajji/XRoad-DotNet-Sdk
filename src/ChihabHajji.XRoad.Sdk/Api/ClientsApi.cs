/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChihabHajji.XRoad.Sdk.Client;
using ChihabHajji.XRoad.Sdk.Model;

namespace ChihabHajji.XRoad.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new client for the security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <returns>ModelClient</returns>
        ModelClient AddClient(ClientAdd clientAdd = default(ClientAdd));

        /// <summary>
        /// Add new client for the security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> AddClientWithHttpInfo(ClientAdd clientAdd = default(ClientAdd));
        /// <summary>
        /// add new local group for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <returns>LocalGroup</returns>
        LocalGroup AddClientLocalGroup(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd));

        /// <summary>
        /// add new local group for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <returns>ApiResponse of LocalGroup</returns>
        ApiResponse<LocalGroup> AddClientLocalGroupWithHttpInfo(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd));
        /// <summary>
        /// add new service description for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <returns>ServiceDescription</returns>
        ServiceDescription AddClientServiceDescription(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd));

        /// <summary>
        /// add new service description for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <returns>ApiResponse of ServiceDescription</returns>
        ApiResponse<ServiceDescription> AddClientServiceDescriptionWithHttpInfo(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd));
        /// <summary>
        /// add new certificate for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>CertificateDetails</returns>
        CertificateDetails AddClientTlsCertificate(string id, System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// add new certificate for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>ApiResponse of CertificateDetails</returns>
        ApiResponse<CertificateDetails> AddClientTlsCertificateWithHttpInfo(string id, System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <returns>List&lt;AccessRight&gt;</returns>
        List<AccessRight> AddServiceClientAccessRights(string id, string scId, AccessRights accessRights = default(AccessRights));

        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AccessRight&gt;</returns>
        ApiResponse<List<AccessRight>> AddServiceClientAccessRightsWithHttpInfo(string id, string scId, AccessRights accessRights = default(AccessRights));
        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <returns></returns>
        void ChangeOwner(string id);

        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeOwnerWithHttpInfo(string id);
        /// <summary>
        /// delete security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        void DeleteClient(string id);

        /// <summary>
        /// delete security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientWithHttpInfo(string id);
        /// <summary>
        /// delete certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns></returns>
        void DeleteClientTlsCertificate(string id, string hash);

        /// <summary>
        /// delete certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientTlsCertificateWithHttpInfo(string id, string hash);
        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        void DeleteOrphans(string id);

        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrphansWithHttpInfo(string id);
        /// <summary>
        /// remove access rights
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <returns></returns>
        void DeleteServiceClientAccessRights(string id, string scId, AccessRights accessRights = default(AccessRights));

        /// <summary>
        /// remove access rights
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteServiceClientAccessRightsWithHttpInfo(string id, string scId, AccessRights accessRights = default(AccessRights));
        /// <summary>
        /// find security server clients
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <returns>List&lt;ModelClient&gt;</returns>
        List<ModelClient> FindClients(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?));

        /// <summary>
        /// find security server clients
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;ModelClient&gt;</returns>
        ApiResponse<List<ModelClient>> FindClientsWithHttpInfo(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?));
        /// <summary>
        /// find ServiceClient candidates for a specific client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <returns>List&lt;ServiceClient&gt;</returns>
        List<ServiceClient> FindServiceClientCandidates(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string));

        /// <summary>
        /// find ServiceClient candidates for a specific client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
        ApiResponse<List<ServiceClient>> FindServiceClientCandidatesWithHttpInfo(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string));
        /// <summary>
        /// get security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ModelClient</returns>
        ModelClient GetClient(string id);

        /// <summary>
        /// get security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> GetClientWithHttpInfo(string id);
        /// <summary>
        /// get local groups for the selected client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;LocalGroup&gt;</returns>
        List<LocalGroup> GetClientLocalGroups(string id);

        /// <summary>
        /// get local groups for the selected client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;LocalGroup&gt;</returns>
        ApiResponse<List<LocalGroup>> GetClientLocalGroupsWithHttpInfo(string id);
        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>OrphanInformation</returns>
        OrphanInformation GetClientOrphans(string id);

        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of OrphanInformation</returns>
        ApiResponse<OrphanInformation> GetClientOrphansWithHttpInfo(string id);
        /// <summary>
        /// get service clients for the selected client&#39;s services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;ServiceClient&gt;</returns>
        List<ServiceClient> GetClientServiceClients(string id);

        /// <summary>
        /// get service clients for the selected client&#39;s services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
        ApiResponse<List<ServiceClient>> GetClientServiceClientsWithHttpInfo(string id);
        /// <summary>
        /// get security server client service descriptions
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;ServiceDescription&gt;</returns>
        List<ServiceDescription> GetClientServiceDescriptions(string id);

        /// <summary>
        /// get security server client service descriptions
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;ServiceDescription&gt;</returns>
        ApiResponse<List<ServiceDescription>> GetClientServiceDescriptionsWithHttpInfo(string id);
        /// <summary>
        /// get security server client certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;TokenCertificate&gt;</returns>
        List<TokenCertificate> GetClientSignCertificates(string id);

        /// <summary>
        /// get security server client certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;TokenCertificate&gt;</returns>
        ApiResponse<List<TokenCertificate>> GetClientSignCertificatesWithHttpInfo(string id);
        /// <summary>
        /// get TLS certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns>CertificateDetails</returns>
        CertificateDetails GetClientTlsCertificate(string id, string hash);

        /// <summary>
        /// get TLS certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns>ApiResponse of CertificateDetails</returns>
        ApiResponse<CertificateDetails> GetClientTlsCertificateWithHttpInfo(string id, string hash);
        /// <summary>
        /// get security server client TLS certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;CertificateDetails&gt;</returns>
        List<CertificateDetails> GetClientTlsCertificates(string id);

        /// <summary>
        /// get security server client TLS certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;CertificateDetails&gt;</returns>
        ApiResponse<List<CertificateDetails>> GetClientTlsCertificatesWithHttpInfo(string id);
        /// <summary>
        /// get single service client by client id and service client id
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>ServiceClient</returns>
        ServiceClient GetServiceClient(string id, string scId);

        /// <summary>
        /// get single service client by client id and service client id
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>ApiResponse of ServiceClient</returns>
        ApiResponse<ServiceClient> GetServiceClientWithHttpInfo(string id, string scId);
        /// <summary>
        /// get access rights for the selected service client.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>List&lt;AccessRight&gt;</returns>
        List<AccessRight> GetServiceClientAccessRights(string id, string scId);

        /// <summary>
        /// get access rights for the selected service client.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>ApiResponse of List&lt;AccessRight&gt;</returns>
        ApiResponse<List<AccessRight>> GetServiceClientAccessRightsWithHttpInfo(string id, string scId);
        /// <summary>
        /// register security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        void RegisterClient(string id);

        /// <summary>
        /// register security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterClientWithHttpInfo(string id);
        /// <summary>
        /// unregister security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        void UnregisterClient(string id);

        /// <summary>
        /// unregister security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnregisterClientWithHttpInfo(string id);
        /// <summary>
        /// update security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <returns>ModelClient</returns>
        ModelClient UpdateClient(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper));

        /// <summary>
        /// update security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> UpdateClientWithHttpInfo(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add new client for the security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> AddClientAsync(ClientAdd clientAdd = default(ClientAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new client for the security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> AddClientWithHttpInfoAsync(ClientAdd clientAdd = default(ClientAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add new local group for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocalGroup</returns>
        System.Threading.Tasks.Task<LocalGroup> AddClientLocalGroupAsync(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add new local group for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocalGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocalGroup>> AddClientLocalGroupWithHttpInfoAsync(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add new service description for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDescription</returns>
        System.Threading.Tasks.Task<ServiceDescription> AddClientServiceDescriptionAsync(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add new service description for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceDescription>> AddClientServiceDescriptionWithHttpInfoAsync(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add new certificate for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        System.Threading.Tasks.Task<CertificateDetails> AddClientTlsCertificateAsync(string id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add new certificate for the security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateDetails>> AddClientTlsCertificateWithHttpInfoAsync(string id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessRight&gt;</returns>
        System.Threading.Tasks.Task<List<AccessRight>> AddServiceClientAccessRightsAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessRight&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccessRight>>> AddServiceClientAccessRightsWithHttpInfoAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeOwnerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeOwnerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientTlsCertificateAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientTlsCertificateWithHttpInfoAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrphansAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrphansWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// remove access rights
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteServiceClientAccessRightsAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// remove access rights
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteServiceClientAccessRightsWithHttpInfoAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// find security server clients
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ModelClient&gt;</returns>
        System.Threading.Tasks.Task<List<ModelClient>> FindClientsAsync(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// find security server clients
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelClient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelClient>>> FindClientsWithHttpInfoAsync(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// find ServiceClient candidates for a specific client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceClient&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceClient>> FindServiceClientCandidatesAsync(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// find ServiceClient candidates for a specific client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceClient>>> FindServiceClientCandidatesWithHttpInfoAsync(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> GetClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> GetClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get local groups for the selected client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LocalGroup&gt;</returns>
        System.Threading.Tasks.Task<List<LocalGroup>> GetClientLocalGroupsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get local groups for the selected client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LocalGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalGroup>>> GetClientLocalGroupsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrphanInformation</returns>
        System.Threading.Tasks.Task<OrphanInformation> GetClientOrphansAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrphanInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrphanInformation>> GetClientOrphansWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get service clients for the selected client&#39;s services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceClient&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceClient>> GetClientServiceClientsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get service clients for the selected client&#39;s services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceClient>>> GetClientServiceClientsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get security server client service descriptions
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceDescription&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceDescription>> GetClientServiceDescriptionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get security server client service descriptions
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceDescription>>> GetClientServiceDescriptionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get security server client certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenCertificate&gt;</returns>
        System.Threading.Tasks.Task<List<TokenCertificate>> GetClientSignCertificatesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get security server client certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenCertificate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TokenCertificate>>> GetClientSignCertificatesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get TLS certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        System.Threading.Tasks.Task<CertificateDetails> GetClientTlsCertificateAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get TLS certificate
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateDetails>> GetClientTlsCertificateWithHttpInfoAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get security server client TLS certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CertificateDetails&gt;</returns>
        System.Threading.Tasks.Task<List<CertificateDetails>> GetClientTlsCertificatesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get security server client TLS certificates information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CertificateDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CertificateDetails>>> GetClientTlsCertificatesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get single service client by client id and service client id
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceClient</returns>
        System.Threading.Tasks.Task<ServiceClient> GetServiceClientAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get single service client by client id and service client id
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceClient>> GetServiceClientWithHttpInfoAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get access rights for the selected service client.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessRight&gt;</returns>
        System.Threading.Tasks.Task<List<AccessRight>> GetServiceClientAccessRightsAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get access rights for the selected service client.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessRight&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AccessRight>>> GetServiceClientAccessRightsWithHttpInfoAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// register security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// register security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// unregister security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnregisterClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// unregister security server client
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnregisterClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// update security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> UpdateClientAsync(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// update security server client information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> UpdateClientWithHttpInfoAsync(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientsApi : IClientsApiSync, IClientsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientsApi : IClientsApi
    {
        private ChihabHajji.XRoad.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientsApi(string basePath)
        {
            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                new ChihabHajji.XRoad.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientsApi(ChihabHajji.XRoad.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientsApi(ChihabHajji.XRoad.Sdk.Client.ISynchronousClient client, ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient asyncClient, ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add new client for the security server. &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <returns>ModelClient</returns>
        public ModelClient AddClient(ClientAdd clientAdd = default(ClientAdd))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> localVarResponse = AddClientWithHttpInfo(clientAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new client for the security server. &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> AddClientWithHttpInfo(ClientAdd clientAdd = default(ClientAdd))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientAdd;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModelClient>("/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new client for the security server. &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> AddClientAsync(ClientAdd clientAdd = default(ClientAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> localVarResponse = await AddClientWithHttpInfoAsync(clientAdd, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new client for the security server. &lt;h3&gt;Adds new client to the system.&lt;/h3&gt; &lt;p&gt;The client id will be validated and if the validation fails a validation error is returned. Note that with this endpoint it is possible to add an unregistered member as a client. &lt;ul&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to add an unregistered member with &lt;code&gt;ClientAdd.ignore_warnings&lt;/code&gt; &#x3D; true succeeds.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;When trying to add an unregister client, the error response has an error code &lt;code&gt;unregistered_member&lt;/code&gt; and the metadata field contains the identifier of the unregistered client&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientAdd">client to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient>> AddClientWithHttpInfoAsync(ClientAdd clientAdd = default(ClientAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientAdd;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModelClient>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new local group for the security server client &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <returns>LocalGroup</returns>
        public LocalGroup AddClientLocalGroup(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<LocalGroup> localVarResponse = AddClientLocalGroupWithHttpInfo(id, localGroupAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new local group for the security server client &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <returns>ApiResponse of LocalGroup</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<LocalGroup> AddClientLocalGroupWithHttpInfo(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddClientLocalGroup");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = localGroupAdd;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LocalGroup>("/clients/{id}/local-groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClientLocalGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new local group for the security server client &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocalGroup</returns>
        public async System.Threading.Tasks.Task<LocalGroup> AddClientLocalGroupAsync(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<LocalGroup> localVarResponse = await AddClientLocalGroupWithHttpInfoAsync(id, localGroupAdd, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new local group for the security server client &lt;h3&gt;Administrator adds a new local group for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="localGroupAdd">group to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocalGroup)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<LocalGroup>> AddClientLocalGroupWithHttpInfoAsync(string id, LocalGroupAdd localGroupAdd = default(LocalGroupAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddClientLocalGroup");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = localGroupAdd;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LocalGroup>("/clients/{id}/local-groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClientLocalGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new service description for the security server client &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <returns>ServiceDescription</returns>
        public ServiceDescription AddClientServiceDescription(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceDescription> localVarResponse = AddClientServiceDescriptionWithHttpInfo(id, serviceDescriptionAdd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new service description for the security server client &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <returns>ApiResponse of ServiceDescription</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceDescription> AddClientServiceDescriptionWithHttpInfo(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddClientServiceDescription");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = serviceDescriptionAdd;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceDescription>("/clients/{id}/service-descriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClientServiceDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new service description for the security server client &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceDescription</returns>
        public async System.Threading.Tasks.Task<ServiceDescription> AddClientServiceDescriptionAsync(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceDescription> localVarResponse = await AddClientServiceDescriptionWithHttpInfoAsync(id, serviceDescriptionAdd, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new service description for the security server client &lt;h3&gt;Administrator adds a new service description for the client.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if adding the service description fails due to invalid URLs, already existing service description or already existing services. If adding the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If adding the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If adding the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionAdd.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if WSDL or OpenAPI3 validation fails and validation warnings are returned. The warnings will have the warning code &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt; depending on which type the service description is. The metadata of the warning contains the output of the validator itself. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="serviceDescriptionAdd"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceDescription)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceDescription>> AddClientServiceDescriptionWithHttpInfoAsync(string id, ServiceDescriptionAdd serviceDescriptionAdd = default(ServiceDescriptionAdd), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddClientServiceDescription");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = serviceDescriptionAdd;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceDescription>("/clients/{id}/service-descriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClientServiceDescription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new certificate for the security server client &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>CertificateDetails</returns>
        public CertificateDetails AddClientTlsCertificate(string id, System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = AddClientTlsCertificateWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new certificate for the security server client &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>ApiResponse of CertificateDetails</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> AddClientTlsCertificateWithHttpInfo(string id, System.IO.Stream body = default(System.IO.Stream))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddClientTlsCertificate");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CertificateDetails>("/clients/{id}/tls-certificates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClientTlsCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new certificate for the security server client &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        public async System.Threading.Tasks.Task<CertificateDetails> AddClientTlsCertificateAsync(string id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = await AddClientTlsCertificateWithHttpInfoAsync(id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new certificate for the security server client &lt;h3&gt;Administrator adds a new certificate for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails>> AddClientTlsCertificateWithHttpInfoAsync(string id, System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddClientTlsCertificate");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CertificateDetails>("/clients/{id}/tls-certificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddClientTlsCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created. &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <returns>List&lt;AccessRight&gt;</returns>
        public List<AccessRight> AddServiceClientAccessRights(string id, string scId, AccessRights accessRights = default(AccessRights))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>> localVarResponse = AddServiceClientAccessRightsWithHttpInfo(id, scId, accessRights);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created. &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <returns>ApiResponse of List&lt;AccessRight&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>> AddServiceClientAccessRightsWithHttpInfo(string id, string scId, AccessRights accessRights = default(AccessRights))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddServiceClientAccessRights");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->AddServiceClientAccessRights");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter
            localVarRequestOptions.Data = accessRights;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<AccessRight>>("/clients/{id}/service-clients/{sc_id}/access-rights", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddServiceClientAccessRights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created. &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessRight&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccessRight>> AddServiceClientAccessRightsAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>> localVarResponse = await AddServiceClientAccessRightsWithHttpInfoAsync(id, scId, accessRights, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new access rights for selected service client. If service client did not exist yet, one is created. &lt;h3&gt;Adds access rights to the service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessRight&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>>> AddServiceClientAccessRightsWithHttpInfoAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->AddServiceClientAccessRights");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->AddServiceClientAccessRights");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter
            localVarRequestOptions.Data = accessRights;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<AccessRight>>("/clients/{id}/service-clients/{sc_id}/access-rights", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddServiceClientAccessRights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <returns></returns>
        public void ChangeOwner(string id)
        {
            ChangeOwnerWithHttpInfo(id);
        }

        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> ChangeOwnerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->ChangeOwner");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/clients/{id}/make-owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeOwnerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ChangeOwnerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// make client Security Server&#39;s owner. Client must be a member and already registered on the Security Server &lt;h3&gt;Administrator changes Security Server&#39;s owner.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client to be set as owner</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> ChangeOwnerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->ChangeOwner");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/clients/{id}/make-owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeOwner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete security server client &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        public void DeleteClient(string id)
        {
            DeleteClientWithHttpInfo(id);
        }

        /// <summary>
        /// delete security server client &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteClient");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete security server client &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete security server client &lt;h3&gt;Administrator deletes the client of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteClient");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete certificate &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns></returns>
        public void DeleteClientTlsCertificate(string id, string hash)
        {
            DeleteClientTlsCertificateWithHttpInfo(id, hash);
        }

        /// <summary>
        /// delete certificate &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteClientTlsCertificateWithHttpInfo(string id, string hash)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteClientTlsCertificate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'hash' when calling ClientsApi->DeleteClientTlsCertificate");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("hash", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(hash)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{id}/tls-certificates/{hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClientTlsCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete certificate &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientTlsCertificateAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteClientTlsCertificateWithHttpInfoAsync(id, hash, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete certificate &lt;h3&gt;Administrator deletes the certificate from selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteClientTlsCertificateWithHttpInfoAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteClientTlsCertificate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'hash' when calling ClientsApi->DeleteClientTlsCertificate");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("hash", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(hash)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{id}/tls-certificates/{hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClientTlsCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        public void DeleteOrphans(string id)
        {
            DeleteOrphansWithHttpInfo(id);
        }

        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteOrphansWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteOrphans");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{id}/orphans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrphans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrphansAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOrphansWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator deletes the orphaned sign keys, certificates and csrs left behind a delete client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteOrphansWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteOrphans");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{id}/orphans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrphans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove access rights &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <returns></returns>
        public void DeleteServiceClientAccessRights(string id, string scId, AccessRights accessRights = default(AccessRights))
        {
            DeleteServiceClientAccessRightsWithHttpInfo(id, scId, accessRights);
        }

        /// <summary>
        /// remove access rights &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteServiceClientAccessRightsWithHttpInfo(string id, string scId, AccessRights accessRights = default(AccessRights))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteServiceClientAccessRights");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->DeleteServiceClientAccessRights");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter
            localVarRequestOptions.Data = accessRights;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/clients/{id}/service-clients/{sc_id}/access-rights/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteServiceClientAccessRights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// remove access rights &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteServiceClientAccessRightsAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteServiceClientAccessRightsWithHttpInfoAsync(id, scId, accessRights, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// remove access rights &lt;h3&gt;Administrator removes access rights from selected service client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="accessRights">list of access rights to be deleted (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteServiceClientAccessRightsWithHttpInfoAsync(string id, string scId, AccessRights accessRights = default(AccessRights), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->DeleteServiceClientAccessRights");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->DeleteServiceClientAccessRights");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter
            localVarRequestOptions.Data = accessRights;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/clients/{id}/service-clients/{sc_id}/access-rights/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteServiceClientAccessRights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// find security server clients &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <returns>List&lt;ModelClient&gt;</returns>
        public List<ModelClient> FindClients(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ModelClient>> localVarResponse = FindClientsWithHttpInfo(name, instance, memberClass, memberCode, subsystemCode, showMembers, internalSearch, localValidSignCert, excludeLocal);
            return localVarResponse.Data;
        }

        /// <summary>
        /// find security server clients &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;ModelClient&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ModelClient>> FindClientsWithHttpInfo(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (instance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "instance", instance));
            }
            if (memberClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_class", memberClass));
            }
            if (memberCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_code", memberCode));
            }
            if (subsystemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subsystem_code", subsystemCode));
            }
            if (showMembers != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "show_members", showMembers));
            }
            if (internalSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "internal_search", internalSearch));
            }
            if (localValidSignCert != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local_valid_sign_cert", localValidSignCert));
            }
            if (excludeLocal != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "exclude_local", excludeLocal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ModelClient>>("/clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindClients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// find security server clients &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ModelClient&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelClient>> FindClientsAsync(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ModelClient>> localVarResponse = await FindClientsWithHttpInfoAsync(name, instance, memberClass, memberCode, subsystemCode, showMembers, internalSearch, localValidSignCert, excludeLocal, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// find security server clients &lt;h3&gt;Administrator views the clients of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">pass an optional search string (name) for looking up clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up clients (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up clients (optional)</param>
        /// <param name="memberCode">pass an optional search string (member_code) for looking up clients (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up clients (optional)</param>
        /// <param name="showMembers">to include members for search results (optional, default to true)</param>
        /// <param name="internalSearch">to search only clients inside security server (optional, default to true)</param>
        /// <param name="localValidSignCert">To search only clients that have (or don&#39;t have) a valid (registered, OCSP response GOOD) sign cert stored on this security server. Can be used to search both local and global clients, and can be combined with &lt;code&gt;internal_search&lt;/code&gt; and &lt;code&gt;exclude_local&lt;/code&gt; parameters. True &#x3D; limit to clients that have a valid local sign cert, false &#x3D; limit to clients that don&#39;t have a valid local sign cert. (optional)</param>
        /// <param name="excludeLocal">to search only clients that are not added to this security server (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelClient&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ModelClient>>> FindClientsWithHttpInfoAsync(string name = default(string), string instance = default(string), string memberClass = default(string), string memberCode = default(string), string subsystemCode = default(string), bool? showMembers = default(bool?), bool? internalSearch = default(bool?), bool? localValidSignCert = default(bool?), bool? excludeLocal = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (instance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "instance", instance));
            }
            if (memberClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_class", memberClass));
            }
            if (memberCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_code", memberCode));
            }
            if (subsystemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subsystem_code", subsystemCode));
            }
            if (showMembers != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "show_members", showMembers));
            }
            if (internalSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "internal_search", internalSearch));
            }
            if (localValidSignCert != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "local_valid_sign_cert", localValidSignCert));
            }
            if (excludeLocal != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "exclude_local", excludeLocal));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ModelClient>>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindClients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// find ServiceClient candidates for a specific client &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <returns>List&lt;ServiceClient&gt;</returns>
        public List<ServiceClient> FindServiceClientCandidates(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>> localVarResponse = FindServiceClientCandidatesWithHttpInfo(id, memberNameGroupDescription, serviceClientType, instance, memberClass, memberGroupCode, subsystemCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// find ServiceClient candidates for a specific client &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>> FindServiceClientCandidatesWithHttpInfo(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->FindServiceClientCandidates");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (memberNameGroupDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_name_group_description", memberNameGroupDescription));
            }
            if (serviceClientType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "service_client_type", serviceClientType));
            }
            if (instance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "instance", instance));
            }
            if (memberClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_class", memberClass));
            }
            if (memberGroupCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_group_code", memberGroupCode));
            }
            if (subsystemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subsystem_code", subsystemCode));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServiceClient>>("/clients/{id}/service-client-candidates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindServiceClientCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// find ServiceClient candidates for a specific client &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceClient&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceClient>> FindServiceClientCandidatesAsync(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>> localVarResponse = await FindServiceClientCandidatesWithHttpInfoAsync(id, memberNameGroupDescription, serviceClientType, instance, memberClass, memberGroupCode, subsystemCode, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// find ServiceClient candidates for a specific client &lt;h3&gt;Administrator views the clients, globalgroups and localgroups, that could be added as ServiceClients for given Client&#39;s services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="memberNameGroupDescription">pass an optional search string (name) for looking up subjects - name of a member or description of a group (optional)</param>
        /// <param name="serviceClientType">pass an optional search string (service_client_type) for looking up service clients (optional)</param>
        /// <param name="instance">pass an optional search string (instance) for looking up service clients - full instance id should be used (optional)</param>
        /// <param name="memberClass">pass an optional search string (member_class) for looking up service clients (optional)</param>
        /// <param name="memberGroupCode">pass an optional search string (member_group_code) for looking up service clients - member_code of a member or group_code of a group (optional)</param>
        /// <param name="subsystemCode">pass an optional search string (subsystem_code) for looking up service clients (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>>> FindServiceClientCandidatesWithHttpInfoAsync(string id, string memberNameGroupDescription = default(string), ServiceClientType? serviceClientType = default(ServiceClientType?), string instance = default(string), string memberClass = default(string), string memberGroupCode = default(string), string subsystemCode = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->FindServiceClientCandidates");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (memberNameGroupDescription != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_name_group_description", memberNameGroupDescription));
            }
            if (serviceClientType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "service_client_type", serviceClientType));
            }
            if (instance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "instance", instance));
            }
            if (memberClass != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_class", memberClass));
            }
            if (memberGroupCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_group_code", memberGroupCode));
            }
            if (subsystemCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "subsystem_code", subsystemCode));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServiceClient>>("/clients/{id}/service-client-candidates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindServiceClientCandidates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client information &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ModelClient</returns>
        public ModelClient GetClient(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> localVarResponse = GetClientWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client information &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> GetClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClient");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ModelClient>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client information &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> GetClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> localVarResponse = await GetClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client information &lt;h3&gt;Administrator views the client details of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient>> GetClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClient");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ModelClient>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get local groups for the selected client &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;LocalGroup&gt;</returns>
        public List<LocalGroup> GetClientLocalGroups(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<LocalGroup>> localVarResponse = GetClientLocalGroupsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get local groups for the selected client &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;LocalGroup&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<LocalGroup>> GetClientLocalGroupsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientLocalGroups");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LocalGroup>>("/clients/{id}/local-groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientLocalGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get local groups for the selected client &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LocalGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalGroup>> GetClientLocalGroupsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<LocalGroup>> localVarResponse = await GetClientLocalGroupsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get local groups for the selected client &lt;h3&gt;Administrator views the local groups for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LocalGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<LocalGroup>>> GetClientLocalGroupsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientLocalGroups");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LocalGroup>>("/clients/{id}/local-groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientLocalGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>OrphanInformation</returns>
        public OrphanInformation GetClientOrphans(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<OrphanInformation> localVarResponse = GetClientOrphansWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of OrphanInformation</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<OrphanInformation> GetClientOrphansWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientOrphans");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrphanInformation>("/clients/{id}/orphans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientOrphans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrphanInformation</returns>
        public async System.Threading.Tasks.Task<OrphanInformation> GetClientOrphansAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<OrphanInformation> localVarResponse = await GetClientOrphansWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get information about orphaned sign keys, certificates and csrs left behind a delete client &lt;h3&gt;Administrator has deleted a client and wants to know if some orphaned sign keys, certificates or csrs exist.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrphanInformation)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<OrphanInformation>> GetClientOrphansWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientOrphans");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrphanInformation>("/clients/{id}/orphans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientOrphans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get service clients for the selected client&#39;s services &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;ServiceClient&gt;</returns>
        public List<ServiceClient> GetClientServiceClients(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>> localVarResponse = GetClientServiceClientsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get service clients for the selected client&#39;s services &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>> GetClientServiceClientsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientServiceClients");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServiceClient>>("/clients/{id}/service-clients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientServiceClients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get service clients for the selected client&#39;s services &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceClient&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceClient>> GetClientServiceClientsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>> localVarResponse = await GetClientServiceClientsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get service clients for the selected client&#39;s services &lt;h3&gt;Administrator views the service clients for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceClient>>> GetClientServiceClientsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientServiceClients");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServiceClient>>("/clients/{id}/service-clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientServiceClients", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client service descriptions &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;ServiceDescription&gt;</returns>
        public List<ServiceDescription> GetClientServiceDescriptions(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceDescription>> localVarResponse = GetClientServiceDescriptionsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client service descriptions &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;ServiceDescription&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceDescription>> GetClientServiceDescriptionsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientServiceDescriptions");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServiceDescription>>("/clients/{id}/service-descriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientServiceDescriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client service descriptions &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceDescription>> GetClientServiceDescriptionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceDescription>> localVarResponse = await GetClientServiceDescriptionsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client service descriptions &lt;h3&gt;Administrator views the service descriptions for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<ServiceDescription>>> GetClientServiceDescriptionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientServiceDescriptions");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServiceDescription>>("/clients/{id}/service-descriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientServiceDescriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client certificates information &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;TokenCertificate&gt;</returns>
        public List<TokenCertificate> GetClientSignCertificates(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TokenCertificate>> localVarResponse = GetClientSignCertificatesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client certificates information &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;TokenCertificate&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TokenCertificate>> GetClientSignCertificatesWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientSignCertificates");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TokenCertificate>>("/clients/{id}/sign-certificates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSignCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client certificates information &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenCertificate&gt;</returns>
        public async System.Threading.Tasks.Task<List<TokenCertificate>> GetClientSignCertificatesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TokenCertificate>> localVarResponse = await GetClientSignCertificatesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client certificates information &lt;h3&gt;Administrator views the certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenCertificate&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TokenCertificate>>> GetClientSignCertificatesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientSignCertificates");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TokenCertificate>>("/clients/{id}/sign-certificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSignCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get TLS certificate &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns>CertificateDetails</returns>
        public CertificateDetails GetClientTlsCertificate(string id, string hash)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = GetClientTlsCertificateWithHttpInfo(id, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get TLS certificate &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <returns>ApiResponse of CertificateDetails</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> GetClientTlsCertificateWithHttpInfo(string id, string hash)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientTlsCertificate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'hash' when calling ClientsApi->GetClientTlsCertificate");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("hash", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(hash)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CertificateDetails>("/clients/{id}/tls-certificates/{hash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientTlsCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get TLS certificate &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        public async System.Threading.Tasks.Task<CertificateDetails> GetClientTlsCertificateAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = await GetClientTlsCertificateWithHttpInfoAsync(id, hash, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get TLS certificate &lt;h3&gt;Administrator gets the TLS certificate for the selected client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="hash">SHA-1 hash of the certificate</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails>> GetClientTlsCertificateWithHttpInfoAsync(string id, string hash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientTlsCertificate");
            }

            // verify the required parameter 'hash' is set
            if (hash == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'hash' when calling ClientsApi->GetClientTlsCertificate");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("hash", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(hash)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CertificateDetails>("/clients/{id}/tls-certificates/{hash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientTlsCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client TLS certificates information &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>List&lt;CertificateDetails&gt;</returns>
        public List<CertificateDetails> GetClientTlsCertificates(string id)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateDetails>> localVarResponse = GetClientTlsCertificatesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client TLS certificates information &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of List&lt;CertificateDetails&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateDetails>> GetClientTlsCertificatesWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientTlsCertificates");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CertificateDetails>>("/clients/{id}/tls-certificates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientTlsCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server client TLS certificates information &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CertificateDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<CertificateDetails>> GetClientTlsCertificatesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateDetails>> localVarResponse = await GetClientTlsCertificatesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server client TLS certificates information &lt;h3&gt;Administrator views the TLS certificates for the client.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CertificateDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateDetails>>> GetClientTlsCertificatesWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetClientTlsCertificates");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CertificateDetails>>("/clients/{id}/tls-certificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientTlsCertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get single service client by client id and service client id &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>ServiceClient</returns>
        public ServiceClient GetServiceClient(string id, string scId)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceClient> localVarResponse = GetServiceClientWithHttpInfo(id, scId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get single service client by client id and service client id &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>ApiResponse of ServiceClient</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceClient> GetServiceClientWithHttpInfo(string id, string scId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetServiceClient");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->GetServiceClient");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceClient>("/clients/{id}/service-clients/{sc_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get single service client by client id and service client id &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceClient</returns>
        public async System.Threading.Tasks.Task<ServiceClient> GetServiceClientAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceClient> localVarResponse = await GetServiceClientWithHttpInfoAsync(id, scId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get single service client by client id and service client id &lt;h3&gt;Administrator views the information for a single service client.&lt;h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceClient)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<ServiceClient>> GetServiceClientWithHttpInfoAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetServiceClient");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->GetServiceClient");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceClient>("/clients/{id}/service-clients/{sc_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get access rights for the selected service client. &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>List&lt;AccessRight&gt;</returns>
        public List<AccessRight> GetServiceClientAccessRights(string id, string scId)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>> localVarResponse = GetServiceClientAccessRightsWithHttpInfo(id, scId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get access rights for the selected service client. &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <returns>ApiResponse of List&lt;AccessRight&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>> GetServiceClientAccessRightsWithHttpInfo(string id, string scId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetServiceClientAccessRights");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->GetServiceClientAccessRights");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AccessRight>>("/clients/{id}/service-clients/{sc_id}/access-rights", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceClientAccessRights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get access rights for the selected service client. &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AccessRight&gt;</returns>
        public async System.Threading.Tasks.Task<List<AccessRight>> GetServiceClientAccessRightsAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>> localVarResponse = await GetServiceClientAccessRightsWithHttpInfoAsync(id, scId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get access rights for the selected service client. &lt;h3&gt;Administrator views service client&#39;s access rights.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client who owns the services</param>
        /// <param name="scId">id of the service client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AccessRight&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<AccessRight>>> GetServiceClientAccessRightsWithHttpInfoAsync(string id, string scId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->GetServiceClientAccessRights");
            }

            // verify the required parameter 'scId' is set
            if (scId == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'scId' when calling ClientsApi->GetServiceClientAccessRights");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("sc_id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(scId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AccessRight>>("/clients/{id}/service-clients/{sc_id}/access-rights", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceClientAccessRights", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// register security server client &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        public void RegisterClient(string id)
        {
            RegisterClientWithHttpInfo(id);
        }

        /// <summary>
        /// register security server client &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> RegisterClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->RegisterClient");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/clients/{id}/register", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// register security server client &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RegisterClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// register security server client &lt;h3&gt;Administrator registers client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> RegisterClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->RegisterClient");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/clients/{id}/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// unregister security server client &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns></returns>
        public void UnregisterClient(string id)
        {
            UnregisterClientWithHttpInfo(id);
        }

        /// <summary>
        /// unregister security server client &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> UnregisterClientWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->UnregisterClient");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/clients/{id}/unregister", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// unregister security server client &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnregisterClientAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnregisterClientWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// unregister security server client &lt;h3&gt;Administrator unregisters client.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> UnregisterClientWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->UnregisterClient");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/clients/{id}/unregister", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update security server client information &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <returns>ModelClient</returns>
        public ModelClient UpdateClient(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> localVarResponse = UpdateClientWithHttpInfo(id, connectionTypeWrapper);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update security server client information &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> UpdateClientWithHttpInfo(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->UpdateClient");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = connectionTypeWrapper;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ModelClient>("/clients/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update security server client information &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> UpdateClientAsync(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient> localVarResponse = await UpdateClientWithHttpInfoAsync(id, connectionTypeWrapper, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// update security server client information &lt;h3&gt;Administrator updates the client information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the client</param>
        /// <param name="connectionTypeWrapper"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<ModelClient>> UpdateClientWithHttpInfoAsync(string id, ConnectionTypeWrapper connectionTypeWrapper = default(ConnectionTypeWrapper), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'id' when calling ClientsApi->UpdateClient");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = connectionTypeWrapper;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ModelClient>("/clients/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
