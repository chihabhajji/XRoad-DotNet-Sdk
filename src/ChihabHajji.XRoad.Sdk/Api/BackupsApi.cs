/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChihabHajji.XRoad.Sdk.Client;
using ChihabHajji.XRoad.Sdk.Model;

namespace ChihabHajji.XRoad.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Backup</returns>
        Backup AddBackup();

        /// <summary>
        /// add new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Backup</returns>
        ApiResponse<Backup> AddBackupWithHttpInfo();
        /// <summary>
        /// add new backup for the security server and return extra backup state
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BackupExt</returns>
        BackupExt AddBackupExt();

        /// <summary>
        /// add new backup for the security server and return extra backup state
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BackupExt</returns>
        ApiResponse<BackupExt> AddBackupExtWithHttpInfo();
        /// <summary>
        /// delete security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns></returns>
        void DeleteBackup(string filename);

        /// <summary>
        /// delete security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBackupWithHttpInfo(string filename);
        /// <summary>
        /// download security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadBackup(string filename);

        /// <summary>
        /// download security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadBackupWithHttpInfo(string filename);
        /// <summary>
        /// get security server backups
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Backup&gt;</returns>
        List<Backup> GetBackups();

        /// <summary>
        /// get security server backups
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        ApiResponse<List<Backup>> GetBackupsWithHttpInfo();
        /// <summary>
        /// restore security server configuration from backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>TokensLoggedOut</returns>
        TokensLoggedOut RestoreBackup(string filename);

        /// <summary>
        /// restore security server configuration from backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>ApiResponse of TokensLoggedOut</returns>
        ApiResponse<TokensLoggedOut> RestoreBackupWithHttpInfo(string filename);
        /// <summary>
        /// upload new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Backup</returns>
        Backup UploadBackup(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// upload new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Backup</returns>
        ApiResponse<Backup> UploadBackupWithHttpInfo(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// add new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        System.Threading.Tasks.Task<Backup> AddBackupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Backup>> AddBackupWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// add new backup for the security server and return extra backup state
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupExt</returns>
        System.Threading.Tasks.Task<BackupExt> AddBackupExtAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add new backup for the security server and return extra backup state
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupExt)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupExt>> AddBackupExtWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBackupAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBackupWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// download security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadBackupAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// download security server backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadBackupWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get security server backups
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        System.Threading.Tasks.Task<List<Backup>> GetBackupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get security server backups
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Backup>>> GetBackupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// restore security server configuration from backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokensLoggedOut</returns>
        System.Threading.Tasks.Task<TokensLoggedOut> RestoreBackupAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// restore security server configuration from backup
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokensLoggedOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokensLoggedOut>> RestoreBackupWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// upload new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        System.Threading.Tasks.Task<Backup> UploadBackupAsync(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// upload new backup for the security server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        System.Threading.Tasks.Task<ApiResponse<Backup>> UploadBackupWithHttpInfoAsync(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackupsApi : IBackupsApiSync, IBackupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BackupsApi : IBackupsApi
    {
        private ChihabHajji.XRoad.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackupsApi(string basePath)
        {
            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                new ChihabHajji.XRoad.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BackupsApi(ChihabHajji.XRoad.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BackupsApi(ChihabHajji.XRoad.Sdk.Client.ISynchronousClient client, ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient asyncClient, ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// add new backup for the security server &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Backup</returns>
        public Backup AddBackup()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup> localVarResponse = AddBackupWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new backup for the security server &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Backup</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup> AddBackupWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Backup>("/backups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new backup for the security server &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        public async System.Threading.Tasks.Task<Backup> AddBackupAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup> localVarResponse = await AddBackupWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new backup for the security server &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup>> AddBackupWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Backup>("/backups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new backup for the security server and return extra backup state &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BackupExt</returns>
        public BackupExt AddBackupExt()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<BackupExt> localVarResponse = AddBackupExtWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new backup for the security server and return extra backup state &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BackupExt</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<BackupExt> AddBackupExtWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BackupExt>("/backups/ext", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBackupExt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add new backup for the security server and return extra backup state &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupExt</returns>
        public async System.Threading.Tasks.Task<BackupExt> AddBackupExtAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<BackupExt> localVarResponse = await AddBackupExtWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add new backup for the security server and return extra backup state &lt;h3&gt;Adds security server backup to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup generation script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupExt)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<BackupExt>> AddBackupExtWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BackupExt>("/backups/ext", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBackupExt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete security server backup &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns></returns>
        public void DeleteBackup(string filename)
        {
            DeleteBackupWithHttpInfo(filename);
        }

        /// <summary>
        /// delete security server backup &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteBackupWithHttpInfo(string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'filename' when calling BackupsApi->DeleteBackup");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(filename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/backups/{filename}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete security server backup &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBackupAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteBackupWithHttpInfoAsync(filename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete security server backup &lt;h3&gt;Administrator deletes the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteBackupWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'filename' when calling BackupsApi->DeleteBackup");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(filename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/backups/{filename}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download security server backup &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadBackup(string filename)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadBackupWithHttpInfo(filename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download security server backup &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> DownloadBackupWithHttpInfo(string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'filename' when calling BackupsApi->DownloadBackup");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(filename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/backups/{filename}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download security server backup &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadBackupAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadBackupWithHttpInfoAsync(filename, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download security server backup &lt;h3&gt;Administrator downloads the backup of the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream>> DownloadBackupWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'filename' when calling BackupsApi->DownloadBackup");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(filename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/backups/{filename}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server backups &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Backup&gt;</returns>
        public List<Backup> GetBackups()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<Backup>> localVarResponse = GetBackupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server backups &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Backup&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<Backup>> GetBackupsWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Backup>>("/backups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get security server backups &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Backup&gt;</returns>
        public async System.Threading.Tasks.Task<List<Backup>> GetBackupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<Backup>> localVarResponse = await GetBackupsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get security server backups &lt;h3&gt;Administrator views the backups for the security server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Backup&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<Backup>>> GetBackupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Backup>>("/backups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBackups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// restore security server configuration from backup &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>TokensLoggedOut</returns>
        public TokensLoggedOut RestoreBackup(string filename)
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<TokensLoggedOut> localVarResponse = RestoreBackupWithHttpInfo(filename);
            return localVarResponse.Data;
        }

        /// <summary>
        /// restore security server configuration from backup &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <returns>ApiResponse of TokensLoggedOut</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<TokensLoggedOut> RestoreBackupWithHttpInfo(string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'filename' when calling BackupsApi->RestoreBackup");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(filename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<TokensLoggedOut>("/backups/{filename}/restore", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// restore security server configuration from backup &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokensLoggedOut</returns>
        public async System.Threading.Tasks.Task<TokensLoggedOut> RestoreBackupAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<TokensLoggedOut> localVarResponse = await RestoreBackupWithHttpInfoAsync(filename, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// restore security server configuration from backup &lt;h3&gt;Administrator restores the security server configuration from backup.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response. The metadata array contains the output of a failed backup restore script.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename">filename of the backup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokensLoggedOut)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<TokensLoggedOut>> RestoreBackupWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'filename' when calling BackupsApi->RestoreBackup");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filename", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(filename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TokensLoggedOut>("/backups/{filename}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// upload new backup for the security server &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>Backup</returns>
        public Backup UploadBackup(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup> localVarResponse = UploadBackupWithHttpInfo(ignoreWarnings, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// upload new backup for the security server &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Backup</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup> UploadBackupWithHttpInfo(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ignoreWarnings != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ignore_warnings", ignoreWarnings));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Backup>("/backups/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// upload new backup for the security server &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Backup</returns>
        public async System.Threading.Tasks.Task<Backup> UploadBackupAsync(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup> localVarResponse = await UploadBackupWithHttpInfoAsync(ignoreWarnings, file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// upload new backup for the security server &lt;h3&gt;Uploads new security server backup to the system.&lt;/h3&gt; &lt;p&gt;Note that it is possible to overwrite an existing backup file with the same name. &lt;ul&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; false causes the operation to fail with a warning in response&#39;s ErrorInfo object.&lt;/li&gt; &lt;li&gt;Attempt to upload a new backup file having the same name with an existing backup and with query parameter &lt;code&gt;ignore_warnings&lt;/code&gt; &#x3D; true will overwrite the existing backup.&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;The warning response has a warning code &lt;code&gt;warning_file_already_exists&lt;/code&gt; and the metadata field contains the name of the existing backup&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ignoreWarnings">If true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail. (optional, default to false)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Backup)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Backup>> UploadBackupWithHttpInfoAsync(bool? ignoreWarnings = default(bool?), System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ignoreWarnings != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ignore_warnings", ignoreWarnings));
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Backup>("/backups/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadBackup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
