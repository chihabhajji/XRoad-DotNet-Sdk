/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChihabHajji.XRoad.Sdk.Client;
using ChihabHajji.XRoad.Sdk.Model;

namespace ChihabHajji.XRoad.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInitializationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check the initialization status of the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InitializationStatus</returns>
        InitializationStatus GetInitializationStatus();

        /// <summary>
        /// Check the initialization status of the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InitializationStatus</returns>
        ApiResponse<InitializationStatus> GetInitializationStatusWithHttpInfo();
        /// <summary>
        /// Initialize a new security server with the provided initial configuration
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <returns></returns>
        void InitSecurityServer(InitialServerConf initialServerConf = default(InitialServerConf));

        /// <summary>
        /// Initialize a new security server with the provided initial configuration
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InitSecurityServerWithHttpInfo(InitialServerConf initialServerConf = default(InitialServerConf));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInitializationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check the initialization status of the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitializationStatus</returns>
        System.Threading.Tasks.Task<InitializationStatus> GetInitializationStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check the initialization status of the Security Server
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitializationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitializationStatus>> GetInitializationStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initialize a new security server with the provided initial configuration
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InitSecurityServerAsync(InitialServerConf initialServerConf = default(InitialServerConf), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initialize a new security server with the provided initial configuration
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InitSecurityServerWithHttpInfoAsync(InitialServerConf initialServerConf = default(InitialServerConf), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInitializationApi : IInitializationApiSync, IInitializationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InitializationApi : IInitializationApi
    {
        private ChihabHajji.XRoad.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InitializationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InitializationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InitializationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InitializationApi(string basePath)
        {
            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                new ChihabHajji.XRoad.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InitializationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InitializationApi(ChihabHajji.XRoad.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InitializationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InitializationApi(ChihabHajji.XRoad.Sdk.Client.ISynchronousClient client, ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient asyncClient, ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check the initialization status of the Security Server &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InitializationStatus</returns>
        public InitializationStatus GetInitializationStatus()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<InitializationStatus> localVarResponse = GetInitializationStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the initialization status of the Security Server &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InitializationStatus</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<InitializationStatus> GetInitializationStatusWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InitializationStatus>("/initialization/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInitializationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check the initialization status of the Security Server &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitializationStatus</returns>
        public async System.Threading.Tasks.Task<InitializationStatus> GetInitializationStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<InitializationStatus> localVarResponse = await GetInitializationStatusWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check the initialization status of the Security Server &lt;h3&gt;Administrator checks the initialization status of the Security Server.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitializationStatus)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<InitializationStatus>> GetInitializationStatusWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InitializationStatus>("/initialization/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInitializationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize a new security server with the provided initial configuration &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <returns></returns>
        public void InitSecurityServer(InitialServerConf initialServerConf = default(InitialServerConf))
        {
            InitSecurityServerWithHttpInfo(initialServerConf);
        }

        /// <summary>
        /// Initialize a new security server with the provided initial configuration &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> InitSecurityServerWithHttpInfo(InitialServerConf initialServerConf = default(InitialServerConf))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = initialServerConf;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/initialization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitSecurityServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize a new security server with the provided initial configuration &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InitSecurityServerAsync(InitialServerConf initialServerConf = default(InitialServerConf), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await InitSecurityServerWithHttpInfoAsync(initialServerConf, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Initialize a new security server with the provided initial configuration &lt;h3&gt;Administrator initializes a new Security Server with the provided initial configuration.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response. The metadata array can contain error messages about why the init did not succeed. If the pin code is too weak, the error code &lt;code&gt;weak_pin&lt;/code&gt; is used and the entries in the metadata array are always ordered in following way &lt;ul&gt; &lt;li&gt;metadata has a list of strings [\&quot;pin_min_length\&quot;, x, \&quot;pin_min_char_classes_count\&quot;, y] where&lt;/li&gt; &lt;li&gt;x &#x3D; the minimum length of the pin code&lt;/li&gt; &lt;li&gt;y &#x3D; the minimum amount of character classes (e.g. uppercase, number, special characters) to be used in the pin code&lt;/li&gt; &lt;/ul&gt; Other possible error code is &lt;code&gt;invalid_init_params&lt;/code&gt; which can have any one or more of the following strings in the metadata field &lt;ul&gt; &lt;li&gt;server_code_not_provided&lt;/li&gt; &lt;li&gt;member_class_not_provided&lt;/li&gt; &lt;li&gt;member_code_not_provided&lt;/li&gt; &lt;li&gt;pin_code_not_provided&lt;/li&gt; &lt;li&gt;server_code_exists&lt;/li&gt; &lt;li&gt;member_class_exists&lt;/li&gt; &lt;li&gt;member_code_exists&lt;/li&gt; &lt;li&gt;pin_code_exists&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;InitialServerConf.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;server code has already been set for this Security Server (warning code &lt;code&gt;init_servercode_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;server owner has already been set for this Security Server(warning code &lt;code&gt;init_server_owner_exists&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;software token has already been initialized in this Security Server(warning code &lt;code&gt;init_software_token_initialized&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided owner member is unregistered(warning code &lt;code&gt;init_unregistered_member&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;the provided server id is already in use by another Security Server(warning code &lt;code&gt;init_server_id_exists&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;strong&gt;See the &#39;400&#39; response examples&lt;/strong&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="initialServerConf">initial security server configuration (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> InitSecurityServerWithHttpInfoAsync(InitialServerConf initialServerConf = default(InitialServerConf), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = initialServerConf;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/initialization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitSecurityServer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
