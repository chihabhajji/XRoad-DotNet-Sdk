/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChihabHajji.XRoad.Sdk.Client;
using ChihabHajji.XRoad.Sdk.Model;

namespace ChihabHajji.XRoad.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificateAuthoritiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// view the approved certificate authorities
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <returns>List&lt;CertificateAuthority&gt;</returns>
        List<CertificateAuthority> GetApprovedCertificateAuthorities(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?));

        /// <summary>
        /// view the approved certificate authorities
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CertificateAuthority&gt;</returns>
        ApiResponse<List<CertificateAuthority>> GetApprovedCertificateAuthoritiesWithHttpInfo(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?));
        /// <summary>
        /// get description of subject DN fields for CSR
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <returns>List&lt;CsrSubjectFieldDescription&gt;</returns>
        List<CsrSubjectFieldDescription> GetSubjectFieldDescriptions(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?));

        /// <summary>
        /// get description of subject DN fields for CSR
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CsrSubjectFieldDescription&gt;</returns>
        ApiResponse<List<CsrSubjectFieldDescription>> GetSubjectFieldDescriptionsWithHttpInfo(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificateAuthoritiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// view the approved certificate authorities
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CertificateAuthority&gt;</returns>
        System.Threading.Tasks.Task<List<CertificateAuthority>> GetApprovedCertificateAuthoritiesAsync(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// view the approved certificate authorities
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CertificateAuthority&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CertificateAuthority>>> GetApprovedCertificateAuthoritiesWithHttpInfoAsync(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get description of subject DN fields for CSR
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CsrSubjectFieldDescription&gt;</returns>
        System.Threading.Tasks.Task<List<CsrSubjectFieldDescription>> GetSubjectFieldDescriptionsAsync(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get description of subject DN fields for CSR
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CsrSubjectFieldDescription&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CsrSubjectFieldDescription>>> GetSubjectFieldDescriptionsWithHttpInfoAsync(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICertificateAuthoritiesApi : ICertificateAuthoritiesApiSync, ICertificateAuthoritiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CertificateAuthoritiesApi : ICertificateAuthoritiesApi
    {
        private ChihabHajji.XRoad.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAuthoritiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificateAuthoritiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAuthoritiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CertificateAuthoritiesApi(string basePath)
        {
            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                new ChihabHajji.XRoad.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAuthoritiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CertificateAuthoritiesApi(ChihabHajji.XRoad.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateAuthoritiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CertificateAuthoritiesApi(ChihabHajji.XRoad.Sdk.Client.ISynchronousClient client, ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient asyncClient, ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// view the approved certificate authorities &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <returns>List&lt;CertificateAuthority&gt;</returns>
        public List<CertificateAuthority> GetApprovedCertificateAuthorities(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateAuthority>> localVarResponse = GetApprovedCertificateAuthoritiesWithHttpInfo(keyUsageType, includeIntermediateCas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the approved certificate authorities &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CertificateAuthority&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateAuthority>> GetApprovedCertificateAuthoritiesWithHttpInfo(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyUsageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key_usage_type", keyUsageType));
            }
            if (includeIntermediateCas != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_intermediate_cas", includeIntermediateCas));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CertificateAuthority>>("/certificate-authorities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovedCertificateAuthorities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the approved certificate authorities &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CertificateAuthority&gt;</returns>
        public async System.Threading.Tasks.Task<List<CertificateAuthority>> GetApprovedCertificateAuthoritiesAsync(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateAuthority>> localVarResponse = await GetApprovedCertificateAuthoritiesWithHttpInfoAsync(keyUsageType, includeIntermediateCas, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the approved certificate authorities &lt;h3&gt;Administrator views the approved certificate authorities.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUsageType">return only CAs suitable for this type of key usage (optional)</param>
        /// <param name="includeIntermediateCas">if true, include also intermediate CAs. Otherwise only top CAs are included. Default value is \&quot;false\&quot;. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CertificateAuthority&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CertificateAuthority>>> GetApprovedCertificateAuthoritiesWithHttpInfoAsync(KeyUsageType? keyUsageType = default(KeyUsageType?), bool? includeIntermediateCas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keyUsageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key_usage_type", keyUsageType));
            }
            if (includeIntermediateCas != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_intermediate_cas", includeIntermediateCas));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CertificateAuthority>>("/certificate-authorities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApprovedCertificateAuthorities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get description of subject DN fields for CSR &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <returns>List&lt;CsrSubjectFieldDescription&gt;</returns>
        public List<CsrSubjectFieldDescription> GetSubjectFieldDescriptions(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CsrSubjectFieldDescription>> localVarResponse = GetSubjectFieldDescriptionsWithHttpInfo(caName, keyUsageType, keyId, memberId, isNewMember);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get description of subject DN fields for CSR &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;CsrSubjectFieldDescription&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CsrSubjectFieldDescription>> GetSubjectFieldDescriptionsWithHttpInfo(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?))
        {
            // verify the required parameter 'caName' is set
            if (caName == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'caName' when calling CertificateAuthoritiesApi->GetSubjectFieldDescriptions");
            }

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ca_name", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(caName)); // path parameter
            if (keyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key_id", keyId));
            }
            localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key_usage_type", keyUsageType));
            if (memberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_id", memberId));
            }
            if (isNewMember != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "is_new_member", isNewMember));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CsrSubjectFieldDescription>>("/certificate-authorities/{ca_name}/csr-subject-fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubjectFieldDescriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get description of subject DN fields for CSR &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CsrSubjectFieldDescription&gt;</returns>
        public async System.Threading.Tasks.Task<List<CsrSubjectFieldDescription>> GetSubjectFieldDescriptionsAsync(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CsrSubjectFieldDescription>> localVarResponse = await GetSubjectFieldDescriptionsWithHttpInfoAsync(caName, keyUsageType, keyId, memberId, isNewMember, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get description of subject DN fields for CSR &lt;h3&gt;List DN field descriptions to collect CSR parameters&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="caName">common name of the CA</param>
        /// <param name="keyUsageType">which usage type this CSR is for</param>
        /// <param name="keyId">id of the key. If provided, used only for validating correct key usage (optional)</param>
        /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt; (optional)</param>
        /// <param name="isNewMember">whether or not the member in the member_id parameter is a new member (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CsrSubjectFieldDescription&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<CsrSubjectFieldDescription>>> GetSubjectFieldDescriptionsWithHttpInfoAsync(string caName, KeyUsageType keyUsageType, string keyId = default(string), string memberId = default(string), bool? isNewMember = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'caName' is set
            if (caName == null)
            {
                throw new ChihabHajji.XRoad.Sdk.Client.ApiException(400, "Missing required parameter 'caName' when calling CertificateAuthoritiesApi->GetSubjectFieldDescriptions");
            }


            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ca_name", ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToString(caName)); // path parameter
            if (keyId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key_id", keyId));
            }
            localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key_usage_type", keyUsageType));
            if (memberId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "member_id", memberId));
            }
            if (isNewMember != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "is_new_member", isNewMember));
            }

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CsrSubjectFieldDescription>>("/certificate-authorities/{ca_name}/csr-subject-fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubjectFieldDescriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
