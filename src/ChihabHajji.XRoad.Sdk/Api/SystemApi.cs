/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ChihabHajji.XRoad.Sdk.Client;
using ChihabHajji.XRoad.Sdk.Model;

namespace ChihabHajji.XRoad.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// add a configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <returns>TimestampingService</returns>
        TimestampingService AddConfiguredTimestampingService(TimestampingService timestampingService = default(TimestampingService));

        /// <summary>
        /// add a configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <returns>ApiResponse of TimestampingService</returns>
        ApiResponse<TimestampingService> AddConfiguredTimestampingServiceWithHttpInfo(TimestampingService timestampingService = default(TimestampingService));
        /// <summary>
        /// delete configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <returns></returns>
        void DeleteConfiguredTimestampingService(TimestampingService timestampingService = default(TimestampingService));

        /// <summary>
        /// delete configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteConfiguredTimestampingServiceWithHttpInfo(TimestampingService timestampingService = default(TimestampingService));
        /// <summary>
        /// download configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadAnchor();

        /// <summary>
        /// download configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadAnchorWithHttpInfo();
        /// <summary>
        /// download the security server certificate as gzip compressed tar archive
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadSystemCertificate();

        /// <summary>
        /// download the security server certificate as gzip compressed tar archive
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadSystemCertificateWithHttpInfo();
        /// <summary>
        /// generate new certificate request
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GenerateSystemCertificateRequest(DistinguishedName distinguishedName = default(DistinguishedName));

        /// <summary>
        /// generate new certificate request
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GenerateSystemCertificateRequestWithHttpInfo(DistinguishedName distinguishedName = default(DistinguishedName));
        /// <summary>
        /// generate a new internal TLS key and cert
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GenerateSystemTlsKeyAndCertificate();

        /// <summary>
        /// generate a new internal TLS key and cert
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GenerateSystemTlsKeyAndCertificateWithHttpInfo();
        /// <summary>
        /// view the configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Anchor</returns>
        Anchor GetAnchor();

        /// <summary>
        /// view the configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Anchor</returns>
        ApiResponse<Anchor> GetAnchorWithHttpInfo();
        /// <summary>
        /// view the configured timestamping services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TimestampingService&gt;</returns>
        List<TimestampingService> GetConfiguredTimestampingServices();

        /// <summary>
        /// view the configured timestamping services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TimestampingService&gt;</returns>
        ApiResponse<List<TimestampingService>> GetConfiguredTimestampingServicesWithHttpInfo();
        /// <summary>
        /// get the node type
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeTypeResponse</returns>
        NodeTypeResponse GetNodeType();

        /// <summary>
        /// get the node type
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeTypeResponse</returns>
        ApiResponse<NodeTypeResponse> GetNodeTypeWithHttpInfo();
        /// <summary>
        /// view the security server certificate information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CertificateDetails</returns>
        CertificateDetails GetSystemCertificate();

        /// <summary>
        /// view the security server certificate information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CertificateDetails</returns>
        ApiResponse<CertificateDetails> GetSystemCertificateWithHttpInfo();
        /// <summary>
        /// import new internal TLS certificate.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>CertificateDetails</returns>
        CertificateDetails ImportSystemCertificate(System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// import new internal TLS certificate.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>ApiResponse of CertificateDetails</returns>
        ApiResponse<CertificateDetails> ImportSystemCertificateWithHttpInfo(System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>Anchor</returns>
        Anchor PreviewAnchor(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>ApiResponse of Anchor</returns>
        ApiResponse<Anchor> PreviewAnchorWithHttpInfo(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// Upload a configuration anchor file to replace an existing one.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns></returns>
        void ReplaceAnchor(System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Upload a configuration anchor file to replace an existing one.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReplaceAnchorWithHttpInfo(System.IO.Stream body = default(System.IO.Stream));
        /// <summary>
        /// get information for the system version
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VersionInfo</returns>
        VersionInfo SystemVersion();

        /// <summary>
        /// get information for the system version
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VersionInfo</returns>
        ApiResponse<VersionInfo> SystemVersionWithHttpInfo();
        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns></returns>
        void UploadInitialAnchor(System.IO.Stream body = default(System.IO.Stream));

        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadInitialAnchorWithHttpInfo(System.IO.Stream body = default(System.IO.Stream));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// add a configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimestampingService</returns>
        System.Threading.Tasks.Task<TimestampingService> AddConfiguredTimestampingServiceAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// add a configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimestampingService)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimestampingService>> AddConfiguredTimestampingServiceWithHttpInfoAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// delete configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteConfiguredTimestampingServiceAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// delete configured timestamping service
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteConfiguredTimestampingServiceWithHttpInfoAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// download configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAnchorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// download configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadAnchorWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// download the security server certificate as gzip compressed tar archive
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadSystemCertificateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// download the security server certificate as gzip compressed tar archive
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadSystemCertificateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// generate new certificate request
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GenerateSystemCertificateRequestAsync(DistinguishedName distinguishedName = default(DistinguishedName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// generate new certificate request
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GenerateSystemCertificateRequestWithHttpInfoAsync(DistinguishedName distinguishedName = default(DistinguishedName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// generate a new internal TLS key and cert
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GenerateSystemTlsKeyAndCertificateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// generate a new internal TLS key and cert
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GenerateSystemTlsKeyAndCertificateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// view the configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Anchor</returns>
        System.Threading.Tasks.Task<Anchor> GetAnchorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// view the configuration anchor information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Anchor)</returns>
        System.Threading.Tasks.Task<ApiResponse<Anchor>> GetAnchorWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// view the configured timestamping services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimestampingService&gt;</returns>
        System.Threading.Tasks.Task<List<TimestampingService>> GetConfiguredTimestampingServicesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// view the configured timestamping services
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimestampingService&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TimestampingService>>> GetConfiguredTimestampingServicesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get the node type
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NodeTypeResponse</returns>
        System.Threading.Tasks.Task<NodeTypeResponse> GetNodeTypeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get the node type
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NodeTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeTypeResponse>> GetNodeTypeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// view the security server certificate information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        System.Threading.Tasks.Task<CertificateDetails> GetSystemCertificateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// view the security server certificate information
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateDetails>> GetSystemCertificateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// import new internal TLS certificate.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        System.Threading.Tasks.Task<CertificateDetails> ImportSystemCertificateAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// import new internal TLS certificate.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CertificateDetails>> ImportSystemCertificateWithHttpInfoAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Anchor</returns>
        System.Threading.Tasks.Task<Anchor> PreviewAnchorAsync(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Anchor)</returns>
        System.Threading.Tasks.Task<ApiResponse<Anchor>> PreviewAnchorWithHttpInfoAsync(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a configuration anchor file to replace an existing one.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReplaceAnchorAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a configuration anchor file to replace an existing one.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReplaceAnchorWithHttpInfoAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// get information for the system version
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VersionInfo</returns>
        System.Threading.Tasks.Task<VersionInfo> SystemVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// get information for the system version
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VersionInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionInfo>> SystemVersionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadInitialAnchorAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server.
        /// </summary>
        /// <remarks>
        /// &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </remarks>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadInitialAnchorWithHttpInfoAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISystemApi : ISystemApiSync, ISystemApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SystemApi : ISystemApi
    {
        private ChihabHajji.XRoad.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SystemApi(string basePath)
        {
            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                new ChihabHajji.XRoad.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SystemApi(ChihabHajji.XRoad.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ChihabHajji.XRoad.Sdk.Client.Configuration.MergeConfigurations(
                ChihabHajji.XRoad.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ChihabHajji.XRoad.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SystemApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SystemApi(ChihabHajji.XRoad.Sdk.Client.ISynchronousClient client, ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient asyncClient, ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ChihabHajji.XRoad.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChihabHajji.XRoad.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChihabHajji.XRoad.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// add a configured timestamping service &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <returns>TimestampingService</returns>
        public TimestampingService AddConfiguredTimestampingService(TimestampingService timestampingService = default(TimestampingService))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<TimestampingService> localVarResponse = AddConfiguredTimestampingServiceWithHttpInfo(timestampingService);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a configured timestamping service &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <returns>ApiResponse of TimestampingService</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<TimestampingService> AddConfiguredTimestampingServiceWithHttpInfo(TimestampingService timestampingService = default(TimestampingService))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timestampingService;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimestampingService>("/system/timestamping-services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConfiguredTimestampingService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// add a configured timestamping service &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimestampingService</returns>
        public async System.Threading.Tasks.Task<TimestampingService> AddConfiguredTimestampingServiceAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<TimestampingService> localVarResponse = await AddConfiguredTimestampingServiceWithHttpInfoAsync(timestampingService, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// add a configured timestamping service &lt;h3&gt;Administrator selects a new timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimestampingService)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<TimestampingService>> AddConfiguredTimestampingServiceWithHttpInfoAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timestampingService;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TimestampingService>("/system/timestamping-services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConfiguredTimestampingService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete configured timestamping service &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <returns></returns>
        public void DeleteConfiguredTimestampingService(TimestampingService timestampingService = default(TimestampingService))
        {
            DeleteConfiguredTimestampingServiceWithHttpInfo(timestampingService);
        }

        /// <summary>
        /// delete configured timestamping service &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> DeleteConfiguredTimestampingServiceWithHttpInfo(TimestampingService timestampingService = default(TimestampingService))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timestampingService;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/system/timestamping-services/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfiguredTimestampingService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// delete configured timestamping service &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteConfiguredTimestampingServiceAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteConfiguredTimestampingServiceWithHttpInfoAsync(timestampingService, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// delete configured timestamping service &lt;h3&gt;Administrator removes a configured timestamping service.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestampingService">Timestamping service to delete (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> DeleteConfiguredTimestampingServiceWithHttpInfoAsync(TimestampingService timestampingService = default(TimestampingService), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = timestampingService;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/system/timestamping-services/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteConfiguredTimestampingService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download configuration anchor information &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadAnchor()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadAnchorWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// download configuration anchor information &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> DownloadAnchorWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/system/anchor/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download configuration anchor information &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadAnchorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadAnchorWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download configuration anchor information &lt;h3&gt;Administrator downloads the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream>> DownloadAnchorWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/system/anchor/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download the security server certificate as gzip compressed tar archive &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadSystemCertificate()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadSystemCertificateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// download the security server certificate as gzip compressed tar archive &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> DownloadSystemCertificateWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/gzip"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/system/certificate/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadSystemCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// download the security server certificate as gzip compressed tar archive &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadSystemCertificateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadSystemCertificateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// download the security server certificate as gzip compressed tar archive &lt;h3&gt;Administrator downloads the security server TLS certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream>> DownloadSystemCertificateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/gzip"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/system/certificate/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadSystemCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// generate new certificate request &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GenerateSystemCertificateRequest(DistinguishedName distinguishedName = default(DistinguishedName))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = GenerateSystemCertificateRequestWithHttpInfo(distinguishedName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// generate new certificate request &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> GenerateSystemCertificateRequestWithHttpInfo(DistinguishedName distinguishedName = default(DistinguishedName))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = distinguishedName;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<System.IO.Stream>("/system/certificate/csr", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateSystemCertificateRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// generate new certificate request &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GenerateSystemCertificateRequestAsync(DistinguishedName distinguishedName = default(DistinguishedName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream> localVarResponse = await GenerateSystemCertificateRequestWithHttpInfoAsync(distinguishedName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// generate new certificate request &lt;h3&gt;Administrator generates a new certificate request.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="distinguishedName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<System.IO.Stream>> GenerateSystemCertificateRequestWithHttpInfoAsync(DistinguishedName distinguishedName = default(DistinguishedName), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = distinguishedName;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/system/certificate/csr", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateSystemCertificateRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// generate a new internal TLS key and cert &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GenerateSystemTlsKeyAndCertificate()
        {
            GenerateSystemTlsKeyAndCertificateWithHttpInfo();
        }

        /// <summary>
        /// generate a new internal TLS key and cert &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> GenerateSystemTlsKeyAndCertificateWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/system/certificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateSystemTlsKeyAndCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// generate a new internal TLS key and cert &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GenerateSystemTlsKeyAndCertificateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GenerateSystemTlsKeyAndCertificateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// generate a new internal TLS key and cert &lt;h3&gt;Administrator generates new internal TLS key and certificate.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> GenerateSystemTlsKeyAndCertificateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/system/certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateSystemTlsKeyAndCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the configuration anchor information &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Anchor</returns>
        public Anchor GetAnchor()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor> localVarResponse = GetAnchorWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the configuration anchor information &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Anchor</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor> GetAnchorWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Anchor>("/system/anchor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the configuration anchor information &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Anchor</returns>
        public async System.Threading.Tasks.Task<Anchor> GetAnchorAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor> localVarResponse = await GetAnchorWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the configuration anchor information &lt;h3&gt;Administrator views the configuration anchor information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Anchor)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor>> GetAnchorWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Anchor>("/system/anchor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the configured timestamping services &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;TimestampingService&gt;</returns>
        public List<TimestampingService> GetConfiguredTimestampingServices()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TimestampingService>> localVarResponse = GetConfiguredTimestampingServicesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the configured timestamping services &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;TimestampingService&gt;</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TimestampingService>> GetConfiguredTimestampingServicesWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TimestampingService>>("/system/timestamping-services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfiguredTimestampingServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the configured timestamping services &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TimestampingService&gt;</returns>
        public async System.Threading.Tasks.Task<List<TimestampingService>> GetConfiguredTimestampingServicesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TimestampingService>> localVarResponse = await GetConfiguredTimestampingServicesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the configured timestamping services &lt;h3&gt;Administrator views the configured timestamping services.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TimestampingService&gt;)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<List<TimestampingService>>> GetConfiguredTimestampingServicesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TimestampingService>>("/system/timestamping-services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfiguredTimestampingServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the node type &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeTypeResponse</returns>
        public NodeTypeResponse GetNodeType()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<NodeTypeResponse> localVarResponse = GetNodeTypeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the node type &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeTypeResponse</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<NodeTypeResponse> GetNodeTypeWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NodeTypeResponse>("/system/node-type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNodeType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get the node type &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NodeTypeResponse</returns>
        public async System.Threading.Tasks.Task<NodeTypeResponse> GetNodeTypeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<NodeTypeResponse> localVarResponse = await GetNodeTypeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get the node type &lt;h3&gt;Administrator views the node type&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NodeTypeResponse)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<NodeTypeResponse>> GetNodeTypeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeTypeResponse>("/system/node-type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNodeType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the security server certificate information &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CertificateDetails</returns>
        public CertificateDetails GetSystemCertificate()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = GetSystemCertificateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the security server certificate information &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CertificateDetails</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> GetSystemCertificateWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CertificateDetails>("/system/certificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// view the security server certificate information &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        public async System.Threading.Tasks.Task<CertificateDetails> GetSystemCertificateAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = await GetSystemCertificateWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// view the security server certificate information &lt;h3&gt;Administrator views the security server TLS certificate information.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails>> GetSystemCertificateWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CertificateDetails>("/system/certificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSystemCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// import new internal TLS certificate. &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>CertificateDetails</returns>
        public CertificateDetails ImportSystemCertificate(System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = ImportSystemCertificateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// import new internal TLS certificate. &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <returns>ApiResponse of CertificateDetails</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> ImportSystemCertificateWithHttpInfo(System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CertificateDetails>("/system/certificate/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportSystemCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// import new internal TLS certificate. &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CertificateDetails</returns>
        public async System.Threading.Tasks.Task<CertificateDetails> ImportSystemCertificateAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails> localVarResponse = await ImportSystemCertificateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// import new internal TLS certificate. &lt;h3&gt;Administrator imports a new internal TLS certificate&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">certificate to add (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CertificateDetails)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<CertificateDetails>> ImportSystemCertificateWithHttpInfoAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CertificateDetails>("/system/certificate/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportSystemCertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview. &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>Anchor</returns>
        public Anchor PreviewAnchor(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor> localVarResponse = PreviewAnchorWithHttpInfo(validateInstance, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview. &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>ApiResponse of Anchor</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor> PreviewAnchorWithHttpInfo(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validateInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate_instance", validateInstance));
            }
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Anchor>("/system/anchor/previews", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview. &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Anchor</returns>
        public async System.Threading.Tasks.Task<Anchor> PreviewAnchorAsync(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor> localVarResponse = await PreviewAnchorWithHttpInfoAsync(validateInstance, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Read and the configuration anchor file and return the hash for a preview. &lt;h3&gt;Administrator wants to preview a configuration anchor file hash.&lt;/h3&gt; &lt;p&gt;The instance of the anchor is also validated unless the &lt;code&gt;validate_instance&lt;/code&gt; query parameter is explicitly set to false. The anchor will not be saved.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateInstance">Whether or not to validate the owner instance of the anchor. Set this to false explicitly when previewing an anchor in the security server initialization phase. Default value is true if the parameter is omitted. (optional, default to true)</param>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Anchor)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Anchor>> PreviewAnchorWithHttpInfoAsync(bool? validateInstance = default(bool?), System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (validateInstance != null)
            {
                localVarRequestOptions.QueryParameters.Add(ChihabHajji.XRoad.Sdk.Client.ClientUtils.ParameterToMultiMap("", "validate_instance", validateInstance));
            }
            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Anchor>("/system/anchor/previews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a configuration anchor file to replace an existing one. &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns></returns>
        public void ReplaceAnchor(System.IO.Stream body = default(System.IO.Stream))
        {
            ReplaceAnchorWithHttpInfo(body);
        }

        /// <summary>
        /// Upload a configuration anchor file to replace an existing one. &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> ReplaceAnchorWithHttpInfo(System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/system/anchor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a configuration anchor file to replace an existing one. &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReplaceAnchorAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ReplaceAnchorWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload a configuration anchor file to replace an existing one. &lt;h3&gt;Administrator uploads a configuration anchor file anytime after the Security Server has been initialized.&lt;/h3&gt; &lt;p&gt; &lt;b&gt;Note that this only works if there already exists an anchor that can be replaced.&lt;/b&gt; When initalizing a new Security Server, use the endpoint &lt;code&gt;POST /system/anchor&lt;/code&gt; instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> ReplaceAnchorWithHttpInfoAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/system/anchor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get information for the system version &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VersionInfo</returns>
        public VersionInfo SystemVersion()
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<VersionInfo> localVarResponse = SystemVersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// get information for the system version &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VersionInfo</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<VersionInfo> SystemVersionWithHttpInfo()
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VersionInfo>("/system/version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SystemVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get information for the system version &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VersionInfo</returns>
        public async System.Threading.Tasks.Task<VersionInfo> SystemVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ChihabHajji.XRoad.Sdk.Client.ApiResponse<VersionInfo> localVarResponse = await SystemVersionWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get information for the system version &lt;h3&gt;Administrator views the system version details.&lt;/h3&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VersionInfo)</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<VersionInfo>> SystemVersionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VersionInfo>("/system/version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SystemVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server. &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns></returns>
        public void UploadInitialAnchor(System.IO.Stream body = default(System.IO.Stream))
        {
            UploadInitialAnchorWithHttpInfo(body);
        }

        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server. &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object> UploadInitialAnchorWithHttpInfo(System.IO.Stream body = default(System.IO.Stream))
        {
            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/system/anchor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadInitialAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server. &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadInitialAnchorAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UploadInitialAnchorWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload a new configuration anchor file when initializing a new security server. &lt;h3&gt;Administrator uploads a new configuration anchor file in the security server&#39;s initialization phase.&lt;/h3&gt; &lt;p&gt; Calls to this endpoint only succeed if a configuration anchor is not already found – meaning that &lt;b&gt;this endpoint can only be used when initializing a new security server&lt;/b&gt;. For updating the anchor for an already initialized security server use the &lt;code&gt;PUT /system/anchor&lt;/code&gt; endpoint instead. &lt;/p&gt;
        /// </summary>
        /// <exception cref="ChihabHajji.XRoad.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">configuration anchor (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ChihabHajji.XRoad.Sdk.Client.ApiResponse<Object>> UploadInitialAnchorWithHttpInfoAsync(System.IO.Stream body = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ChihabHajji.XRoad.Sdk.Client.RequestOptions localVarRequestOptions = new ChihabHajji.XRoad.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ChihabHajji.XRoad.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/system/anchor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadInitialAnchor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
