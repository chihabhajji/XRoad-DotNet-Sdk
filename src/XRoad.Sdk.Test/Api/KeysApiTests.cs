/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using XRoad.Sdk.Api;
using Xunit;

// uncomment below to import models
//using XRoad.Sdk.Model;

namespace XRoad.Sdk.Test.Api;

/// <summary>
///  Class for testing KeysApi
/// </summary>
/// <remarks>
/// Please update the test case below to test the API endpoint.
/// </remarks>
public class KeysApiTests : IDisposable
{
    private KeysApi instance;

    public KeysApiTests()
    {
        instance = new KeysApi();
    }

    public void Dispose()
    {
        // Cleanup when everything is done.
    }

    /// <summary>
    /// Test an instance of KeysApi
    /// </summary>
    [Fact]
    public void InstanceTest()
    {
        // TODO uncomment below to test 'IsType' KeysApi
        //Assert.IsType<KeysApi>(instance);
    }

    /// <summary>
    /// Test DeleteCsr
    /// </summary>
    [Fact]
    public void DeleteCsrTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //string csrId = null;
        //instance.DeleteCsr(id, csrId);
    }

    /// <summary>
    /// Test DeleteKey
    /// </summary>
    [Fact]
    public void DeleteKeyTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //bool? ignoreWarnings = null;
        //instance.DeleteKey(id, ignoreWarnings);
    }

    /// <summary>
    /// Test DownloadCsr
    /// </summary>
    [Fact]
    public void DownloadCsrTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //string csrId = null;
        //CsrFormat? csrFormat = null;
        //var response = instance.DownloadCsr(id, csrId, csrFormat);
        //Assert.IsType<System.IO.Stream>(response);
    }

    /// <summary>
    /// Test GenerateCsr
    /// </summary>
    [Fact]
    public void GenerateCsrTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //CsrGenerate csrGenerate = null;
        //var response = instance.GenerateCsr(id, csrGenerate);
        //Assert.IsType<System.IO.Stream>(response);
    }

    /// <summary>
    /// Test GetKey
    /// </summary>
    [Fact]
    public void GetKeyTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //var response = instance.GetKey(id);
        //Assert.IsType<Key>(response);
    }

    /// <summary>
    /// Test GetPossibleActionsForCsr
    /// </summary>
    [Fact]
    public void GetPossibleActionsForCsrTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //string csrId = null;
        //var response = instance.GetPossibleActionsForCsr(id, csrId);
        //Assert.IsType<List<PossibleAction>>(response);
    }

    /// <summary>
    /// Test GetPossibleActionsForKey
    /// </summary>
    [Fact]
    public void GetPossibleActionsForKeyTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //var response = instance.GetPossibleActionsForKey(id);
        //Assert.IsType<List<PossibleAction>>(response);
    }

    /// <summary>
    /// Test UpdateKey
    /// </summary>
    [Fact]
    public void UpdateKeyTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //KeyName keyName = null;
        //var response = instance.UpdateKey(id, keyName);
        //Assert.IsType<Key>(response);
    }
}