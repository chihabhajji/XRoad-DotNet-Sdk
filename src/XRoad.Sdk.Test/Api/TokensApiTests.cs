/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using XRoad.Sdk.Api;
using Xunit;

// uncomment below to import models
//using XRoad.Sdk.Model;

namespace XRoad.Sdk.Test.Api;

/// <summary>
///  Class for testing TokensApi
/// </summary>
/// <remarks>
/// Please update the test case below to test the API endpoint.
/// </remarks>
public class TokensApiTests : IDisposable
{
    private TokensApi instance;

    public TokensApiTests()
    {
        instance = new TokensApi();
    }

    public void Dispose()
    {
        // Cleanup when everything is done.
    }

    /// <summary>
    /// Test an instance of TokensApi
    /// </summary>
    [Fact]
    public void InstanceTest()
    {
        // TODO uncomment below to test 'IsType' TokensApi
        //Assert.IsType<TokensApi>(instance);
    }

    /// <summary>
    /// Test AddKey
    /// </summary>
    [Fact]
    public void AddKeyTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //KeyLabel keyLabel = null;
        //var response = instance.AddKey(id, keyLabel);
        //Assert.IsType<Key>(response);
    }

    /// <summary>
    /// Test AddKeyAndCsr
    /// </summary>
    [Fact]
    public void AddKeyAndCsrTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //KeyLabelWithCsrGenerate keyLabelWithCsrGenerate = null;
        //var response = instance.AddKeyAndCsr(id, keyLabelWithCsrGenerate);
        //Assert.IsType<KeyWithCertificateSigningRequestId>(response);
    }

    /// <summary>
    /// Test GetToken
    /// </summary>
    [Fact]
    public void GetTokenTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //var response = instance.GetToken(id);
        //Assert.IsType<Token>(response);
    }

    /// <summary>
    /// Test GetTokens
    /// </summary>
    [Fact]
    public void GetTokensTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //var response = instance.GetTokens();
        //Assert.IsType<List<Token>>(response);
    }

    /// <summary>
    /// Test LoginToken
    /// </summary>
    [Fact]
    public void LoginTokenTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //TokenPassword tokenPassword = null;
        //var response = instance.LoginToken(id, tokenPassword);
        //Assert.IsType<Token>(response);
    }

    /// <summary>
    /// Test LogoutToken
    /// </summary>
    [Fact]
    public void LogoutTokenTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //var response = instance.LogoutToken(id);
        //Assert.IsType<Token>(response);
    }

    /// <summary>
    /// Test UpdateToken
    /// </summary>
    [Fact]
    public void UpdateTokenTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //TokenName tokenName = null;
        //var response = instance.UpdateToken(id, tokenName);
        //Assert.IsType<Token>(response);
    }

    /// <summary>
    /// Test UpdateTokenPin
    /// </summary>
    [Fact]
    public void UpdateTokenPinTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string id = null;
        //TokenPinUpdate tokenPinUpdate = null;
        //instance.UpdateTokenPin(id, tokenPinUpdate);
    }
}