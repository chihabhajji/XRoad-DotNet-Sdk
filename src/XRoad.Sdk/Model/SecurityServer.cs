/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// security server information
/// </summary>
[DataContract(Name = "SecurityServer")]
public class SecurityServer : IEquatable<SecurityServer>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServer" /> class.
    /// </summary>
    [JsonConstructor]
    protected SecurityServer()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServer" /> class.
    /// </summary>
    /// <param name="id">&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;security_server_code&gt; (required).</param>
    /// <param name="instanceId">xroad instance id.</param>
    /// <param name="memberClass">member class.</param>
    /// <param name="memberCode">member code.</param>
    /// <param name="serverCode">security server code.</param>
    /// <param name="serverAddress">security server address (ip or name).</param>
    public SecurityServer(string id = default, string instanceId = default, string memberClass = default,
        string memberCode = default, string serverCode = default, string serverAddress = default)
    {
        // to ensure "id" is required (not null)
        Id = id ?? throw new ArgumentNullException(nameof(id),
            "id is a required property for SecurityServer and cannot be null");
        InstanceId = instanceId;
        MemberClass = memberClass;
        MemberCode = memberCode;
        ServerCode = serverCode;
        ServerAddress = serverAddress;
    }

    /// <summary>
    /// &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;security_server_code&gt;
    /// </summary>
    /// <value>&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;security_server_code&gt;</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
    public string Id { get; }

    /// <summary>
    /// xroad instance id
    /// </summary>
    /// <value>xroad instance id</value>
    [DataMember(Name = "instance_id", EmitDefaultValue = false)]
    public string InstanceId { get; }

    /// <summary>
    /// member class
    /// </summary>
    /// <value>member class</value>
    [DataMember(Name = "member_class", EmitDefaultValue = false)]
    public string MemberClass { get; }

    /// <summary>
    /// member code
    /// </summary>
    /// <value>member code</value>
    [DataMember(Name = "member_code", EmitDefaultValue = false)]
    public string MemberCode { get; }

    /// <summary>
    /// security server code
    /// </summary>
    /// <value>security server code</value>
    [DataMember(Name = "server_code", EmitDefaultValue = false)]
    public string ServerCode { get; }

    /// <summary>
    /// security server address (ip or name)
    /// </summary>
    /// <value>security server address (ip or name)</value>
    [DataMember(Name = "server_address", EmitDefaultValue = false)]
    public string ServerAddress { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SecurityServer {\n");
        sb.Append("  Id: ").Append(Id).Append('\n');
        sb.Append("  InstanceId: ").Append(InstanceId).Append('\n');
        sb.Append("  MemberClass: ").Append(MemberClass).Append('\n');
        sb.Append("  MemberCode: ").Append(MemberCode).Append('\n');
        sb.Append("  ServerCode: ").Append(ServerCode).Append('\n');
        sb.Append("  ServerAddress: ").Append(ServerAddress).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as SecurityServer);
    }

    /// <summary>
    /// Returns true if SecurityServer instances are equal
    /// </summary>
    /// <param name="input">Instance of SecurityServer to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SecurityServer input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                InstanceId == input.InstanceId ||
                (InstanceId != null &&
                 InstanceId.Equals(input.InstanceId))
            ) &&
            (
                MemberClass == input.MemberClass ||
                (MemberClass != null &&
                 MemberClass.Equals(input.MemberClass))
            ) &&
            (
                MemberCode == input.MemberCode ||
                (MemberCode != null &&
                 MemberCode.Equals(input.MemberCode))
            ) &&
            (
                ServerCode == input.ServerCode ||
                (ServerCode != null &&
                 ServerCode.Equals(input.ServerCode))
            ) &&
            (
                ServerAddress == input.ServerAddress ||
                (ServerAddress != null &&
                 ServerAddress.Equals(input.ServerAddress))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (InstanceId != null) hashCode = hashCode * 59 + InstanceId.GetHashCode();
            if (MemberClass != null) hashCode = hashCode * 59 + MemberClass.GetHashCode();
            if (MemberCode != null) hashCode = hashCode * 59 + MemberCode.GetHashCode();
            if (ServerCode != null) hashCode = hashCode * 59 + ServerCode.GetHashCode();
            if (ServerAddress != null) hashCode = hashCode * 59 + ServerAddress.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // InstanceId (string) maxLength
        if (InstanceId is {Length: > 255})
            yield return new ValidationResult("Invalid value for InstanceId, length must be less than 255.",
                new[] {"InstanceId"});

        // InstanceId (string) minLength
        if (InstanceId is {Length: < 1})
            yield return new ValidationResult("Invalid value for InstanceId, length must be greater than 1.",
                new[] {"InstanceId"});

        // MemberClass (string) maxLength
        if (MemberClass is {Length: > 255})
            yield return new ValidationResult("Invalid value for MemberClass, length must be less than 255.",
                new[] {"MemberClass"});

        // MemberClass (string) minLength
        if (MemberClass is {Length: < 1})
            yield return new ValidationResult("Invalid value for MemberClass, length must be greater than 1.",
                new[] {"MemberClass"});

        // MemberCode (string) maxLength
        if (MemberCode is {Length: > 255})
            yield return new ValidationResult("Invalid value for MemberCode, length must be less than 255.",
                new[] {"MemberCode"});

        // MemberCode (string) minLength
        if (MemberCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for MemberCode, length must be greater than 1.",
                new[] {"MemberCode"});

        // ServerCode (string) maxLength
        if (ServerCode is {Length: > 255})
            yield return new ValidationResult("Invalid value for ServerCode, length must be less than 255.",
                new[] {"ServerCode"});

        // ServerCode (string) minLength
        if (ServerCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for ServerCode, length must be greater than 1.",
                new[] {"ServerCode"});

        // ServerAddress (string) maxLength
        if (ServerAddress is {Length: > 255})
            yield return new ValidationResult("Invalid value for ServerAddress, length must be less than 255.",
                new[] {"ServerAddress"});
    }
}