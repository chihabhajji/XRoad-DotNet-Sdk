/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// Key for the certificate. Also includes the possible actions that can be done to this object, e.g DELETE (only for key related operations and does not consider user authorization).
/// </summary>
[DataContract(Name = "Key")]
public class Key : IEquatable<Key>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets Usage
    /// </summary>
    [DataMember(Name = "usage", EmitDefaultValue = false)]
    public KeyUsageType? Usage { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="Key" /> class.
    /// </summary>
    [JsonConstructor]
    protected Key()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Key" /> class.
    /// </summary>
    /// <param name="name">key name (required).</param>
    /// <param name="label">key label (required).</param>
    /// <param name="certificates">list of certificates for the key (required).</param>
    /// <param name="certificateSigningRequests">list of CSRs for the key (required).</param>
    /// <param name="usage">usage.</param>
    /// <param name="available">if the key is available.</param>
    /// <param name="savedToConfiguration">if the key is saved to configuration.</param>
    /// <param name="possibleActions">array containing the possible actions that can be done for this item.</param>
    public Key(string name = default, string label = default, List<TokenCertificate> certificates = default,
        List<TokenCertificateSigningRequest> certificateSigningRequests = default, KeyUsageType? usage = default,
        bool available = default, bool savedToConfiguration = default, List<PossibleAction> possibleActions = default)
    {
        // to ensure "name" is required (not null)
        Name = name ?? throw new ArgumentNullException(nameof(name),"name is a required property for Key and cannot be null");
        // to ensure "label" is required (not null)
        Label = label ?? throw new ArgumentNullException(nameof(label),"label is a required property for Key and cannot be null");
        // to ensure "certificates" is required (not null)
        Certificates = certificates ?? throw new ArgumentNullException(nameof(certificates),"certificates is a required property for Key and cannot be null");
        // to ensure "certificateSigningRequests" is required (not null)
        CertificateSigningRequests = certificateSigningRequests ?? throw new ArgumentNullException(
            nameof(certificateSigningRequests),"certificateSigningRequests is a required property for Key and cannot be null");
        Usage = usage;
        Available = available;
        SavedToConfiguration = savedToConfiguration;
        PossibleActions = possibleActions;
    }

    /// <summary>
    /// key id
    /// </summary>
    /// <value>key id</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
    public string Id { get; }

    /// <summary>
    /// Returns false as Id should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeId()
    {
        return false;
    }

    /// <summary>
    /// key name
    /// </summary>
    /// <value>key name</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
    public string Name { get; }

    /// <summary>
    /// key label
    /// </summary>
    /// <value>key label</value>
    [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = false)]
    public string Label { get; }

    /// <summary>
    /// list of certificates for the key
    /// </summary>
    /// <value>list of certificates for the key</value>
    [DataMember(Name = "certificates", IsRequired = true, EmitDefaultValue = false)]
    public List<TokenCertificate> Certificates { get; }

    /// <summary>
    /// list of CSRs for the key
    /// </summary>
    /// <value>list of CSRs for the key</value>
    [DataMember(Name = "certificate_signing_requests", IsRequired = true, EmitDefaultValue = false)]
    public List<TokenCertificateSigningRequest> CertificateSigningRequests { get; }

    /// <summary>
    /// if the key is available
    /// </summary>
    /// <value>if the key is available</value>
    [DataMember(Name = "available", EmitDefaultValue = true)]
    public bool Available { get; }

    /// <summary>
    /// if the key is saved to configuration
    /// </summary>
    /// <value>if the key is saved to configuration</value>
    [DataMember(Name = "saved_to_configuration", EmitDefaultValue = true)]
    public bool SavedToConfiguration { get; }

    /// <summary>
    /// array containing the possible actions that can be done for this item
    /// </summary>
    /// <value>array containing the possible actions that can be done for this item</value>
    [DataMember(Name = "possible_actions", EmitDefaultValue = false)]
    public List<PossibleAction> PossibleActions { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Key {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Label: ").Append(Label).Append("\n");
        sb.Append("  Certificates: ").Append(Certificates).Append("\n");
        sb.Append("  CertificateSigningRequests: ").Append(CertificateSigningRequests).Append("\n");
        sb.Append("  Usage: ").Append(Usage).Append("\n");
        sb.Append("  Available: ").Append(Available).Append("\n");
        sb.Append("  SavedToConfiguration: ").Append(SavedToConfiguration).Append("\n");
        sb.Append("  PossibleActions: ").Append(PossibleActions).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as Key);
    }

    /// <summary>
    /// Returns true if Key instances are equal
    /// </summary>
    /// <param name="input">Instance of Key to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Key input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                Name == input.Name ||
                (Name != null &&
                 Name.Equals(input.Name))
            ) &&
            (
                Label == input.Label ||
                (Label != null &&
                 Label.Equals(input.Label))
            ) &&
            (
                Certificates == input.Certificates ||
                (Certificates != null &&
                 input.Certificates != null &&
                 Certificates.SequenceEqual(input.Certificates))
            ) &&
            (
                CertificateSigningRequests == input.CertificateSigningRequests ||
                (CertificateSigningRequests != null &&
                 input.CertificateSigningRequests != null &&
                 CertificateSigningRequests.SequenceEqual(input.CertificateSigningRequests))
            ) &&
            (
                Usage == input.Usage ||
                Usage.Equals(input.Usage)
            ) &&
            (
                Available == input.Available ||
                Available.Equals(input.Available)
            ) &&
            (
                SavedToConfiguration == input.SavedToConfiguration ||
                SavedToConfiguration.Equals(input.SavedToConfiguration)
            ) &&
            (
                PossibleActions == input.PossibleActions ||
                (PossibleActions != null &&
                 input.PossibleActions != null &&
                 PossibleActions.SequenceEqual(input.PossibleActions))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            if (Label != null) hashCode = hashCode * 59 + Label.GetHashCode();
            if (Certificates != null) hashCode = hashCode * 59 + Certificates.GetHashCode();
            if (CertificateSigningRequests != null) hashCode = hashCode * 59 + CertificateSigningRequests.GetHashCode();
            hashCode = hashCode * 59 + Usage.GetHashCode();
            hashCode = hashCode * 59 + Available.GetHashCode();
            hashCode = hashCode * 59 + SavedToConfiguration.GetHashCode();
            if (PossibleActions != null) hashCode = hashCode * 59 + PossibleActions.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Id (string) minLength
        if (Id is {Length: < 1})
            yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new[] {"Id"});

        // Name (string) maxLength
        if (Name is {Length: > 255})
            yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] {"Name"});

        // Name (string) minLength
        if (Name is {Length: < 1})
            yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new[] {"Name"});

        // Label (string) maxLength
        if (Label is {Length: > 255})
            yield return new ValidationResult("Invalid value for Label, length must be less than 255.",
                new[] {"Label"});

        // Label (string) minLength
        if (Label is {Length: < 1})
            yield return new ValidationResult("Invalid value for Label, length must be greater than 1.",
                new[] {"Label"});
    }
}