/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// x-road user
/// </summary>
[DataContract(Name = "User")]
public class User : IEquatable<User>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="User" /> class.
    /// </summary>
    [JsonConstructor]
    protected User()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="User" /> class.
    /// </summary>
    /// <param name="username">user username (required).</param>
    /// <param name="roles">user roles (required).</param>
    /// <param name="permissions">user permissions (required).</param>
    public User(string username = default, List<string> roles = default, List<string> permissions = default)
    {
        // to ensure "username" is required (not null)
        Username = username ?? throw new ArgumentNullException(nameof(username),
            "username is a required property for User and cannot be null");
        // to ensure "roles" is required (not null)
        Roles = roles ??
                throw new ArgumentNullException(nameof(roles),
                    "roles is a required property for User and cannot be null");
        // to ensure "permissions" is required (not null)
        Permissions = permissions ?? throw new ArgumentNullException(nameof(permissions),
            "permissions is a required property for User and cannot be null");
    }

    /// <summary>
    /// user username
    /// </summary>
    /// <value>user username</value>
    [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = false)]
    public string Username { get; }

    /// <summary>
    /// user roles
    /// </summary>
    /// <value>user roles</value>
    [DataMember(Name = "roles", IsRequired = true, EmitDefaultValue = false)]
    public List<string> Roles { get; }

    /// <summary>
    /// user permissions
    /// </summary>
    /// <value>user permissions</value>
    [DataMember(Name = "permissions", IsRequired = true, EmitDefaultValue = false)]
    public List<string> Permissions { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class User {\n");
        sb.Append("  Username: ").Append(Username).Append("\n");
        sb.Append("  Roles: ").Append(Roles).Append("\n");
        sb.Append("  Permissions: ").Append(Permissions).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as User);
    }

    /// <summary>
    /// Returns true if User instances are equal
    /// </summary>
    /// <param name="input">Instance of User to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(User input)
    {
        if (input == null) return false;
        return
            (
                Username == input.Username ||
                (Username != null &&
                 Username.Equals(input.Username))
            ) &&
            (
                Roles == input.Roles ||
                (Roles != null &&
                 input.Roles != null &&
                 Roles.SequenceEqual(input.Roles))
            ) &&
            (
                Permissions == input.Permissions ||
                (Permissions != null &&
                 input.Permissions != null &&
                 Permissions.SequenceEqual(input.Permissions))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Username != null) hashCode = hashCode * 59 + Username.GetHashCode();
            if (Roles != null) hashCode = hashCode * 59 + Roles.GetHashCode();
            if (Permissions != null) hashCode = hashCode * 59 + Permissions.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Username (string) maxLength
        if (Username is {Length: > 255})
            yield return new ValidationResult("Invalid value for Username, length must be less than 255.",
                new[] {"Username"});

        // Username (string) minLength
        if (Username is {Length: < 1})
            yield return new ValidationResult("Invalid value for Username, length must be greater than 1.",
                new[] {"Username"});
    }
}