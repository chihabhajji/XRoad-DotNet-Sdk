/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// request to generate a CSR
/// </summary>
[DataContract(Name = "CsrGenerate")]
public class CsrGenerate : IEquatable<CsrGenerate>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets KeyUsageType
    /// </summary>
    [DataMember(Name = "key_usage_type", IsRequired = true, EmitDefaultValue = false)]
    public KeyUsageType KeyUsageType { get; }

    /// <summary>
    /// Gets or Sets CsrFormat
    /// </summary>
    [DataMember(Name = "csr_format", IsRequired = true, EmitDefaultValue = false)]
    public CsrFormat CsrFormat { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="CsrGenerate" /> class.
    /// </summary>
    [JsonConstructor]
    protected CsrGenerate()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="CsrGenerate" /> class.
    /// </summary>
    /// <param name="keyUsageType">keyUsageType (required).</param>
    /// <param name="caName">common name of the CA (required).</param>
    /// <param name="csrFormat">csrFormat (required).</param>
    /// <param name="memberId">member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;.</param>
    /// <param name="subjectFieldValues">user-provided values for subject DN parameters (required).</param>
    public CsrGenerate(KeyUsageType keyUsageType = default, string caName = default, CsrFormat csrFormat = default,
        string memberId = default, Dictionary<string, string> subjectFieldValues = default)
    {
        KeyUsageType = keyUsageType;
        // to ensure "caName" is required (not null)
        CaName = caName ?? throw new ArgumentNullException(nameof(caName),"caName is a required property for CsrGenerate and cannot be null");
        CsrFormat = csrFormat;
        // to ensure "subjectFieldValues" is required (not null)
        SubjectFieldValues = subjectFieldValues ?? throw new ArgumentNullException(
            nameof(subjectFieldValues),
            "subjectFieldValues is a required property for CsrGenerate and cannot be null");
        MemberId = memberId;
    }

    /// <summary>
    /// common name of the CA
    /// </summary>
    /// <value>common name of the CA</value>
    [DataMember(Name = "ca_name", IsRequired = true, EmitDefaultValue = false)]
    public string CaName { get; }

    /// <summary>
    /// member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;
    /// </summary>
    /// <value>member client id for signing CSRs. &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;</value>
    [DataMember(Name = "member_id", EmitDefaultValue = false)]
    public string MemberId { get; }

    /// <summary>
    /// user-provided values for subject DN parameters
    /// </summary>
    /// <value>user-provided values for subject DN parameters</value>
    [DataMember(Name = "subject_field_values", IsRequired = true, EmitDefaultValue = false)]
    public Dictionary<string, string> SubjectFieldValues { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CsrGenerate {\n");
        sb.Append("  KeyUsageType: ").Append(KeyUsageType).Append("\n");
        sb.Append("  CaName: ").Append(CaName).Append("\n");
        sb.Append("  CsrFormat: ").Append(CsrFormat).Append("\n");
        sb.Append("  MemberId: ").Append(MemberId).Append("\n");
        sb.Append("  SubjectFieldValues: ").Append(SubjectFieldValues).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as CsrGenerate);
    }

    /// <summary>
    /// Returns true if CsrGenerate instances are equal
    /// </summary>
    /// <param name="input">Instance of CsrGenerate to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(CsrGenerate input)
    {
        if (input == null) return false;
        return
            (
                KeyUsageType == input.KeyUsageType ||
                KeyUsageType.Equals(input.KeyUsageType)
            ) &&
            (
                CaName == input.CaName ||
                (CaName != null &&
                 CaName.Equals(input.CaName))
            ) &&
            (
                CsrFormat == input.CsrFormat ||
                CsrFormat.Equals(input.CsrFormat)
            ) &&
            (
                MemberId == input.MemberId ||
                (MemberId != null &&
                 MemberId.Equals(input.MemberId))
            ) &&
            (
                SubjectFieldValues == input.SubjectFieldValues ||
                (SubjectFieldValues != null &&
                 input.SubjectFieldValues != null &&
                 SubjectFieldValues.SequenceEqual(input.SubjectFieldValues))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + KeyUsageType.GetHashCode();
            if (CaName != null) hashCode = hashCode * 59 + CaName.GetHashCode();
            hashCode = hashCode * 59 + CsrFormat.GetHashCode();
            if (MemberId != null) hashCode = hashCode * 59 + MemberId.GetHashCode();
            if (SubjectFieldValues != null) hashCode = hashCode * 59 + SubjectFieldValues.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // CaName (string) maxLength
        if (CaName is {Length: > 255})
            yield return new ValidationResult("Invalid value for CaName, length must be less than 255.",
                new[] {"CaName"});

        // CaName (string) minLength
        if (CaName is {Length: < 1})
            yield return new ValidationResult("Invalid value for CaName, length must be greater than 1.",
                new[] {"CaName"});

        // MemberId (string) maxLength
        if (MemberId is {Length: > 767})
            yield return new ValidationResult("Invalid value for MemberId, length must be less than 767.",
                new[] {"MemberId"});

        // MemberId (string) minLength
        if (MemberId is {Length: < 1})
            yield return new ValidationResult("Invalid value for MemberId, length must be greater than 1.",
                new[] {"MemberId"});
    }
}