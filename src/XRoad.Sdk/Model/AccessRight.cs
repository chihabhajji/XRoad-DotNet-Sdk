/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// access right given for a specific subject (ServiceClient) for specific service (service_code) owned by some client. This object does not represent endpoint-level access rights
/// </summary>
[DataContract(Name = "AccessRight")]
public class AccessRight : IEquatable<AccessRight>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="AccessRight" /> class.
    /// </summary>
    [JsonConstructor]
    protected AccessRight()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="AccessRight" /> class.
    /// </summary>
    /// <param name="serviceCode">service code (required).</param>
    public AccessRight(string serviceCode = default)
    {
        // to ensure "serviceCode" is required (not null)
        ServiceCode = serviceCode ?? throw new ArgumentNullException(nameof(serviceCode),
            "serviceCode is a required property for AccessRight and cannot be null");
    }

    /// <summary>
    /// service code
    /// </summary>
    /// <value>service code</value>
    [DataMember(Name = "service_code", IsRequired = true, EmitDefaultValue = false)]
    public string ServiceCode { get; }

    /// <summary>
    /// service title
    /// </summary>
    /// <value>service title</value>
    [DataMember(Name = "service_title", EmitDefaultValue = false)]
    public string ServiceTitle { get; }

    /// <summary>
    /// Returns false as ServiceTitle should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public static bool ShouldSerializeServiceTitle()
    {
        return false;
    }

    /// <summary>
    /// access right given at
    /// </summary>
    /// <value>access right given at</value>
    [DataMember(Name = "rights_given_at", EmitDefaultValue = false)]
    public DateTime RightsGivenAt { get; }

    /// <summary>
    /// Returns false as RightsGivenAt should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeRightsGivenAt()
    {
        return false;
    }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class AccessRight {\n");
        sb.Append("  ServiceCode: ").Append(ServiceCode).Append("\n");
        sb.Append("  ServiceTitle: ").Append(ServiceTitle).Append("\n");
        sb.Append("  RightsGivenAt: ").Append(RightsGivenAt).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as AccessRight);
    }

    /// <summary>
    /// Returns true if AccessRight instances are equal
    /// </summary>
    /// <param name="input">Instance of AccessRight to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(AccessRight input)
    {
        if (input == null) return false;
        return
            (
                ServiceCode == input.ServiceCode ||
                (ServiceCode != null &&
                 ServiceCode.Equals(input.ServiceCode))
            ) &&
            (
                ServiceTitle == input.ServiceTitle ||
                (ServiceTitle != null &&
                 ServiceTitle.Equals(input.ServiceTitle))
            ) &&
            (
                RightsGivenAt == input.RightsGivenAt ||
                RightsGivenAt.Equals(input.RightsGivenAt)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (ServiceCode != null) hashCode = hashCode * 59 + ServiceCode.GetHashCode();
            if (ServiceTitle != null) hashCode = hashCode * 59 + ServiceTitle.GetHashCode();

            hashCode = hashCode * 59 + RightsGivenAt.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // ServiceCode (string) maxLength
        if (ServiceCode is {Length: > 255})
            yield return new ValidationResult("Invalid value for ServiceCode, length must be less than 255.",
                new[] {"ServiceCode"});

        // ServiceCode (string) minLength
        if (ServiceCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for ServiceCode, length must be greater than 1.",
                new[] {"ServiceCode"});

        // ServiceTitle (string) maxLength
        if (ServiceTitle is {Length: > 255})
            yield return new ValidationResult("Invalid value for ServiceTitle, length must be less than 255.",
                new[] {"ServiceTitle"});

        // ServiceTitle (string) minLength
        if (ServiceTitle is {Length: < 1})
            yield return new ValidationResult("Invalid value for ServiceTitle, length must be greater than 1.",
                new[] {"ServiceTitle"});
    }
}