/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// SecurityServerAddress
/// </summary>
[DataContract(Name = "SecurityServerAddress")]
public class SecurityServerAddress : IEquatable<SecurityServerAddress>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServerAddress" /> class.
    /// </summary>
    [JsonConstructor]
    protected SecurityServerAddress()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServerAddress" /> class.
    /// </summary>
    /// <param name="address">Security server&#39;s IP address or DNS name (required).</param>
    public SecurityServerAddress(string address = default)
    {
        // to ensure "address" is required (not null)
        Address = address ?? throw new ArgumentNullException(nameof(address),
            "address is a required property for SecurityServerAddress and cannot be null");
    }

    /// <summary>
    /// Security server&#39;s IP address or DNS name
    /// </summary>
    /// <value>Security server&#39;s IP address or DNS name</value>
    [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = false)]
    public string Address { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SecurityServerAddress {\n");
        sb.Append("  Address: ").Append(Address).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as SecurityServerAddress);
    }

    /// <summary>
    /// Returns true if SecurityServerAddress instances are equal
    /// </summary>
    /// <param name="input">Instance of SecurityServerAddress to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SecurityServerAddress input)
    {
        if (input == null) return false;
        return
            Address == input.Address ||
            (Address != null &&
             Address.Equals(input.Address));
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Address != null) hashCode = hashCode * 59 + Address.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Address (string) maxLength
        if (Address is {Length: > 255})
            yield return new ValidationResult("Invalid value for Address, length must be less than 255.",
                new[] {"Address"});

        // Address (string) minLength
        if (Address is {Length: < 1})
            yield return new ValidationResult("Invalid value for Address, length must be greater than 1.",
                new[] {"Address"});
    }
}