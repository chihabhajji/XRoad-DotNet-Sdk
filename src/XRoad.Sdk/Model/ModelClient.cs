/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// x-road client
/// </summary>
[DataContract(Name = "_Client")]
public class ModelClient : IEquatable<ModelClient>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets ConnectionType
    /// </summary>
    [DataMember(Name = "connection_type", EmitDefaultValue = false)]
    public ConnectionType? ConnectionType { get; }

    /// <summary>
    /// Gets or Sets Status
    /// </summary>
    [DataMember(Name = "status", EmitDefaultValue = false)]
    public ClientStatus? Status { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="ModelClient" /> class.
    /// </summary>
    [JsonConstructor]
    protected ModelClient()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ModelClient" /> class.
    /// </summary>
    /// <param name="memberClass">Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters (required).</param>
    /// <param name="memberCode">Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters (required).</param>
    /// <param name="subsystemCode">Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters.</param>
    /// <param name="connectionType">connectionType.</param>
    /// <param name="status">status.</param>
    public ModelClient(string memberClass = default, string memberCode = default, string subsystemCode = default,
        ConnectionType? connectionType = default, ClientStatus? status = default)
    {
        // to ensure "memberClass" is required (not null)
        MemberClass = memberClass ?? throw new ArgumentNullException(nameof(memberClass),"memberClass is a required property for ModelClient and cannot be null");
        // to ensure "memberCode" is required (not null)
        MemberCode = memberCode ?? throw new ArgumentNullException(nameof(memberCode),"memberCode is a required property for ModelClient and cannot be null");
        SubsystemCode = subsystemCode;
        ConnectionType = connectionType;
        Status = status;
    }

    /// <summary>
    /// &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional). Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
    /// </summary>
    /// <value>&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional). Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public string Id { get; }

    /// <summary>
    /// Returns false as Id should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeId()
    {
        return false;
    }

    /// <summary>
    /// Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
    /// </summary>
    /// <value>Xroad instance id. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
    [DataMember(Name = "instance_id", EmitDefaultValue = false)]
    public string InstanceId { get; }

    /// <summary>
    /// Returns false as InstanceId should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeInstanceId()
    {
        return false;
    }

    /// <summary>
    /// Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
    /// </summary>
    /// <value>Member name. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
    [DataMember(Name = "member_name", EmitDefaultValue = false)]
    public string MemberName { get; }

    /// <summary>
    /// Returns false as MemberName should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeMemberName()
    {
        return false;
    }

    /// <summary>
    /// Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
    /// </summary>
    /// <value>Member class. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
    [DataMember(Name = "member_class", IsRequired = true, EmitDefaultValue = false)]
    public string MemberClass { get; }

    /// <summary>
    /// Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
    /// </summary>
    /// <value>Member code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
    [DataMember(Name = "member_code", IsRequired = true, EmitDefaultValue = false)]
    public string MemberCode { get; }

    /// <summary>
    /// Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters
    /// </summary>
    /// <value>Subsystem code. Cannot contain colons, semicolons, slashes, backslashes, percent signs or control characters</value>
    [DataMember(Name = "subsystem_code", EmitDefaultValue = false)]
    public string SubsystemCode { get; }

    /// <summary>
    /// if this client is the owner member of this security server
    /// </summary>
    /// <value>if this client is the owner member of this security server</value>
    [DataMember(Name = "owner", EmitDefaultValue = true)]
    public bool Owner { get; }

    /// <summary>
    /// Returns false as Owner should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeOwner()
    {
        return false;
    }

    /// <summary>
    /// if this client has a valid (registered and with good OCSP response) sign cert stored on this security server
    /// </summary>
    /// <value>if this client has a valid (registered and with good OCSP response) sign cert stored on this security server</value>
    [DataMember(Name = "has_valid_local_sign_cert", EmitDefaultValue = true)]
    public bool HasValidLocalSignCert { get; }

    /// <summary>
    /// Returns false as HasValidLocalSignCert should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeHasValidLocalSignCert()
    {
        return false;
    }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ModelClient {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
        sb.Append("  MemberName: ").Append(MemberName).Append("\n");
        sb.Append("  MemberClass: ").Append(MemberClass).Append("\n");
        sb.Append("  MemberCode: ").Append(MemberCode).Append("\n");
        sb.Append("  SubsystemCode: ").Append(SubsystemCode).Append("\n");
        sb.Append("  Owner: ").Append(Owner).Append("\n");
        sb.Append("  HasValidLocalSignCert: ").Append(HasValidLocalSignCert).Append("\n");
        sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ModelClient);
    }

    /// <summary>
    /// Returns true if ModelClient instances are equal
    /// </summary>
    /// <param name="input">Instance of ModelClient to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ModelClient input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                InstanceId == input.InstanceId ||
                (InstanceId != null &&
                 InstanceId.Equals(input.InstanceId))
            ) &&
            (
                MemberName == input.MemberName ||
                (MemberName != null &&
                 MemberName.Equals(input.MemberName))
            ) &&
            (
                MemberClass == input.MemberClass ||
                (MemberClass != null &&
                 MemberClass.Equals(input.MemberClass))
            ) &&
            (
                MemberCode == input.MemberCode ||
                (MemberCode != null &&
                 MemberCode.Equals(input.MemberCode))
            ) &&
            (
                SubsystemCode == input.SubsystemCode ||
                (SubsystemCode != null &&
                 SubsystemCode.Equals(input.SubsystemCode))
            ) &&
            (
                Owner == input.Owner ||
                Owner.Equals(input.Owner)
            ) &&
            (
                HasValidLocalSignCert == input.HasValidLocalSignCert ||
                HasValidLocalSignCert.Equals(input.HasValidLocalSignCert)
            ) &&
            (
                ConnectionType == input.ConnectionType ||
                ConnectionType.Equals(input.ConnectionType)
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (InstanceId != null) hashCode = hashCode * 59 + InstanceId.GetHashCode();
            if (MemberName != null) hashCode = hashCode * 59 + MemberName.GetHashCode();
            if (MemberClass != null) hashCode = hashCode * 59 + MemberClass.GetHashCode();
            if (MemberCode != null) hashCode = hashCode * 59 + MemberCode.GetHashCode();
            if (SubsystemCode != null) hashCode = hashCode * 59 + SubsystemCode.GetHashCode();
            hashCode = hashCode * 59 + Owner.GetHashCode();
            hashCode = hashCode * 59 + HasValidLocalSignCert.GetHashCode();
            hashCode = hashCode * 59 + ConnectionType.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Id (string) maxLength
        if (Id != null && Id.Length > 1023)
            yield return new ValidationResult("Invalid value for Id, length must be less than 1023.", new[] {"Id"});

        // Id (string) minLength
        if (Id != null && Id.Length < 1)
            yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new[] {"Id"});

        // InstanceId (string) maxLength
        if (InstanceId != null && InstanceId.Length > 255)
            yield return new ValidationResult("Invalid value for InstanceId, length must be less than 255.",
                new[] {"InstanceId"});

        // InstanceId (string) minLength
        if (InstanceId != null && InstanceId.Length < 1)
            yield return new ValidationResult("Invalid value for InstanceId, length must be greater than 1.",
                new[] {"InstanceId"});

        // MemberName (string) maxLength
        if (MemberName != null && MemberName.Length > 255)
            yield return new ValidationResult("Invalid value for MemberName, length must be less than 255.",
                new[] {"MemberName"});

        // MemberName (string) minLength
        if (MemberName != null && MemberName.Length < 1)
            yield return new ValidationResult("Invalid value for MemberName, length must be greater than 1.",
                new[] {"MemberName"});

        // MemberClass (string) maxLength
        if (MemberClass != null && MemberClass.Length > 255)
            yield return new ValidationResult("Invalid value for MemberClass, length must be less than 255.",
                new[] {"MemberClass"});

        // MemberClass (string) minLength
        if (MemberClass != null && MemberClass.Length < 1)
            yield return new ValidationResult("Invalid value for MemberClass, length must be greater than 1.",
                new[] {"MemberClass"});

        // MemberCode (string) maxLength
        if (MemberCode != null && MemberCode.Length > 255)
            yield return new ValidationResult("Invalid value for MemberCode, length must be less than 255.",
                new[] {"MemberCode"});

        // MemberCode (string) minLength
        if (MemberCode != null && MemberCode.Length < 1)
            yield return new ValidationResult("Invalid value for MemberCode, length must be greater than 1.",
                new[] {"MemberCode"});

        // SubsystemCode (string) maxLength
        if (SubsystemCode != null && SubsystemCode.Length > 255)
            yield return new ValidationResult("Invalid value for SubsystemCode, length must be less than 255.",
                new[] {"SubsystemCode"});

        // SubsystemCode (string) minLength
        if (SubsystemCode != null && SubsystemCode.Length < 1)
            yield return new ValidationResult("Invalid value for SubsystemCode, length must be greater than 1.",
                new[] {"SubsystemCode"});
    }
}