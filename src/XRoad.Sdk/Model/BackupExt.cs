/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// security server backup with extra information
/// </summary>
[DataContract(Name = "BackupExt")]
public class BackupExt : IEquatable<BackupExt>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="BackupExt" /> class.
    /// </summary>
    [JsonConstructor]
    protected BackupExt()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="BackupExt" /> class.
    /// </summary>
    /// <param name="backup">backup (required).</param>
    /// <param name="localConfPresent">localConfPresent (required).</param>
    public BackupExt(Backup backup = default, bool localConfPresent = default)
    {
        // to ensure "backup" is required (not null)
        if (backup == null)
            throw new ArgumentNullException(nameof(backup),"backup is a required property for BackupExt and cannot be null");
        Backup = backup;
        LocalConfPresent = localConfPresent;
    }

    /// <summary>
    /// Gets or Sets Backup
    /// </summary>
    [DataMember(Name = "backup", IsRequired = true, EmitDefaultValue = false)]
    public Backup Backup { get; }

    /// <summary>
    /// Gets or Sets LocalConfPresent
    /// </summary>
    [DataMember(Name = "local_conf_present", IsRequired = true, EmitDefaultValue = true)]
    public bool LocalConfPresent { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class BackupExt {\n");
        sb.Append("  Backup: ").Append(Backup).Append("\n");
        sb.Append("  LocalConfPresent: ").Append(LocalConfPresent).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as BackupExt);
    }

    /// <summary>
    /// Returns true if BackupExt instances are equal
    /// </summary>
    /// <param name="input">Instance of BackupExt to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(BackupExt input)
    {
        if (input == null) return false;
        return
            (
                Backup.Equals(input.Backup) ||
                (Backup != null &&
                 Backup.Equals(input.Backup))
            ) &&
            (
                LocalConfPresent == input.LocalConfPresent ||
                LocalConfPresent.Equals(input.LocalConfPresent)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Backup != null) hashCode = hashCode * 59 + Backup.GetHashCode();
            hashCode = hashCode * 59 + LocalConfPresent.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }
}