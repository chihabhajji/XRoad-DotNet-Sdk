/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// approved certificate authority information. Only for top CAs.
/// </summary>
[DataContract(Name = "CertificateAuthority")]
public class CertificateAuthority : IEquatable<CertificateAuthority>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets OcspResponse
    /// </summary>
    [DataMember(Name = "ocsp_response", IsRequired = true, EmitDefaultValue = false)]
    public CertificateAuthorityOcspResponse OcspResponse { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="CertificateAuthority" /> class.
    /// </summary>
    [JsonConstructor]
    protected CertificateAuthority()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="CertificateAuthority" /> class.
    /// </summary>
    /// <param name="name">name of the CA, as defined in global conf. Used also as an identifier (required).</param>
    /// <param name="subjectDistinguishedName">subject distinguished name (required).</param>
    /// <param name="issuerDistinguishedName">issuer distinguished name (required).</param>
    /// <param name="ocspResponse">ocspResponse (required).</param>
    /// <param name="notAfter">certificate authority expires at (required).</param>
    /// <param name="topCa">if the certificate authority is top CA (instead of intermediate) (required).</param>
    /// <param name="path">encoded path string from this CA to top CA (required).</param>
    /// <param name="authenticationOnly">if certificate authority is limited for authentication use only (required).</param>
    public CertificateAuthority(string name = default, string subjectDistinguishedName = default,
        string issuerDistinguishedName = default, CertificateAuthorityOcspResponse ocspResponse = default,
        DateTime notAfter = default, bool topCa = default, string path = default, bool authenticationOnly = default)
    {
        // to ensure "name" is required (not null)
        Name = name ?? throw new ArgumentNullException(nameof(name),"name is a required property for CertificateAuthority and cannot be null");
        // to ensure "subjectDistinguishedName" is required (not null)
        SubjectDistinguishedName = subjectDistinguishedName ?? throw new ArgumentNullException(
            nameof(subjectDistinguishedName),
            "subjectDistinguishedName is a required property for CertificateAuthority and cannot be null");
        // to ensure "issuerDistinguishedName" is required (not null)
        IssuerDistinguishedName = issuerDistinguishedName ?? throw new ArgumentNullException(
            nameof(issuerDistinguishedName),
            "issuerDistinguishedName is a required property for CertificateAuthority and cannot be null");
        OcspResponse = ocspResponse;
        NotAfter = notAfter;
        TopCa = topCa;
        // to ensure "path" is required (not null)
        Path = path ?? throw new ArgumentNullException(nameof(path),"path is a required property for CertificateAuthority and cannot be null");
        AuthenticationOnly = authenticationOnly;
    }

    /// <summary>
    /// name of the CA, as defined in global conf. Used also as an identifier
    /// </summary>
    /// <value>name of the CA, as defined in global conf. Used also as an identifier</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
    public string Name { get; }

    /// <summary>
    /// subject distinguished name
    /// </summary>
    /// <value>subject distinguished name</value>
    [DataMember(Name = "subject_distinguished_name", IsRequired = true, EmitDefaultValue = false)]
    public string SubjectDistinguishedName { get; }

    /// <summary>
    /// issuer distinguished name
    /// </summary>
    /// <value>issuer distinguished name</value>
    [DataMember(Name = "issuer_distinguished_name", IsRequired = true, EmitDefaultValue = false)]
    public string IssuerDistinguishedName { get; }

    /// <summary>
    /// certificate authority expires at
    /// </summary>
    /// <value>certificate authority expires at</value>
    [DataMember(Name = "not_after", IsRequired = true, EmitDefaultValue = false)]
    public DateTime NotAfter { get; }

    /// <summary>
    /// if the certificate authority is top CA (instead of intermediate)
    /// </summary>
    /// <value>if the certificate authority is top CA (instead of intermediate)</value>
    [DataMember(Name = "top_ca", IsRequired = true, EmitDefaultValue = true)]
    public bool TopCa { get; }

    /// <summary>
    /// encoded path string from this CA to top CA
    /// </summary>
    /// <value>encoded path string from this CA to top CA</value>
    [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
    public string Path { get; }

    /// <summary>
    /// if certificate authority is limited for authentication use only
    /// </summary>
    /// <value>if certificate authority is limited for authentication use only</value>
    [DataMember(Name = "authentication_only", IsRequired = true, EmitDefaultValue = true)]
    public bool AuthenticationOnly { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CertificateAuthority {\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  SubjectDistinguishedName: ").Append(SubjectDistinguishedName).Append("\n");
        sb.Append("  IssuerDistinguishedName: ").Append(IssuerDistinguishedName).Append("\n");
        sb.Append("  OcspResponse: ").Append(OcspResponse).Append("\n");
        sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
        sb.Append("  TopCa: ").Append(TopCa).Append("\n");
        sb.Append("  Path: ").Append(Path).Append("\n");
        sb.Append("  AuthenticationOnly: ").Append(AuthenticationOnly).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as CertificateAuthority);
    }

    /// <summary>
    /// Returns true if CertificateAuthority instances are equal
    /// </summary>
    /// <param name="input">Instance of CertificateAuthority to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(CertificateAuthority input)
    {
        if (input == null) return false;
        return
            (
                Name == input.Name ||
                (Name != null &&
                 Name.Equals(input.Name))
            ) &&
            (
                SubjectDistinguishedName == input.SubjectDistinguishedName ||
                (SubjectDistinguishedName != null &&
                 SubjectDistinguishedName.Equals(input.SubjectDistinguishedName))
            ) &&
            (
                IssuerDistinguishedName == input.IssuerDistinguishedName ||
                (IssuerDistinguishedName != null &&
                 IssuerDistinguishedName.Equals(input.IssuerDistinguishedName))
            ) &&
            (
                OcspResponse == input.OcspResponse ||
                OcspResponse.Equals(input.OcspResponse)
            ) &&
            (
                NotAfter == input.NotAfter ||
                NotAfter.Equals(input.NotAfter)
            ) &&
            (
                TopCa == input.TopCa ||
                TopCa.Equals(input.TopCa)
            ) &&
            (
                Path == input.Path ||
                (Path != null &&
                 Path.Equals(input.Path))
            ) &&
            (
                AuthenticationOnly == input.AuthenticationOnly ||
                AuthenticationOnly.Equals(input.AuthenticationOnly)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            if (SubjectDistinguishedName != null) hashCode = hashCode * 59 + SubjectDistinguishedName.GetHashCode();
            if (IssuerDistinguishedName != null) hashCode = hashCode * 59 + IssuerDistinguishedName.GetHashCode();
            hashCode = hashCode * 59 + OcspResponse.GetHashCode();
            hashCode = hashCode * 59 + NotAfter.GetHashCode();
            hashCode = hashCode * 59 + TopCa.GetHashCode();
            if (Path != null) hashCode = hashCode * 59 + Path.GetHashCode();
            hashCode = hashCode * 59 + AuthenticationOnly.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Name (string) maxLength
        if (Name is {Length: > 255})
            yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] {"Name"});

        // Name (string) minLength
        if (Name is {Length: < 1})
            yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new[] {"Name"});

        // SubjectDistinguishedName (string) maxLength
        if (SubjectDistinguishedName is {Length: > 1024})
            yield return new ValidationResult(
                "Invalid value for SubjectDistinguishedName, length must be less than 1024.",
                new[] {"SubjectDistinguishedName"});

        // SubjectDistinguishedName (string) minLength
        if (SubjectDistinguishedName is {Length: < 1})
            yield return new ValidationResult(
                "Invalid value for SubjectDistinguishedName, length must be greater than 1.",
                new[] {"SubjectDistinguishedName"});

        // IssuerDistinguishedName (string) maxLength
        if (IssuerDistinguishedName is {Length: > 1024})
            yield return new ValidationResult(
                "Invalid value for IssuerDistinguishedName, length must be less than 1024.",
                new[] {"IssuerDistinguishedName"});

        // IssuerDistinguishedName (string) minLength
        if (IssuerDistinguishedName is {Length: < 1})
            yield return new ValidationResult(
                "Invalid value for IssuerDistinguishedName, length must be greater than 1.",
                new[] {"IssuerDistinguishedName"});
        // TODO
        // // NotAfter (DateTime) maxLength
        // if (NotAfter != null && NotAfter.Length > 24)
        // {
        //     yield return new ValidationResult("Invalid value for NotAfter, length must be less than 24.", new [] { "NotAfter" });
        // }
        //
        // // NotAfter (DateTime) minLength
        // if (NotAfter != null && NotAfter.Length < 24)
        // {
        //     yield return new ValidationResult("Invalid value for NotAfter, length must be greater than 24.", new [] { "NotAfter" });
        // }

        // Path (string) minLength
        if (Path is {Length: < 1})
            yield return new ValidationResult("Invalid value for Path, length must be greater than 1.", new[] {"Path"});
    }
}