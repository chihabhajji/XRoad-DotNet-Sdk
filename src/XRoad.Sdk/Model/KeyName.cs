/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// KeyName
/// </summary>
[DataContract(Name = "KeyName")]
public class KeyName : IEquatable<KeyName>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="KeyName" /> class.
    /// </summary>
    [JsonConstructor]
    protected KeyName()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="KeyName" /> class.
    /// </summary>
    /// <param name="name">Friendly name of a key (required).</param>
    public KeyName(string name = default)
    {
        // to ensure "name" is required (not null)
        Name = name ?? throw new ArgumentNullException(nameof(name),"name is a required property for KeyName and cannot be null");
    }

    /// <summary>
    /// Friendly name of a key
    /// </summary>
    /// <value>Friendly name of a key</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
    public string Name { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class KeyName {\n");
        sb.Append("  Name: ").Append(Name).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as KeyName);
    }

    /// <summary>
    /// Returns true if KeyName instances are equal
    /// </summary>
    /// <param name="input">Instance of KeyName to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(KeyName input)
    {
        if (input == null) return false;
        return
            Name == input.Name ||
            (Name != null &&
             Name.Equals(input.Name));
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Name != null) hashCode = hashCode * 59 + Name.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Name (string) maxLength
        if (Name is {Length: > 255})
            yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new[] {"Name"});

        // Name (string) minLength
        if (Name is {Length: < 1})
            yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new[] {"Name"});
    }
}