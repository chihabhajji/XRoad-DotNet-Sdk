/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// WSDL/OPENAPI3/REST service
/// </summary>
[DataContract(Name = "ServiceDescription")]
public sealed class ServiceDescription : IEquatable<ServiceDescription>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets Type
    /// </summary>
    [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
    public ServiceType Type { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceDescription" /> class.
    /// </summary>
    [JsonConstructor]
    private ServiceDescription()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceDescription" /> class.
    /// </summary>
    /// <param name="id">unique identifier (required).</param>
    /// <param name="url">service url (required).</param>
    /// <param name="type">type (required).</param>
    /// <param name="disabled">service disabled (required).</param>
    /// <param name="disabledNotice">disabled notice (required).</param>
    /// <param name="refreshedAt">time for service refresh (required).</param>
    /// <param name="services">service description services (required).</param>
    /// <param name="clientId">&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional) (required).</param>
    public ServiceDescription(string id = default, string url = default, ServiceType type = default,
        bool disabled = default, string disabledNotice = default, DateTime refreshedAt = default,
        List<Service> services = default, string clientId = default)
    {
        // to ensure "id" is required (not null)
        Id = id ?? throw new ArgumentNullException(nameof(id),
            "id is a required property for ServiceDescription and cannot be null");
        // to ensure "url" is required (not null)
        Url = url ?? throw new ArgumentNullException(nameof(url),
            "url is a required property for ServiceDescription and cannot be null");
        Type = type;
        Disabled = disabled;
        // to ensure "disabledNotice" is required (not null)
        DisabledNotice = disabledNotice ?? throw new ArgumentNullException(nameof(disabledNotice),
            "disabledNotice is a required property for ServiceDescription and cannot be null");
        RefreshedAt = refreshedAt;
        // to ensure "services" is required (not null)
        Services = services ?? throw new ArgumentNullException(nameof(services),
            "services is a required property for ServiceDescription and cannot be null");
        // to ensure "clientId" is required (not null)
        ClientId = clientId ?? throw new ArgumentNullException(nameof(clientId),
            "clientId is a required property for ServiceDescription and cannot be null");
    }

    /// <summary>
    /// unique identifier
    /// </summary>
    /// <value>unique identifier</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
    public string Id { get; }

    /// <summary>
    /// service url
    /// </summary>
    /// <value>service url</value>
    [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
    public string Url { get; }

    /// <summary>
    /// service disabled
    /// </summary>
    /// <value>service disabled</value>
    [DataMember(Name = "disabled", IsRequired = true, EmitDefaultValue = true)]
    public bool Disabled { get; }

    /// <summary>
    /// disabled notice
    /// </summary>
    /// <value>disabled notice</value>
    [DataMember(Name = "disabled_notice", IsRequired = true, EmitDefaultValue = false)]
    public string DisabledNotice { get; }

    /// <summary>
    /// time for service refresh
    /// </summary>
    /// <value>time for service refresh</value>
    [DataMember(Name = "refreshed_at", IsRequired = true, EmitDefaultValue = false)]
    public DateTime RefreshedAt { get; }

    /// <summary>
    /// service description services
    /// </summary>
    /// <value>service description services</value>
    [DataMember(Name = "services", IsRequired = true, EmitDefaultValue = false)]
    public List<Service> Services { get; }

    /// <summary>
    /// &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional)
    /// </summary>
    /// <value>&lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;:&lt;subsystem&gt;(optional)</value>
    [DataMember(Name = "client_id", IsRequired = true, EmitDefaultValue = false)]
    public string ClientId { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ServiceDescription {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Url: ").Append(Url).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Disabled: ").Append(Disabled).Append("\n");
        sb.Append("  DisabledNotice: ").Append(DisabledNotice).Append("\n");
        sb.Append("  RefreshedAt: ").Append(RefreshedAt).Append("\n");
        sb.Append("  Services: ").Append(Services).Append("\n");
        sb.Append("  ClientId: ").Append(ClientId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ServiceDescription);
    }

    /// <summary>
    /// Returns true if ServiceDescription instances are equal
    /// </summary>
    /// <param name="input">Instance of ServiceDescription to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ServiceDescription input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                Url == input.Url ||
                (Url != null &&
                 Url.Equals(input.Url))
            ) &&
            (
                Type == input.Type ||
                Type.Equals(input.Type)
            ) &&
            (
                Disabled == input.Disabled ||
                Disabled.Equals(input.Disabled)
            ) &&
            (
                DisabledNotice == input.DisabledNotice ||
                (DisabledNotice != null &&
                 DisabledNotice.Equals(input.DisabledNotice))
            ) &&
            (
                RefreshedAt == input.RefreshedAt ||
                RefreshedAt.Equals(input.RefreshedAt)
            ) &&
            (
                Services == input.Services ||
                (Services != null &&
                 input.Services != null &&
                 Services.SequenceEqual(input.Services))
            ) &&
            (
                ClientId == input.ClientId ||
                (ClientId != null &&
                 ClientId.Equals(input.ClientId))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (Url != null) hashCode = hashCode * 59 + Url.GetHashCode();
            hashCode = hashCode * 59 + Type.GetHashCode();
            hashCode = hashCode * 59 + Disabled.GetHashCode();
            if (DisabledNotice != null) hashCode = hashCode * 59 + DisabledNotice.GetHashCode();

            hashCode = hashCode * 59 + RefreshedAt.GetHashCode();
            if (Services != null) hashCode = hashCode * 59 + Services.GetHashCode();
            if (ClientId != null) hashCode = hashCode * 59 + ClientId.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Url (string) maxLength
        if (Url is {Length: > 255})
            yield return new ValidationResult("Invalid value for Url, length must be less than 255.",
                new[] {"Url"});
        // Url (string) minLength
        if (Url is {Length: < 1})
            yield return new ValidationResult("Invalid value for Url, length must be greater than 1.",
                new[] {"Url"});
        // DisabledNotice (string) maxLength
        if (DisabledNotice is {Length: > 255})
            yield return new ValidationResult("Invalid value for DisabledNotice, length must be less than 255.",
                new[] {"DisabledNotice"});
        // TODO 
        // // RefreshedAt (DateTime) maxLength
        // if (RefreshedAt != null && RefreshedAt.Length > 24)
        // {
        //     yield return new ValidationResult("Invalid value for RefreshedAt, length must be less than 24.", new [] { "RefreshedAt" });
        // }
        //
        // // RefreshedAt (DateTime) minLength
        // if (RefreshedAt != null && RefreshedAt.Length < 24)
        // {
        //     yield return new ValidationResult("Invalid value for RefreshedAt, length must be greater than 24.", new [] { "RefreshedAt" });
        // }

        // ClientId (string) maxLength
        if (ClientId is {Length: > 255})
            yield return new ValidationResult("Invalid value for ClientId, length must be less than 255.",
                new[] {"ClientId"});

        // ClientId (string) minLength
        if (ClientId is {Length: < 1})
            yield return new ValidationResult("Invalid value for ClientId, length must be greater than 1.",
                new[] {"ClientId"});
    }
}