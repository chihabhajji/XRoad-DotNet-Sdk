/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// object that contains a code identifier and possibly collection of associated metadata or validation errors. Used to relay error and warning information.
/// </summary>
[DataContract(Name = "CodeWithDetails")]
public class CodeWithDetails : IEquatable<CodeWithDetails>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="CodeWithDetails" /> class.
    /// </summary>
    [JsonConstructor]
    protected CodeWithDetails()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="CodeWithDetails" /> class.
    /// </summary>
    /// <param name="code">identifier of the item (for example errorcode) (required).</param>
    /// <param name="metadata">array containing metadata associated with the item. For example names of services were attempted to add, but failed.</param>
    /// <param name="validationErrors">A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors.</param>
    public CodeWithDetails(string code = default, List<string> metadata = default,
        Dictionary<string, List<string>> validationErrors = default)
    {
        // to ensure "code" is required (not null)
        Code = code ?? throw new ArgumentNullException(nameof(code),"code is a required property for CodeWithDetails and cannot be null");
        Metadata = metadata;
        ValidationErrors = validationErrors;
    }

    /// <summary>
    /// identifier of the item (for example errorcode)
    /// </summary>
    /// <value>identifier of the item (for example errorcode)</value>
    [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
    public string Code { get; }

    /// <summary>
    /// array containing metadata associated with the item. For example names of services were attempted to add, but failed
    /// </summary>
    /// <value>array containing metadata associated with the item. For example names of services were attempted to add, but failed</value>
    [DataMember(Name = "metadata", EmitDefaultValue = false)]
    public List<string> Metadata { get; }

    /// <summary>
    /// A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors
    /// </summary>
    /// <value>A dictionary object that contains validation errors bound to their respected fields. The key represents the field where the validation error has happened and the value is a list of validation errors</value>
    [DataMember(Name = "validation_errors", EmitDefaultValue = false)]
    public Dictionary<string, List<string>> ValidationErrors { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CodeWithDetails {\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("  Metadata: ").Append(Metadata).Append("\n");
        sb.Append("  ValidationErrors: ").Append(ValidationErrors).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as CodeWithDetails);
    }

    /// <summary>
    /// Returns true if CodeWithDetails instances are equal
    /// </summary>
    /// <param name="input">Instance of CodeWithDetails to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(CodeWithDetails input)
    {
        if (input == null) return false;
        return
            (
                Code == input.Code ||
                (Code != null &&
                 Code.Equals(input.Code))
            ) &&
            (
                Metadata == input.Metadata ||
                (Metadata != null &&
                 input.Metadata != null &&
                 Metadata.SequenceEqual(input.Metadata))
            ) &&
            (
                ValidationErrors == input.ValidationErrors ||
                (ValidationErrors != null &&
                 input.ValidationErrors != null &&
                 ValidationErrors.SequenceEqual(input.ValidationErrors))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Code != null) hashCode = hashCode * 59 + Code.GetHashCode();
            if (Metadata != null) hashCode = hashCode * 59 + Metadata.GetHashCode();
            if (ValidationErrors != null) hashCode = hashCode * 59 + ValidationErrors.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }
}