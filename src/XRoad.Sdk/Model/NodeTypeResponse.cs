/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// Response object containing the node type of the Security Server
/// </summary>
[DataContract(Name = "NodeTypeResponse")]
public class NodeTypeResponse : IEquatable<NodeTypeResponse>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets NodeType
    /// </summary>
    [DataMember(Name = "node_type", IsRequired = true, EmitDefaultValue = false)]
    public NodeType NodeType { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="NodeTypeResponse" /> class.
    /// </summary>
    [JsonConstructor]
    protected NodeTypeResponse()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="NodeTypeResponse" /> class.
    /// </summary>
    /// <param name="nodeType">nodeType (required).</param>
    public NodeTypeResponse(NodeType nodeType = default)
    {
        NodeType = nodeType;
    }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class NodeTypeResponse {\n");
        sb.Append("  NodeType: ").Append(NodeType).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as NodeTypeResponse);
    }

    /// <summary>
    /// Returns true if NodeTypeResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of NodeTypeResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(NodeTypeResponse input)
    {
        if (input == null) return false;
        return
            NodeType == input.NodeType ||
            NodeType.Equals(input.NodeType);
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + NodeType.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }
}