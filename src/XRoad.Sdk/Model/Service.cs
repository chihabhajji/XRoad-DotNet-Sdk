/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// service for the service description
/// </summary>
[DataContract(Name = "Service")]
public class Service : IEquatable<Service>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Service" /> class.
    /// </summary>
    [JsonConstructor]
    protected Service()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Service" /> class.
    /// </summary>
    /// <param name="id">encoded service id, including client id (required).</param>
    /// <param name="fullServiceCode">encoded service code and version.</param>
    /// <param name="serviceCode">encoded service code (required).</param>
    /// <param name="timeout">service time out value (required).</param>
    /// <param name="sslAuth">service ssl auth.</param>
    /// <param name="subjectsCount">count of acl subjects.</param>
    /// <param name="url">service url (required).</param>
    /// <param name="endpoints">list of endpoints linked to this service.</param>
    public Service(string id = default, string fullServiceCode = default, string serviceCode = default,
        int timeout = default, bool sslAuth = default, int subjectsCount = default, string url = default,
        List<Endpoint> endpoints = default)
    {
        // to ensure "id" is required (not null)
        Id = id ?? throw new ArgumentNullException(nameof(id),
            "id is a required property for Service and cannot be null");
        // to ensure "serviceCode" is required (not null)
        ServiceCode = serviceCode ?? throw new ArgumentNullException(nameof(serviceCode),
            "serviceCode is a required property for Service and cannot be null");
        Timeout = timeout;
        // to ensure "url" is required (not null)
        Url = url ??
              throw new ArgumentNullException(nameof(url), "url is a required property for Service and cannot be null");
        FullServiceCode = fullServiceCode;
        SslAuth = sslAuth;
        SubjectsCount = subjectsCount;
        Endpoints = endpoints;
    }

    /// <summary>
    /// encoded service id, including client id
    /// </summary>
    /// <value>encoded service id, including client id</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
    public string Id { get; }

    /// <summary>
    /// encoded service code and version
    /// </summary>
    /// <value>encoded service code and version</value>
    [DataMember(Name = "full_service_code", EmitDefaultValue = false)]
    public string FullServiceCode { get; }

    /// <summary>
    /// encoded service code
    /// </summary>
    /// <value>encoded service code</value>
    [DataMember(Name = "service_code", IsRequired = true, EmitDefaultValue = false)]
    public string ServiceCode { get; }

    /// <summary>
    /// service time out value
    /// </summary>
    /// <value>service time out value</value>
    [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = false)]
    public int Timeout { get; }

    /// <summary>
    /// service title
    /// </summary>
    /// <value>service title</value>
    [DataMember(Name = "title", EmitDefaultValue = false)]
    public string Title { get; }

    /// <summary>
    /// Returns false as Title should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeTitle()
    {
        return false;
    }

    /// <summary>
    /// service ssl auth
    /// </summary>
    /// <value>service ssl auth</value>
    [DataMember(Name = "ssl_auth", EmitDefaultValue = true)]
    public bool SslAuth { get; }

    /// <summary>
    /// count of acl subjects
    /// </summary>
    /// <value>count of acl subjects</value>
    [DataMember(Name = "subjects_count", EmitDefaultValue = false)]
    public int SubjectsCount { get; }

    /// <summary>
    /// service url
    /// </summary>
    /// <value>service url</value>
    [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
    public string Url { get; }

    /// <summary>
    /// list of endpoints linked to this service
    /// </summary>
    /// <value>list of endpoints linked to this service</value>
    [DataMember(Name = "endpoints", EmitDefaultValue = false)]
    public List<Endpoint> Endpoints { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Service {\n");
        sb.Append("  Id: ").Append(Id).Append('\n');
        sb.Append("  FullServiceCode: ").Append(FullServiceCode).Append('\n');
        sb.Append("  ServiceCode: ").Append(ServiceCode).Append('\n');
        sb.Append("  Timeout: ").Append(Timeout).Append('\n');
        sb.Append("  Title: ").Append(Title).Append('\n');
        sb.Append("  SslAuth: ").Append(SslAuth).Append('\n');
        sb.Append("  SubjectsCount: ").Append(SubjectsCount).Append('\n');
        sb.Append("  Url: ").Append(Url).Append('\n');
        sb.Append("  Endpoints: ").Append(Endpoints).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as Service);
    }

    /// <summary>
    /// Returns true if Service instances are equal
    /// </summary>
    /// <param name="input">Instance of Service to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Service input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                FullServiceCode == input.FullServiceCode ||
                (FullServiceCode != null &&
                 FullServiceCode.Equals(input.FullServiceCode))
            ) &&
            (
                ServiceCode == input.ServiceCode ||
                (ServiceCode != null &&
                 ServiceCode.Equals(input.ServiceCode))
            ) &&
            (
                Timeout == input.Timeout ||
                Timeout.Equals(input.Timeout)
            ) &&
            (
                Title == input.Title ||
                (Title != null &&
                 Title.Equals(input.Title))
            ) &&
            (
                SslAuth == input.SslAuth ||
                SslAuth.Equals(input.SslAuth)
            ) &&
            (
                SubjectsCount == input.SubjectsCount ||
                SubjectsCount.Equals(input.SubjectsCount)
            ) &&
            (
                Url == input.Url ||
                (Url != null &&
                 Url.Equals(input.Url))
            ) &&
            (
                Endpoints == input.Endpoints ||
                (Endpoints != null &&
                 input.Endpoints != null &&
                 Endpoints.SequenceEqual(input.Endpoints))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (FullServiceCode != null) hashCode = hashCode * 59 + FullServiceCode.GetHashCode();
            if (ServiceCode != null) hashCode = hashCode * 59 + ServiceCode.GetHashCode();
            hashCode = hashCode * 59 + Timeout.GetHashCode();
            if (Title != null) hashCode = hashCode * 59 + Title.GetHashCode();
            hashCode = hashCode * 59 + SslAuth.GetHashCode();
            hashCode = hashCode * 59 + SubjectsCount.GetHashCode();
            if (Url != null) hashCode = hashCode * 59 + Url.GetHashCode();
            if (Endpoints != null) hashCode = hashCode * 59 + Endpoints.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Id (string) maxLength
        if (Id is {Length: > 1279})
            yield return new ValidationResult("Invalid value for Id, length must be less than 1279.", new[] {"Id"});

        // Id (string) minLength
        if (Id is {Length: < 1})
            yield return new ValidationResult("Invalid value for Id, length must be greater than 1.", new[] {"Id"});

        // FullServiceCode (string) maxLength
        if (FullServiceCode is {Length: > 511})
            yield return new ValidationResult("Invalid value for FullServiceCode, length must be less than 511.",
                new[] {"FullServiceCode"});

        // FullServiceCode (string) minLength
        if (FullServiceCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for FullServiceCode, length must be greater than 1.",
                new[] {"FullServiceCode"});

        // ServiceCode (string) maxLength
        if (ServiceCode is {Length: > 255})
            yield return new ValidationResult("Invalid value for ServiceCode, length must be less than 255.",
                new[] {"ServiceCode"});

        // ServiceCode (string) minLength
        if (ServiceCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for ServiceCode, length must be greater than 1.",
                new[] {"ServiceCode"});

        // Timeout (int) maximum
        if (Timeout > 1000)
            yield return new ValidationResult("Invalid value for Timeout, must be a value less than or equal to 1000.",
                new[] {"Timeout"});

        // Timeout (int) minimum
        if (Timeout < 0)
            yield return new ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 0.",
                new[] {"Timeout"});

        // Title (string) maxLength
        if (Title is {Length: > 255})
            yield return new ValidationResult("Invalid value for Title, length must be less than 255.",
                new[] {"Title"});

        // Title (string) minLength
        if (Title is {Length: < 1})
            yield return new ValidationResult("Invalid value for Title, length must be greater than 1.",
                new[] {"Title"});

        // SubjectsCount (int) maximum
        if (SubjectsCount > 100000)
            yield return new ValidationResult(
                "Invalid value for SubjectsCount, must be a value less than or equal to 100000.",
                new[] {"SubjectsCount"});

        // SubjectsCount (int) minimum
        if (SubjectsCount < 0)
            yield return new ValidationResult(
                "Invalid value for SubjectsCount, must be a value greater than or equal to 0.",
                new[] {"SubjectsCount"});

        // Url (string) maxLength
        if (Url is {Length: > 255})
            yield return new ValidationResult("Invalid value for Url, length must be less than 255.", new[] {"Url"});

        // Url (string) minLength
        if (Url is {Length: < 1})
            yield return new ValidationResult("Invalid value for Url, length must be greater than 1.", new[] {"Url"});
    }
}