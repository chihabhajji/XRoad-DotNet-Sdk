/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// key-value pair of strings
/// </summary>
[DataContract(Name = "KeyValuePair")]
public class KeyValuePair : IEquatable<KeyValuePair>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="KeyValuePair" /> class.
    /// </summary>
    [JsonConstructor]
    protected KeyValuePair()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="KeyValuePair" /> class.
    /// </summary>
    /// <param name="key">key (required).</param>
    /// <param name="value">value (required).</param>
    public KeyValuePair(string key = default, string value = default)
    {
        // to ensure "key" is required (not null)
        Key = key ?? throw new ArgumentNullException(nameof(key),"key is a required property for KeyValuePair and cannot be null");
        // to ensure "value" is required (not null)
        Value = value ?? throw new ArgumentNullException(nameof(value),"value is a required property for KeyValuePair and cannot be null");
    }

    /// <summary>
    /// key
    /// </summary>
    /// <value>key</value>
    [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = false)]
    public string Key { get; }

    /// <summary>
    /// value
    /// </summary>
    /// <value>value</value>
    [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = false)]
    public string Value { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class KeyValuePair {\n");
        sb.Append("  Key: ").Append(Key).Append('\n');
        sb.Append("  Value: ").Append(Value).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as KeyValuePair);
    }

    /// <summary>
    /// Returns true if KeyValuePair instances are equal
    /// </summary>
    /// <param name="input">Instance of KeyValuePair to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(KeyValuePair input)
    {
        if (input == null) return false;
        return
            (
                Key == input.Key ||
                (Key != null &&
                 Key.Equals(input.Key))
            ) &&
            (
                Value == input.Value ||
                (Value != null &&
                 Value.Equals(input.Value))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Key != null) hashCode = hashCode * 59 + Key.GetHashCode();
            if (Value != null) hashCode = hashCode * 59 + Value.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }
}