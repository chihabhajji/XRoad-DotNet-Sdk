/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// Certificate that is stored in a Token (auth or sign cert). Also includes the possible actions that can be done to this object, e.g DELETE (only for cert related operations and does not consider user authorization).
/// </summary>
[DataContract(Name = "TokenCertificate")]
public class TokenCertificate : IEquatable<TokenCertificate>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets OcspStatus
    /// </summary>
    [DataMember(Name = "ocsp_status", IsRequired = true, EmitDefaultValue = false)]
    public CertificateOcspStatus OcspStatus { get; }

    /// <summary>
    /// Gets or Sets Status
    /// </summary>
    [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
    public CertificateStatus Status { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificate" /> class.
    /// </summary>
    [JsonConstructor]
    protected TokenCertificate()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificate" /> class.
    /// </summary>
    /// <param name="ocspStatus">ocspStatus (required).</param>
    /// <param name="active">if the certificate is active (required).</param>
    /// <param name="savedToConfiguration">if the certificate is saved to configuration (required).</param>
    /// <param name="certificateDetails">certificateDetails (required).</param>
    /// <param name="status">status (required).</param>
    /// <param name="possibleActions">array containing the possible actions that can be done for this item.</param>
    public TokenCertificate(CertificateOcspStatus ocspStatus = default, bool active = default,
        bool savedToConfiguration = default, CertificateDetails certificateDetails = default,
        CertificateStatus status = default, List<PossibleAction> possibleActions = default)
    {
        OcspStatus = ocspStatus;
        Active = active;
        SavedToConfiguration = savedToConfiguration;
        // to ensure "certificateDetails" is required (not null)
        CertificateDetails = certificateDetails ?? throw new ArgumentNullException(nameof(certificateDetails),
            "certificateDetails is a required property for TokenCertificate and cannot be null");
        Status = status;
        PossibleActions = possibleActions;
    }

    /// <summary>
    /// client id of the owner member, &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;
    /// </summary>
    /// <value>client id of the owner member, &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;</value>
    [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = false)]
    public string OwnerId { get; }

    /// <summary>
    /// Returns false as OwnerId should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public static bool ShouldSerializeOwnerId()
    {
        return false;
    }

    /// <summary>
    /// if the certificate is active
    /// </summary>
    /// <value>if the certificate is active</value>
    [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
    public bool Active { get; }

    /// <summary>
    /// if the certificate is saved to configuration
    /// </summary>
    /// <value>if the certificate is saved to configuration</value>
    [DataMember(Name = "saved_to_configuration", IsRequired = true, EmitDefaultValue = true)]
    public bool SavedToConfiguration { get; }

    /// <summary>
    /// Gets or Sets CertificateDetails
    /// </summary>
    [DataMember(Name = "certificate_details", IsRequired = true, EmitDefaultValue = false)]
    public CertificateDetails CertificateDetails { get; }

    /// <summary>
    /// array containing the possible actions that can be done for this item
    /// </summary>
    /// <value>array containing the possible actions that can be done for this item</value>
    [DataMember(Name = "possible_actions", EmitDefaultValue = false)]
    public List<PossibleAction> PossibleActions { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TokenCertificate {\n");
        sb.Append("  OcspStatus: ").Append(OcspStatus).Append("\n");
        sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
        sb.Append("  Active: ").Append(Active).Append("\n");
        sb.Append("  SavedToConfiguration: ").Append(SavedToConfiguration).Append("\n");
        sb.Append("  CertificateDetails: ").Append(CertificateDetails).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  PossibleActions: ").Append(PossibleActions).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TokenCertificate);
    }

    /// <summary>
    /// Returns true if TokenCertificate instances are equal
    /// </summary>
    /// <param name="input">Instance of TokenCertificate to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TokenCertificate input)
    {
        if (input == null) return false;
        return
            (
                OcspStatus == input.OcspStatus ||
                OcspStatus.Equals(input.OcspStatus)
            ) &&
            (
                OwnerId == input.OwnerId ||
                (OwnerId != null &&
                 OwnerId.Equals(input.OwnerId))
            ) &&
            (
                Active == input.Active ||
                Active.Equals(input.Active)
            ) &&
            (
                SavedToConfiguration == input.SavedToConfiguration ||
                SavedToConfiguration.Equals(input.SavedToConfiguration)
            ) &&
            (
                CertificateDetails.Equals(input.CertificateDetails) ||
                (CertificateDetails != null &&
                 CertificateDetails.Equals(input.CertificateDetails))
            ) &&
            (
                Status == input.Status ||
                Status.Equals(input.Status)
            ) &&
            (
                PossibleActions == input.PossibleActions ||
                (PossibleActions != null &&
                 input.PossibleActions != null &&
                 PossibleActions.SequenceEqual(input.PossibleActions))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + OcspStatus.GetHashCode();
            if (OwnerId != null) hashCode = hashCode * 59 + OwnerId.GetHashCode();
            hashCode = hashCode * 59 + Active.GetHashCode();
            hashCode = hashCode * 59 + SavedToConfiguration.GetHashCode();
            if (CertificateDetails != null) hashCode = hashCode * 59 + CertificateDetails.GetHashCode();
            hashCode = hashCode * 59 + Status.GetHashCode();
            if (PossibleActions != null) hashCode = hashCode * 59 + PossibleActions.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // OwnerId (string) maxLength
        if (OwnerId is {Length: > 767})
            yield return new ValidationResult("Invalid value for OwnerId, length must be less than 767.",
                new[] {"OwnerId"});

        // OwnerId (string) minLength
        if (OwnerId is {Length: < 1})
            yield return new ValidationResult("Invalid value for OwnerId, length must be greater than 1.",
                new[] {"OwnerId"});
    }
}