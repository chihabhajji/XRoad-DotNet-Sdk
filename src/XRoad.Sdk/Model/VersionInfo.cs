/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// version information
/// </summary>
[DataContract(Name = "VersionInfo")]
public class VersionInfo : IEquatable<VersionInfo>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="VersionInfo" /> class.
    /// </summary>
    [JsonConstructor]
    protected VersionInfo()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="VersionInfo" /> class.
    /// </summary>
    /// <param name="info">information about the security server (required).</param>
    /// <param name="javaVersion">java version currently in use (required).</param>
    /// <param name="minJavaVersion">minimum supported java version (required).</param>
    /// <param name="maxJavaVersion">maximum supported java version (required).</param>
    /// <param name="usingSupportedJavaVersion">true if currently used java version is supported (required).</param>
    /// <param name="javaVendor">java vendor string from java.vendor system property (required).</param>
    /// <param name="javaRuntimeVersion">java runtime version string from java.runtime.version system property (required).</param>
    public VersionInfo(string info = default, int javaVersion = default, int minJavaVersion = default,
        int maxJavaVersion = default, bool usingSupportedJavaVersion = default, string javaVendor = default,
        string javaRuntimeVersion = default)
    {
        // to ensure "info" is required (not null)
        Info = info ?? throw new ArgumentNullException(nameof(info),
            "info is a required property for VersionInfo and cannot be null");
        JavaVersion = javaVersion;
        MinJavaVersion = minJavaVersion;
        MaxJavaVersion = maxJavaVersion;
        UsingSupportedJavaVersion = usingSupportedJavaVersion;
        // to ensure "javaVendor" is required (not null)
        JavaVendor = javaVendor ?? throw new ArgumentNullException(nameof(javaVendor),
            "javaVendor is a required property for VersionInfo and cannot be null");
        // to ensure "javaRuntimeVersion" is required (not null)
        JavaRuntimeVersion = javaRuntimeVersion ?? throw new ArgumentNullException(nameof(javaRuntimeVersion),
            "javaRuntimeVersion is a required property for VersionInfo and cannot be null");
    }

    /// <summary>
    /// information about the security server
    /// </summary>
    /// <value>information about the security server</value>
    [DataMember(Name = "info", IsRequired = true, EmitDefaultValue = false)]
    public string Info { get; }

    /// <summary>
    /// java version currently in use
    /// </summary>
    /// <value>java version currently in use</value>
    [DataMember(Name = "java_version", IsRequired = true, EmitDefaultValue = false)]
    public int JavaVersion { get; }

    /// <summary>
    /// minimum supported java version
    /// </summary>
    /// <value>minimum supported java version</value>
    [DataMember(Name = "min_java_version", IsRequired = true, EmitDefaultValue = false)]
    public int MinJavaVersion { get; }

    /// <summary>
    /// maximum supported java version
    /// </summary>
    /// <value>maximum supported java version</value>
    [DataMember(Name = "max_java_version", IsRequired = true, EmitDefaultValue = false)]
    public int MaxJavaVersion { get; }

    /// <summary>
    /// true if currently used java version is supported
    /// </summary>
    /// <value>true if currently used java version is supported</value>
    [DataMember(Name = "using_supported_java_version", IsRequired = true, EmitDefaultValue = true)]
    public bool UsingSupportedJavaVersion { get; }

    /// <summary>
    /// java vendor string from java.vendor system property
    /// </summary>
    /// <value>java vendor string from java.vendor system property</value>
    [DataMember(Name = "java_vendor", IsRequired = true, EmitDefaultValue = false)]
    public string JavaVendor { get; }

    /// <summary>
    /// java runtime version string from java.runtime.version system property
    /// </summary>
    /// <value>java runtime version string from java.runtime.version system property</value>
    [DataMember(Name = "java_runtime_version", IsRequired = true, EmitDefaultValue = false)]
    public string JavaRuntimeVersion { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class VersionInfo {\n");
        sb.Append("  Info: ").Append(Info).Append("\n");
        sb.Append("  JavaVersion: ").Append(JavaVersion).Append("\n");
        sb.Append("  MinJavaVersion: ").Append(MinJavaVersion).Append("\n");
        sb.Append("  MaxJavaVersion: ").Append(MaxJavaVersion).Append("\n");
        sb.Append("  UsingSupportedJavaVersion: ").Append(UsingSupportedJavaVersion).Append("\n");
        sb.Append("  JavaVendor: ").Append(JavaVendor).Append("\n");
        sb.Append("  JavaRuntimeVersion: ").Append(JavaRuntimeVersion).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as VersionInfo);
    }

    /// <summary>
    /// Returns true if VersionInfo instances are equal
    /// </summary>
    /// <param name="input">Instance of VersionInfo to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(VersionInfo input)
    {
        if (input == null) return false;
        return
            (
                Info == input.Info ||
                (Info != null &&
                 Info.Equals(input.Info))
            ) &&
            (
                JavaVersion == input.JavaVersion ||
                JavaVersion.Equals(input.JavaVersion)
            ) &&
            (
                MinJavaVersion == input.MinJavaVersion ||
                MinJavaVersion.Equals(input.MinJavaVersion)
            ) &&
            (
                MaxJavaVersion == input.MaxJavaVersion ||
                MaxJavaVersion.Equals(input.MaxJavaVersion)
            ) &&
            (
                UsingSupportedJavaVersion == input.UsingSupportedJavaVersion ||
                UsingSupportedJavaVersion.Equals(input.UsingSupportedJavaVersion)
            ) &&
            (
                JavaVendor == input.JavaVendor ||
                (JavaVendor != null &&
                 JavaVendor.Equals(input.JavaVendor))
            ) &&
            (
                JavaRuntimeVersion == input.JavaRuntimeVersion ||
                (JavaRuntimeVersion != null &&
                 JavaRuntimeVersion.Equals(input.JavaRuntimeVersion))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Info != null) hashCode = hashCode * 59 + Info.GetHashCode();
            hashCode = hashCode * 59 + JavaVersion.GetHashCode();
            hashCode = hashCode * 59 + MinJavaVersion.GetHashCode();
            hashCode = hashCode * 59 + MaxJavaVersion.GetHashCode();
            hashCode = hashCode * 59 + UsingSupportedJavaVersion.GetHashCode();
            if (JavaVendor != null) hashCode = hashCode * 59 + JavaVendor.GetHashCode();
            if (JavaRuntimeVersion != null) hashCode = hashCode * 59 + JavaRuntimeVersion.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Info (string) maxLength
        if (Info is {Length: > 255})
            yield return new ValidationResult("Invalid value for Info, length must be less than 255.", new[] {"Info"});

        // Info (string) minLength
        if (Info is {Length: < 1})
            yield return new ValidationResult("Invalid value for Info, length must be greater than 1.", new[] {"Info"});
    }
}