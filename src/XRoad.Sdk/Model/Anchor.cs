/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// security server anchor
/// </summary>
[DataContract(Name = "Anchor")]
public class Anchor : IEquatable<Anchor>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Anchor" /> class.
    /// </summary>
    [JsonConstructor]
    protected Anchor()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Anchor" /> class.
    /// </summary>
    /// <param name="hash">anchor hash (required).</param>
    /// <param name="createdAt">anchor created at (required).</param>
    public Anchor(string hash = default, DateTime createdAt = default)
    {
        // to ensure "hash" is required (not null)
        Hash = hash ??
               throw new ArgumentNullException(nameof(hash),
                   "hash is a required property for Anchor and cannot be null");
        CreatedAt = createdAt;
    }

    /// <summary>
    /// anchor hash
    /// </summary>
    /// <value>anchor hash</value>
    [DataMember(Name = "hash", IsRequired = true, EmitDefaultValue = false)]
    public string Hash { get; }

    /// <summary>
    /// anchor created at
    /// </summary>
    /// <value>anchor created at</value>
    [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = false)]
    public DateTime CreatedAt { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Anchor {\n");
        sb.Append("  Hash: ").Append(Hash).Append("\n");
        sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as Anchor);
    }

    /// <summary>
    /// Returns true if Anchor instances are equal
    /// </summary>
    /// <param name="input">Instance of Anchor to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Anchor input)
    {
        if (input == null) return false;
        return
            (
                Hash == input.Hash ||
                (Hash != null &&
                 Hash.Equals(input.Hash))
            ) &&
            (
                CreatedAt == input.CreatedAt ||
                CreatedAt.Equals(input.CreatedAt)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Hash != null) hashCode = hashCode * 59 + Hash.GetHashCode();

            hashCode = hashCode * 59 + CreatedAt.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Hash (string) maxLength
        if (Hash is {Length: > 255})
            yield return new ValidationResult("Invalid value for Hash, length must be less than 255.", new[] {"Hash"});

        // Hash (string) minLength
        if (Hash is {Length: < 1})
            yield return new ValidationResult("Invalid value for Hash, length must be greater than 1.", new[] {"Hash"});
        // TODO
        // // CreatedAt (DateTime) maxLength
        // if (this.CreatedAt != null && this.CreatedAt.Length > 24)
        // {
        //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedAt, length must be less than 24.", new [] { "CreatedAt" });
        // }
        //
        // // CreatedAt (DateTime) minLength
        // if (this.CreatedAt != null && this.CreatedAt.Length < 24)
        // {
        //     yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatedAt, length must be greater than 24.", new [] { "CreatedAt" });
        // }
    }
}