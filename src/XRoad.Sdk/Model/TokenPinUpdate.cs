/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// TokenPinUpdate
/// </summary>
[DataContract(Name = "TokenPinUpdate")]
public class TokenPinUpdate : IEquatable<TokenPinUpdate>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TokenPinUpdate" /> class.
    /// </summary>
    [JsonConstructor]
    protected TokenPinUpdate()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenPinUpdate" /> class.
    /// </summary>
    /// <param name="oldPin">the old pin code of the token (required).</param>
    /// <param name="newPin">the new pin code of the token (required).</param>
    public TokenPinUpdate(string oldPin = default, string newPin = default)
    {
        // to ensure "oldPin" is required (not null)
        OldPin = oldPin ?? throw new ArgumentNullException(nameof(oldPin),
            "oldPin is a required property for TokenPinUpdate and cannot be null");
        // to ensure "newPin" is required (not null)
        NewPin = newPin ?? throw new ArgumentNullException(nameof(newPin),
            "newPin is a required property for TokenPinUpdate and cannot be null");
    }

    /// <summary>
    /// the old pin code of the token
    /// </summary>
    /// <value>the old pin code of the token</value>
    [DataMember(Name = "old_pin", IsRequired = true, EmitDefaultValue = false)]
    public string OldPin { get; }

    /// <summary>
    /// the new pin code of the token
    /// </summary>
    /// <value>the new pin code of the token</value>
    [DataMember(Name = "new_pin", IsRequired = true, EmitDefaultValue = false)]
    public string NewPin { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TokenPinUpdate {\n");
        sb.Append("  OldPin: ").Append(OldPin).Append("\n");
        sb.Append("  NewPin: ").Append(NewPin).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TokenPinUpdate);
    }

    /// <summary>
    /// Returns true if TokenPinUpdate instances are equal
    /// </summary>
    /// <param name="input">Instance of TokenPinUpdate to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TokenPinUpdate input)
    {
        if (input == null) return false;
        return
            (
                OldPin == input.OldPin ||
                (OldPin != null &&
                 OldPin.Equals(input.OldPin))
            ) &&
            (
                NewPin == input.NewPin ||
                (NewPin != null &&
                 NewPin.Equals(input.NewPin))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (OldPin != null) hashCode = hashCode * 59 + OldPin.GetHashCode();
            if (NewPin != null) hashCode = hashCode * 59 + NewPin.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // OldPin (string) maxLength
        if (OldPin is {Length: > 255})
            yield return new ValidationResult("Invalid value for OldPin, length must be less than 255.",
                new[] {"OldPin"});

        // OldPin (string) minLength
        if (OldPin is {Length: < 1})
            yield return new ValidationResult("Invalid value for OldPin, length must be greater than 1.",
                new[] {"OldPin"});

        // NewPin (string) maxLength
        if (NewPin is {Length: > 255})
            yield return new ValidationResult("Invalid value for NewPin, length must be less than 255.",
                new[] {"NewPin"});

        // NewPin (string) minLength
        if (NewPin is {Length: < 1})
            yield return new ValidationResult("Invalid value for NewPin, length must be greater than 1.",
                new[] {"NewPin"});
    }
}