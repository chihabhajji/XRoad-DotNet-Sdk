/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// CSR for certificate that is stored in a Token. Also includes the possible actions that can be done to this object, e.g DELETE (only for csr related operations and does not consider user authorization).
/// </summary>
[DataContract(Name = "TokenCertificateSigningRequest")]
public class TokenCertificateSigningRequest : IEquatable<TokenCertificateSigningRequest>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificateSigningRequest" /> class.
    /// </summary>
    [JsonConstructor]
    protected TokenCertificateSigningRequest()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificateSigningRequest" /> class.
    /// </summary>
    /// <param name="possibleActions">array containing the possible actions that can be done for this item (required).</param>
    public TokenCertificateSigningRequest(List<PossibleAction> possibleActions = default)
    {
        // to ensure "possibleActions" is required (not null)
        PossibleActions = possibleActions ?? throw new ArgumentNullException(nameof(possibleActions),
            "possibleActions is a required property for TokenCertificateSigningRequest and cannot be null");
    }

    /// <summary>
    /// CSR id
    /// </summary>
    /// <value>CSR id</value>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
    public string Id { get; }

    /// <summary>
    /// Returns false as Id should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeId()
    {
        return false;
    }

    /// <summary>
    /// client id of the owner member, &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;
    /// </summary>
    /// <value>client id of the owner member, &lt;instance_id&gt;:&lt;member_class&gt;:&lt;member_code&gt;</value>
    [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = false)]
    public string OwnerId { get; }

    /// <summary>
    /// Returns false as OwnerId should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeOwnerId()
    {
        return false;
    }

    /// <summary>
    /// array containing the possible actions that can be done for this item
    /// </summary>
    /// <value>array containing the possible actions that can be done for this item</value>
    [DataMember(Name = "possible_actions", IsRequired = true, EmitDefaultValue = false)]
    public List<PossibleAction> PossibleActions { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TokenCertificateSigningRequest {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
        sb.Append("  PossibleActions: ").Append(PossibleActions).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as TokenCertificateSigningRequest);
    }

    /// <summary>
    /// Returns true if TokenCertificateSigningRequest instances are equal
    /// </summary>
    /// <param name="input">Instance of TokenCertificateSigningRequest to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TokenCertificateSigningRequest input)
    {
        if (input == null) return false;
        return
            (
                Id == input.Id ||
                (Id != null &&
                 Id.Equals(input.Id))
            ) &&
            (
                OwnerId == input.OwnerId ||
                (OwnerId != null &&
                 OwnerId.Equals(input.OwnerId))
            ) &&
            (
                PossibleActions == input.PossibleActions ||
                (PossibleActions != null &&
                 input.PossibleActions != null &&
                 PossibleActions.SequenceEqual(input.PossibleActions))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Id != null) hashCode = hashCode * 59 + Id.GetHashCode();
            if (OwnerId != null) hashCode = hashCode * 59 + OwnerId.GetHashCode();
            if (PossibleActions != null) hashCode = hashCode * 59 + PossibleActions.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // OwnerId (string) maxLength
        if (OwnerId != null && OwnerId.Length > 767)
            yield return new ValidationResult("Invalid value for OwnerId, length must be less than 767.",
                new[] {"OwnerId"});

        // OwnerId (string) minLength
        if (OwnerId != null && OwnerId.Length < 1)
            yield return new ValidationResult("Invalid value for OwnerId, length must be greater than 1.",
                new[] {"OwnerId"});
    }
}