/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// object for updating a service or all services within service description
/// </summary>
[DataContract(Name = "ServiceUpdate")]
public class ServiceUpdate : IEquatable<ServiceUpdate>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceUpdate" /> class.
    /// </summary>
    [JsonConstructor]
    protected ServiceUpdate()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceUpdate" /> class.
    /// </summary>
    /// <param name="url">service url (required).</param>
    /// <param name="timeout">service time out value (required).</param>
    /// <param name="sslAuth">service ssl auth (required).</param>
    /// <param name="urlAll">url is applied for all services (default to false).</param>
    /// <param name="timeoutAll">timeout value is applied for all services (default to false).</param>
    /// <param name="sslAuthAll">ssl authentication is applied for all services (default to false).</param>
    /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (default to false).</param>
    public ServiceUpdate(string url = default, int timeout = default, bool sslAuth = default, bool urlAll = false,
        bool timeoutAll = false, bool sslAuthAll = false, bool ignoreWarnings = false)
    {
        // to ensure "url" is required (not null)
        Url = url ?? throw new ArgumentNullException(nameof(url),
            "url is a required property for ServiceUpdate and cannot be null");
        Timeout = timeout;
        SslAuth = sslAuth;
        UrlAll = urlAll;
        TimeoutAll = timeoutAll;
        SslAuthAll = sslAuthAll;
        IgnoreWarnings = ignoreWarnings;
    }

    /// <summary>
    /// service url
    /// </summary>
    /// <value>service url</value>
    [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
    public string Url { get; }

    /// <summary>
    /// service time out value
    /// </summary>
    /// <value>service time out value</value>
    [DataMember(Name = "timeout", IsRequired = true, EmitDefaultValue = false)]
    public int Timeout { get; }

    /// <summary>
    /// service ssl auth
    /// </summary>
    /// <value>service ssl auth</value>
    [DataMember(Name = "ssl_auth", IsRequired = true, EmitDefaultValue = true)]
    public bool SslAuth { get; }

    /// <summary>
    /// url is applied for all services
    /// </summary>
    /// <value>url is applied for all services</value>
    [DataMember(Name = "url_all", EmitDefaultValue = true)]
    public bool UrlAll { get; }

    /// <summary>
    /// timeout value is applied for all services
    /// </summary>
    /// <value>timeout value is applied for all services</value>
    [DataMember(Name = "timeout_all", EmitDefaultValue = true)]
    public bool TimeoutAll { get; }

    /// <summary>
    /// ssl authentication is applied for all services
    /// </summary>
    /// <value>ssl authentication is applied for all services</value>
    [DataMember(Name = "ssl_auth_all", EmitDefaultValue = true)]
    public bool SslAuthAll { get; }

    /// <summary>
    /// if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail
    /// </summary>
    /// <value>if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail</value>
    [DataMember(Name = "ignore_warnings", EmitDefaultValue = true)]
    public bool IgnoreWarnings { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ServiceUpdate {\n");
        sb.Append("  Url: ").Append(Url).Append('\n');
        sb.Append("  Timeout: ").Append(Timeout).Append('\n');
        sb.Append("  SslAuth: ").Append(SslAuth).Append('\n');
        sb.Append("  UrlAll: ").Append(UrlAll).Append('\n');
        sb.Append("  TimeoutAll: ").Append(TimeoutAll).Append('\n');
        sb.Append("  SslAuthAll: ").Append(SslAuthAll).Append('\n');
        sb.Append("  IgnoreWarnings: ").Append(IgnoreWarnings).Append('\n');
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as ServiceUpdate);
    }

    /// <summary>
    /// Returns true if ServiceUpdate instances are equal
    /// </summary>
    /// <param name="input">Instance of ServiceUpdate to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ServiceUpdate input)
    {
        if (input == null) return false;
        return
            (
                Url == input.Url ||
                (Url != null &&
                 Url.Equals(input.Url))
            ) &&
            (
                Timeout == input.Timeout ||
                Timeout.Equals(input.Timeout)
            ) &&
            (
                SslAuth == input.SslAuth ||
                SslAuth.Equals(input.SslAuth)
            ) &&
            (
                UrlAll == input.UrlAll ||
                UrlAll.Equals(input.UrlAll)
            ) &&
            (
                TimeoutAll == input.TimeoutAll ||
                TimeoutAll.Equals(input.TimeoutAll)
            ) &&
            (
                SslAuthAll == input.SslAuthAll ||
                SslAuthAll.Equals(input.SslAuthAll)
            ) &&
            (
                IgnoreWarnings == input.IgnoreWarnings ||
                IgnoreWarnings.Equals(input.IgnoreWarnings)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Url != null) hashCode = hashCode * 59 + Url.GetHashCode();
            hashCode = hashCode * 59 + Timeout.GetHashCode();
            hashCode = hashCode * 59 + SslAuth.GetHashCode();
            hashCode = hashCode * 59 + UrlAll.GetHashCode();
            hashCode = hashCode * 59 + TimeoutAll.GetHashCode();
            hashCode = hashCode * 59 + SslAuthAll.GetHashCode();
            hashCode = hashCode * 59 + IgnoreWarnings.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // Url (string) maxLength
        if (Url is {Length: > 255})
            yield return new ValidationResult("Invalid value for Url, length must be less than 255.", new[] {"Url"});

        // Url (string) minLength
        if (Url is {Length: < 1})
            yield return new ValidationResult("Invalid value for Url, length must be greater than 1.", new[] {"Url"});

        // Timeout (int) maximum
        if (Timeout > 1000)
            yield return new ValidationResult("Invalid value for Timeout, must be a value less than or equal to 1000.",
                new[] {"Timeout"});

        // Timeout (int) minimum
        if (Timeout < 0)
            yield return new ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 0.",
                new[] {"Timeout"});
    }
}