/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// Initialization status of the Security Server
/// </summary>
[DataContract(Name = "InitializationStatus")]
public class InitializationStatus : IEquatable<InitializationStatus>, IValidatableObject
{
    /// <summary>
    /// Gets or Sets SoftwareTokenInitStatus
    /// </summary>
    [DataMember(Name = "software_token_init_status", IsRequired = true, EmitDefaultValue = false)]
    public TokenInitStatus SoftwareTokenInitStatus { get; }

    /// <summary>
    /// Initializes a new instance of the <see cref="InitializationStatus" /> class.
    /// </summary>
    [JsonConstructor]
    protected InitializationStatus()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="InitializationStatus" /> class.
    /// </summary>
    /// <param name="isAnchorImported">whether a configuration anchor has been imported or not (required).</param>
    /// <param name="isServerCodeInitialized">whether the server code of the security server has been initialized or not (required).</param>
    /// <param name="isServerOwnerInitialized">whether the server owner of the security server has been initialized or not (required).</param>
    /// <param name="softwareTokenInitStatus">softwareTokenInitStatus (required).</param>
    public InitializationStatus(bool isAnchorImported = default, bool isServerCodeInitialized = default,
        bool isServerOwnerInitialized = default, TokenInitStatus softwareTokenInitStatus = default)
    {
        IsAnchorImported = isAnchorImported;
        IsServerCodeInitialized = isServerCodeInitialized;
        IsServerOwnerInitialized = isServerOwnerInitialized;
        SoftwareTokenInitStatus = softwareTokenInitStatus;
    }

    /// <summary>
    /// whether a configuration anchor has been imported or not
    /// </summary>
    /// <value>whether a configuration anchor has been imported or not</value>
    [DataMember(Name = "is_anchor_imported", IsRequired = true, EmitDefaultValue = true)]
    public bool IsAnchorImported { get; }

    /// <summary>
    /// whether the server code of the security server has been initialized or not
    /// </summary>
    /// <value>whether the server code of the security server has been initialized or not</value>
    [DataMember(Name = "is_server_code_initialized", IsRequired = true, EmitDefaultValue = true)]
    public bool IsServerCodeInitialized { get; }

    /// <summary>
    /// whether the server owner of the security server has been initialized or not
    /// </summary>
    /// <value>whether the server owner of the security server has been initialized or not</value>
    [DataMember(Name = "is_server_owner_initialized", IsRequired = true, EmitDefaultValue = true)]
    public bool IsServerOwnerInitialized { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class InitializationStatus {\n");
        sb.Append("  IsAnchorImported: ").Append(IsAnchorImported).Append("\n");
        sb.Append("  IsServerCodeInitialized: ").Append(IsServerCodeInitialized).Append("\n");
        sb.Append("  IsServerOwnerInitialized: ").Append(IsServerOwnerInitialized).Append("\n");
        sb.Append("  SoftwareTokenInitStatus: ").Append(SoftwareTokenInitStatus).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as InitializationStatus);
    }

    /// <summary>
    /// Returns true if InitializationStatus instances are equal
    /// </summary>
    /// <param name="input">Instance of InitializationStatus to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(InitializationStatus input)
    {
        if (input == null) return false;
        return
            (
                IsAnchorImported == input.IsAnchorImported ||
                IsAnchorImported.Equals(input.IsAnchorImported)
            ) &&
            (
                IsServerCodeInitialized == input.IsServerCodeInitialized ||
                IsServerCodeInitialized.Equals(input.IsServerCodeInitialized)
            ) &&
            (
                IsServerOwnerInitialized == input.IsServerOwnerInitialized ||
                IsServerOwnerInitialized.Equals(input.IsServerOwnerInitialized)
            ) &&
            (
                SoftwareTokenInitStatus == input.SoftwareTokenInitStatus ||
                SoftwareTokenInitStatus.Equals(input.SoftwareTokenInitStatus)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            hashCode = hashCode * 59 + IsAnchorImported.GetHashCode();
            hashCode = hashCode * 59 + IsServerCodeInitialized.GetHashCode();
            hashCode = hashCode * 59 + IsServerOwnerInitialized.GetHashCode();
            hashCode = hashCode * 59 + SoftwareTokenInitStatus.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }
}