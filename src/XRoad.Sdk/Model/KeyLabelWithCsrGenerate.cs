/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// KeyLabelWithCsrGenerate
/// </summary>
[DataContract(Name = "KeyLabelWithCsrGenerate")]
public class KeyLabelWithCsrGenerate : IEquatable<KeyLabelWithCsrGenerate>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="KeyLabelWithCsrGenerate" /> class.
    /// </summary>
    [JsonConstructor]
    protected KeyLabelWithCsrGenerate()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="KeyLabelWithCsrGenerate" /> class.
    /// </summary>
    /// <param name="keyLabel">label for the new key (required).</param>
    /// <param name="csrGenerateRequest">csrGenerateRequest (required).</param>
    public KeyLabelWithCsrGenerate(string keyLabel = default, CsrGenerate csrGenerateRequest = default)
    {
        // to ensure "keyLabel" is required (not null)
        KeyLabel = keyLabel ?? throw new ArgumentNullException(
            nameof(keyLabel),
            "keyLabel is a required property for KeyLabelWithCsrGenerate and cannot be null");
        // to ensure "csrGenerateRequest" is required (not null)
        if (csrGenerateRequest == null)
            throw new ArgumentNullException(
                nameof(csrGenerateRequest),
                "csrGenerateRequest is a required property for KeyLabelWithCsrGenerate and cannot be null");
        CsrGenerateRequest = csrGenerateRequest;
    }

    /// <summary>
    /// label for the new key
    /// </summary>
    /// <value>label for the new key</value>
    [DataMember(Name = "key_label", IsRequired = true, EmitDefaultValue = false)]
    public string KeyLabel { get; }

    /// <summary>
    /// Gets or Sets CsrGenerateRequest
    /// </summary>
    [DataMember(Name = "csr_generate_request", IsRequired = true, EmitDefaultValue = false)]
    public CsrGenerate CsrGenerateRequest { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class KeyLabelWithCsrGenerate {\n");
        sb.Append("  KeyLabel: ").Append(KeyLabel).Append("\n");
        sb.Append("  CsrGenerateRequest: ").Append(CsrGenerateRequest).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as KeyLabelWithCsrGenerate);
    }

    /// <summary>
    /// Returns true if KeyLabelWithCsrGenerate instances are equal
    /// </summary>
    /// <param name="input">Instance of KeyLabelWithCsrGenerate to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(KeyLabelWithCsrGenerate input)
    {
        if (input == null) return false;
        return
            (
                KeyLabel == input.KeyLabel ||
                (KeyLabel != null &&
                 KeyLabel.Equals(input.KeyLabel))
            ) &&
            (
                CsrGenerateRequest.Equals(input.CsrGenerateRequest) ||
                (CsrGenerateRequest != null &&
                 CsrGenerateRequest.Equals(input.CsrGenerateRequest))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (KeyLabel != null) hashCode = hashCode * 59 + KeyLabel.GetHashCode();
            if (CsrGenerateRequest != null) hashCode = hashCode * 59 + CsrGenerateRequest.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // KeyLabel (string) maxLength
        if (KeyLabel is {Length: > 255})
            yield return new ValidationResult("Invalid value for KeyLabel, length must be less than 255.",
                new[] {"KeyLabel"});

        // KeyLabel (string) minLength
        if (KeyLabel is {Length: < 0})
            yield return new ValidationResult("Invalid value for KeyLabel, length must be greater than 0.",
                new[] {"KeyLabel"});
    }
}