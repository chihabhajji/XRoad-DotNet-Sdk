/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// security server initial configuration
/// </summary>
[DataContract(Name = "InitialServerConf")]
public class InitialServerConf : IEquatable<InitialServerConf>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="InitialServerConf" /> class.
    /// </summary>
    /// <param name="ownerMemberClass">member class.</param>
    /// <param name="ownerMemberCode">member code.</param>
    /// <param name="securityServerCode">security server code.</param>
    /// <param name="softwareTokenPin">pin code for the initial software token.</param>
    /// <param name="ignoreWarnings">if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail (default to false).</param>
    public InitialServerConf(string ownerMemberClass = default, string ownerMemberCode = default,
        string securityServerCode = default, string softwareTokenPin = default, bool ignoreWarnings = false)
    {
        OwnerMemberClass = ownerMemberClass;
        OwnerMemberCode = ownerMemberCode;
        SecurityServerCode = securityServerCode;
        SoftwareTokenPin = softwareTokenPin;
        IgnoreWarnings = ignoreWarnings;
    }

    /// <summary>
    /// member class
    /// </summary>
    /// <value>member class</value>
    [DataMember(Name = "owner_member_class", EmitDefaultValue = false)]
    public string OwnerMemberClass { get; }

    /// <summary>
    /// member code
    /// </summary>
    /// <value>member code</value>
    [DataMember(Name = "owner_member_code", EmitDefaultValue = false)]
    public string OwnerMemberCode { get; }

    /// <summary>
    /// security server code
    /// </summary>
    /// <value>security server code</value>
    [DataMember(Name = "security_server_code", EmitDefaultValue = false)]
    public string SecurityServerCode { get; }

    /// <summary>
    /// pin code for the initial software token
    /// </summary>
    /// <value>pin code for the initial software token</value>
    [DataMember(Name = "software_token_pin", EmitDefaultValue = false)]
    public string SoftwareTokenPin { get; }

    /// <summary>
    /// if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail
    /// </summary>
    /// <value>if true, any ignorable warnings are ignored. if false (or missing), any warnings cause request to fail</value>
    [DataMember(Name = "ignore_warnings", EmitDefaultValue = true)]
    public bool IgnoreWarnings { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class InitialServerConf {\n");
        sb.Append("  OwnerMemberClass: ").Append(OwnerMemberClass).Append("\n");
        sb.Append("  OwnerMemberCode: ").Append(OwnerMemberCode).Append("\n");
        sb.Append("  SecurityServerCode: ").Append(SecurityServerCode).Append("\n");
        sb.Append("  SoftwareTokenPin: ").Append(SoftwareTokenPin).Append("\n");
        sb.Append("  IgnoreWarnings: ").Append(IgnoreWarnings).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as InitialServerConf);
    }

    /// <summary>
    /// Returns true if InitialServerConf instances are equal
    /// </summary>
    /// <param name="input">Instance of InitialServerConf to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(InitialServerConf input)
    {
        if (input == null) return false;
        return
            (
                OwnerMemberClass == input.OwnerMemberClass ||
                (OwnerMemberClass != null &&
                 OwnerMemberClass.Equals(input.OwnerMemberClass))
            ) &&
            (
                OwnerMemberCode == input.OwnerMemberCode ||
                (OwnerMemberCode != null &&
                 OwnerMemberCode.Equals(input.OwnerMemberCode))
            ) &&
            (
                SecurityServerCode == input.SecurityServerCode ||
                (SecurityServerCode != null &&
                 SecurityServerCode.Equals(input.SecurityServerCode))
            ) &&
            (
                SoftwareTokenPin == input.SoftwareTokenPin ||
                (SoftwareTokenPin != null &&
                 SoftwareTokenPin.Equals(input.SoftwareTokenPin))
            ) &&
            (
                IgnoreWarnings == input.IgnoreWarnings ||
                IgnoreWarnings.Equals(input.IgnoreWarnings)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (OwnerMemberClass != null) hashCode = hashCode * 59 + OwnerMemberClass.GetHashCode();
            if (OwnerMemberCode != null) hashCode = hashCode * 59 + OwnerMemberCode.GetHashCode();
            if (SecurityServerCode != null) hashCode = hashCode * 59 + SecurityServerCode.GetHashCode();
            if (SoftwareTokenPin != null) hashCode = hashCode * 59 + SoftwareTokenPin.GetHashCode();
            hashCode = hashCode * 59 + IgnoreWarnings.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        // OwnerMemberClass (string) maxLength
        if (OwnerMemberClass is {Length: > 255})
            yield return new ValidationResult("Invalid value for OwnerMemberClass, length must be less than 255.",
                new[] {"OwnerMemberClass"});

        // OwnerMemberClass (string) minLength
        if (OwnerMemberClass is {Length: < 1})
            yield return new ValidationResult("Invalid value for OwnerMemberClass, length must be greater than 1.",
                new[] {"OwnerMemberClass"});

        // OwnerMemberCode (string) maxLength
        if (OwnerMemberCode is {Length: > 255})
            yield return new ValidationResult("Invalid value for OwnerMemberCode, length must be less than 255.",
                new[] {"OwnerMemberCode"});

        // OwnerMemberCode (string) minLength
        if (OwnerMemberCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for OwnerMemberCode, length must be greater than 1.",
                new[] {"OwnerMemberCode"});

        // SecurityServerCode (string) maxLength
        if (SecurityServerCode is {Length: > 255})
            yield return new ValidationResult("Invalid value for SecurityServerCode, length must be less than 255.",
                new[] {"SecurityServerCode"});

        // SecurityServerCode (string) minLength
        if (SecurityServerCode is {Length: < 1})
            yield return new ValidationResult("Invalid value for SecurityServerCode, length must be greater than 1.",
                new[] {"SecurityServerCode"});

        // SoftwareTokenPin (string) maxLength
        if (SoftwareTokenPin is {Length: > 255})
            yield return new ValidationResult("Invalid value for SoftwareTokenPin, length must be less than 255.",
                new[] {"SoftwareTokenPin"});

        // SoftwareTokenPin (string) minLength
        if (SoftwareTokenPin is {Length: < 1})
            yield return new ValidationResult("Invalid value for SoftwareTokenPin, length must be greater than 1.",
                new[] {"SoftwareTokenPin"});
    }
}