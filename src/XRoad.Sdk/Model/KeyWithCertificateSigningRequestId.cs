/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace XRoad.Sdk.Model;

/// <summary>
/// Key and TokenCertificateSigningRequest id
/// </summary>
[DataContract(Name = "KeyWithCertificateSigningRequestId")]
public class KeyWithCertificateSigningRequestId : IEquatable<KeyWithCertificateSigningRequestId>, IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="KeyWithCertificateSigningRequestId" /> class.
    /// </summary>
    [JsonConstructor]
    protected KeyWithCertificateSigningRequestId()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="KeyWithCertificateSigningRequestId" /> class.
    /// </summary>
    /// <param name="key">key (required).</param>
    /// <param name="csrId">CSR id (required).</param>
    public KeyWithCertificateSigningRequestId(Key key = default, string csrId = default)
    {
        // to ensure "key" is required (not null)
        Key = key ?? throw new ArgumentNullException(
            nameof(key),
            "key is a required property for KeyWithCertificateSigningRequestId and cannot be null");
        // to ensure "csrId" is required (not null)
        CsrId = csrId ?? throw new ArgumentNullException(
            nameof(csrId),
            "csrId is a required property for KeyWithCertificateSigningRequestId and cannot be null");
    }

    /// <summary>
    /// Gets or Sets Key
    /// </summary>
    [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = false)]
    public Key Key { get; }

    /// <summary>
    /// CSR id
    /// </summary>
    /// <value>CSR id</value>
    [DataMember(Name = "csr_id", IsRequired = true, EmitDefaultValue = false)]
    public string CsrId { get; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class KeyWithCertificateSigningRequestId {\n");
        sb.Append("  Key: ").Append(Key).Append("\n");
        sb.Append("  CsrId: ").Append(CsrId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        return Equals(input as KeyWithCertificateSigningRequestId);
    }

    /// <summary>
    /// Returns true if KeyWithCertificateSigningRequestId instances are equal
    /// </summary>
    /// <param name="input">Instance of KeyWithCertificateSigningRequestId to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(KeyWithCertificateSigningRequestId input)
    {
        if (input == null) return false;
        return
            (
                Key.Equals(input.Key) ||
                (Key != null &&
                 Key.Equals(input.Key))
            ) &&
            (
                CsrId == input.CsrId ||
                (CsrId != null &&
                 CsrId.Equals(input.CsrId))
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            if (Key != null) hashCode = hashCode * 59 + Key.GetHashCode();
            if (CsrId != null) hashCode = hashCode * 59 + CsrId.GetHashCode();
            return hashCode;
        }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
    {
        yield break;
    }
}