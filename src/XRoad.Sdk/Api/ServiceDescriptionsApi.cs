/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;
using XRoad.Sdk.Model;

namespace XRoad.Sdk.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IServiceDescriptionsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// delete service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns></returns>
    void DeleteServiceDescription(string id);

    /// <summary>
    /// delete service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteServiceDescriptionWithHttpInfo(string id);

    /// <summary>
    /// disable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <returns></returns>
    void DisableServiceDescription(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default);

    /// <summary>
    /// disable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DisableServiceDescriptionWithHttpInfo(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default);

    /// <summary>
    /// enable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns></returns>
    void EnableServiceDescription(string id);

    /// <summary>
    /// enable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> EnableServiceDescriptionWithHttpInfo(string id);

    /// <summary>
    /// get service description with provided id
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ServiceDescription</returns>
    ServiceDescription GetServiceDescription(string id);

    /// <summary>
    /// get service description with provided id
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of ServiceDescription</returns>
    ApiResponse<ServiceDescription> GetServiceDescriptionWithHttpInfo(string id);

    /// <summary>
    /// get services for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>List&lt;Service&gt;</returns>
    List<Service> GetServiceDescriptionServices(string id);

    /// <summary>
    /// get services for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of List&lt;Service&gt;</returns>
    ApiResponse<List<Service>> GetServiceDescriptionServicesWithHttpInfo(string id);

    /// <summary>
    /// refresh selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <returns>ServiceDescription</returns>
    ServiceDescription RefreshServiceDescription(string id, IgnoreWarnings ignoreWarnings = default);

    /// <summary>
    /// refresh selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <returns>ApiResponse of ServiceDescription</returns>
    ApiResponse<ServiceDescription> RefreshServiceDescriptionWithHttpInfo(string id,
        IgnoreWarnings ignoreWarnings = default);

    /// <summary>
    /// update url or service code for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <returns>ServiceDescription</returns>
    ServiceDescription UpdateServiceDescription(string id, ServiceDescriptionUpdate serviceDescriptionUpdate = default);

    /// <summary>
    /// update url or service code for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <returns>ApiResponse of ServiceDescription</returns>
    ApiResponse<ServiceDescription> UpdateServiceDescriptionWithHttpInfo(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IServiceDescriptionsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// delete service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteServiceDescriptionAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// delete service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteServiceDescriptionWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// disable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DisableServiceDescriptionAsync(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// disable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DisableServiceDescriptionWithHttpInfoAsync(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// enable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task EnableServiceDescriptionAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// enable selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> EnableServiceDescriptionWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get service description with provided id
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ServiceDescription</returns>
    Task<ServiceDescription> GetServiceDescriptionAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get service description with provided id
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ServiceDescription)</returns>
    Task<ApiResponse<ServiceDescription>> GetServiceDescriptionWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get services for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Service&gt;</returns>
    Task<List<Service>> GetServiceDescriptionServicesAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get services for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Service&gt;)</returns>
    Task<ApiResponse<List<Service>>> GetServiceDescriptionServicesWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// refresh selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ServiceDescription</returns>
    Task<ServiceDescription> RefreshServiceDescriptionAsync(string id, IgnoreWarnings ignoreWarnings = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// refresh selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ServiceDescription)</returns>
    Task<ApiResponse<ServiceDescription>> RefreshServiceDescriptionWithHttpInfoAsync(string id,
        IgnoreWarnings ignoreWarnings = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// update url or service code for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ServiceDescription</returns>
    Task<ServiceDescription> UpdateServiceDescriptionAsync(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// update url or service code for the selected service description
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ServiceDescription)</returns>
    Task<ApiResponse<ServiceDescription>> UpdateServiceDescriptionWithHttpInfoAsync(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IServiceDescriptionsApi : IServiceDescriptionsApiSync, IServiceDescriptionsApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class ServiceDescriptionsApi : IServiceDescriptionsApi
{
    private ExceptionFactory _exceptionFactory = (_, _) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceDescriptionsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public ServiceDescriptionsApi() : this((string) null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceDescriptionsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public ServiceDescriptionsApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceDescriptionsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public ServiceDescriptionsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException(nameof(configuration));

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServiceDescriptionsApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public ServiceDescriptionsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        Client = client ?? throw new ArgumentNullException(nameof(client));
        AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
        Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// delete service description &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns></returns>
    public void DeleteServiceDescription(string id)
    {
        DeleteServiceDescriptionWithHttpInfo(id);
    }

    /// <summary>
    /// delete service description &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteServiceDescriptionWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->DeleteServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Delete<object>("/service-descriptions/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("DeleteServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// delete service description &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteServiceDescriptionAsync(string id, CancellationToken cancellationToken = default)
    {
        await DeleteServiceDescriptionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// delete service description &lt;h3&gt;Administrator deletes the service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteServiceDescriptionWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->DeleteServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/service-descriptions/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("DeleteServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// disable selected service description &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <returns></returns>
    public void DisableServiceDescription(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default)
    {
        DisableServiceDescriptionWithHttpInfo(id, serviceDescriptionDisabledNotice);
    }

    /// <summary>
    /// disable selected service description &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DisableServiceDescriptionWithHttpInfo(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->DisableServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceDescriptionDisabledNotice;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/service-descriptions/{id}/disable", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("DisableServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// disable selected service description &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DisableServiceDescriptionAsync(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default,
        CancellationToken cancellationToken = default)
    {
        await DisableServiceDescriptionWithHttpInfoAsync(id, serviceDescriptionDisabledNotice, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// disable selected service description &lt;h3&gt;Administrator disables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionDisabledNotice"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DisableServiceDescriptionWithHttpInfoAsync(string id,
        ServiceDescriptionDisabledNotice serviceDescriptionDisabledNotice = default,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->DisableServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceDescriptionDisabledNotice;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/service-descriptions/{id}/disable",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("DisableServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// enable selected service description &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns></returns>
    public void EnableServiceDescription(string id)
    {
        EnableServiceDescriptionWithHttpInfo(id);
    }

    /// <summary>
    /// enable selected service description &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> EnableServiceDescriptionWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->EnableServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/service-descriptions/{id}/enable", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("EnableServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// enable selected service description &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task EnableServiceDescriptionAsync(string id, CancellationToken cancellationToken = default)
    {
        await EnableServiceDescriptionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// enable selected service description &lt;h3&gt;Administrator enables service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> EnableServiceDescriptionWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->EnableServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/service-descriptions/{id}/enable",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("EnableServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get service description with provided id &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ServiceDescription</returns>
    public ServiceDescription GetServiceDescription(string id)
    {
        var localVarResponse = GetServiceDescriptionWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get service description with provided id &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of ServiceDescription</returns>
    public ApiResponse<ServiceDescription> GetServiceDescriptionWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->GetServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Get<ServiceDescription>("/service-descriptions/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get service description with provided id &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ServiceDescription</returns>
    public async Task<ServiceDescription> GetServiceDescriptionAsync(string id,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await GetServiceDescriptionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get service description with provided id &lt;h3&gt;Administrator views a service description with a certain id.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ServiceDescription)</returns>
    public async Task<ApiResponse<ServiceDescription>> GetServiceDescriptionWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->GetServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<ServiceDescription>("/service-descriptions/{id}", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get services for the selected service description &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>List&lt;Service&gt;</returns>
    public List<Service> GetServiceDescriptionServices(string id)
    {
        var localVarResponse = GetServiceDescriptionServicesWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get services for the selected service description &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <returns>ApiResponse of List&lt;Service&gt;</returns>
    public ApiResponse<List<Service>> GetServiceDescriptionServicesWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->GetServiceDescriptionServices");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Get<List<Service>>("/service-descriptions/{id}/services", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory?.Invoke("GetServiceDescriptionServices", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get services for the selected service description &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Service&gt;</returns>
    public async Task<List<Service>> GetServiceDescriptionServicesAsync(string id,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetServiceDescriptionServicesWithHttpInfoAsync(id, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get services for the selected service description &lt;h3&gt;Administrator views the services for the selected service description.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Service&gt;)</returns>
    public async Task<ApiResponse<List<Service>>> GetServiceDescriptionServicesWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->GetServiceDescriptionServices");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<List<Service>>("/service-descriptions/{id}/services",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetServiceDescriptionServices", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// refresh selected service description &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <returns>ServiceDescription</returns>
    public ServiceDescription RefreshServiceDescription(string id, IgnoreWarnings ignoreWarnings = default)
    {
        var localVarResponse = RefreshServiceDescriptionWithHttpInfo(id, ignoreWarnings);
        return localVarResponse.Data;
    }

    /// <summary>
    /// refresh selected service description &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <returns>ApiResponse of ServiceDescription</returns>
    public ApiResponse<ServiceDescription> RefreshServiceDescriptionWithHttpInfo(string id,
        IgnoreWarnings ignoreWarnings = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->RefreshServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = ignoreWarnings;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Put<ServiceDescription>("/service-descriptions/{id}/refresh",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("RefreshServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// refresh selected service description &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ServiceDescription</returns>
    public async Task<ServiceDescription> RefreshServiceDescriptionAsync(string id,
        IgnoreWarnings ignoreWarnings = default, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await RefreshServiceDescriptionWithHttpInfoAsync(id, ignoreWarnings, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// refresh selected service description &lt;h3&gt;Administrator refreshes service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if refreshing the service description fails due to invalid URLs, already existing service description or already existing services. If refreshing the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If refreshing the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If refreshing the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;IgnoreWarnings.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="ignoreWarnings"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ServiceDescription)</returns>
    public async Task<ApiResponse<ServiceDescription>> RefreshServiceDescriptionWithHttpInfoAsync(string id,
        IgnoreWarnings ignoreWarnings = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->RefreshServiceDescription");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = ignoreWarnings;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<ServiceDescription>("/service-descriptions/{id}/refresh", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("RefreshServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// update url or service code for the selected service description &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <returns>ServiceDescription</returns>
    public ServiceDescription UpdateServiceDescription(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default)
    {
        var localVarResponse = UpdateServiceDescriptionWithHttpInfo(id, serviceDescriptionUpdate);
        return localVarResponse.Data;
    }

    /// <summary>
    /// update url or service code for the selected service description &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <returns>ApiResponse of ServiceDescription</returns>
    public ApiResponse<ServiceDescription> UpdateServiceDescriptionWithHttpInfo(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->UpdateServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceDescriptionUpdate;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Patch<ServiceDescription>("/service-descriptions/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("UpdateServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// update url or service code for the selected service description &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ServiceDescription</returns>
    public async Task<ServiceDescription> UpdateServiceDescriptionAsync(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await UpdateServiceDescriptionWithHttpInfoAsync(id, serviceDescriptionUpdate, cancellationToken)
                .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// update url or service code for the selected service description &lt;h3&gt;Administrator updates the selected service description.&lt;/h3&gt; &lt;p&gt; This endpoint can also return metadata in the error response if updating the service description fails due to invalid URLs, already existing service description or already existing services. If updating the service description fails due to an invalid service URL, the error response will have the error code &lt;code&gt;invalid_service_url&lt;/code&gt; and the metadata will contain a list of invalid URLs. If updating the service description fails due to an already existing service description, the error response will have the error code &lt;code&gt;url_already_exists&lt;/code&gt; and the metadata will contain the existing URL. If updating the service description fails due to already existing services, the metadata array will have a more complex format. See the description of the &#39;409&#39; response in this endpoint. &lt;/p&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceDescriptionUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, a warnings response will be returned if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;WSDL or OpenAPI3 validation fails and validation warnings are returned (warning code will be either &lt;code&gt;wsdl_validation_warnings&lt;/code&gt; or &lt;code&gt;openapi_validation_warnings&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;existing services will be removed (warning code &lt;code&gt;deleting_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be removed)&lt;/li&gt; &lt;li&gt;new services will be added (warning code &lt;code&gt;adding_services&lt;/code&gt; and the warning metadata contains a list of service codes that will be added)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service description</param>
    /// <param name="serviceDescriptionUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ServiceDescription)</returns>
    public async Task<ApiResponse<ServiceDescription>> UpdateServiceDescriptionWithHttpInfoAsync(string id,
        ServiceDescriptionUpdate serviceDescriptionUpdate = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServiceDescriptionsApi->UpdateServiceDescription");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceDescriptionUpdate;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<ServiceDescription>("/service-descriptions/{id}", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("UpdateServiceDescription", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }
}