/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;
using XRoad.Sdk.Model;

namespace XRoad.Sdk.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IServicesApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// create endpoint
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <returns>Endpoint</returns>
    Endpoint AddEndpoint(string id, Endpoint endpoint = default);

    /// <summary>
    /// create endpoint
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <returns>ApiResponse of Endpoint</returns>
    ApiResponse<Endpoint> AddEndpointWithHttpInfo(string id, Endpoint endpoint = default);

    /// <summary>
    /// add access rights to selected service for new ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    List<ServiceClient> AddServiceServiceClients(string id, ServiceClients serviceClients = default);

    /// <summary>
    /// add access rights to selected service for new ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    ApiResponse<List<ServiceClient>> AddServiceServiceClientsWithHttpInfo(string id,
        ServiceClients serviceClients = default);

    /// <summary>
    /// remove access to selected service from given ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns></returns>
    void DeleteServiceServiceClients(string id, ServiceClients serviceClients = default);

    /// <summary>
    /// remove access to selected service from given ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteServiceServiceClientsWithHttpInfo(string id, ServiceClients serviceClients = default);

    /// <summary>
    /// get service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>Service</returns>
    Service GetService(string id);

    /// <summary>
    /// get service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>ApiResponse of Service</returns>
    ApiResponse<Service> GetServiceWithHttpInfo(string id);

    /// <summary>
    /// get service clients who have access rights for the selected service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    List<ServiceClient> GetServiceServiceClients(string id);

    /// <summary>
    /// get service clients who have access rights for the selected service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    ApiResponse<List<ServiceClient>> GetServiceServiceClientsWithHttpInfo(string id);

    /// <summary>
    /// update service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <returns>Service</returns>
    Service UpdateService(string id, ServiceUpdate serviceUpdate = default);

    /// <summary>
    /// update service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <returns>ApiResponse of Service</returns>
    ApiResponse<Service> UpdateServiceWithHttpInfo(string id, ServiceUpdate serviceUpdate = default);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IServicesApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// create endpoint
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Endpoint</returns>
    Task<Endpoint> AddEndpointAsync(string id, Endpoint endpoint = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// create endpoint
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Endpoint)</returns>
    Task<ApiResponse<Endpoint>> AddEndpointWithHttpInfoAsync(string id, Endpoint endpoint = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// add access rights to selected service for new ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    Task<List<ServiceClient>> AddServiceServiceClientsAsync(string id, ServiceClients serviceClients = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// add access rights to selected service for new ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    Task<ApiResponse<List<ServiceClient>>> AddServiceServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// remove access to selected service from given ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteServiceServiceClientsAsync(string id, ServiceClients serviceClients = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// remove access to selected service from given ServiceClients
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteServiceServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// get service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Service</returns>
    Task<Service> GetServiceAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Service)</returns>
    Task<ApiResponse<Service>> GetServiceWithHttpInfoAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get service clients who have access rights for the selected service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    Task<List<ServiceClient>> GetServiceServiceClientsAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get service clients who have access rights for the selected service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    Task<ApiResponse<List<ServiceClient>>> GetServiceServiceClientsWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// update service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Service</returns>
    Task<Service> UpdateServiceAsync(string id, ServiceUpdate serviceUpdate = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// update service
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Service)</returns>
    Task<ApiResponse<Service>> UpdateServiceWithHttpInfoAsync(string id, ServiceUpdate serviceUpdate = default,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IServicesApi : IServicesApiSync, IServicesApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class ServicesApi : IServicesApi
{
    private ExceptionFactory _exceptionFactory = (_, _) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="ServicesApi"/> class.
    /// </summary>
    /// <returns></returns>
    public ServicesApi() : this((string) null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServicesApi"/> class.
    /// </summary>
    /// <returns></returns>
    public ServicesApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServicesApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public ServicesApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException(nameof(configuration));

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ServicesApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public ServicesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        Client = client ?? throw new ArgumentNullException(nameof(client));
        AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
        Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// create endpoint &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <returns>Endpoint</returns>
    public Endpoint AddEndpoint(string id, Endpoint endpoint = default)
    {
        var localVarResponse = AddEndpointWithHttpInfo(id, endpoint);
        return localVarResponse.Data;
    }

    /// <summary>
    /// create endpoint &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <returns>ApiResponse of Endpoint</returns>
    public ApiResponse<Endpoint> AddEndpointWithHttpInfo(string id, Endpoint endpoint = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->AddEndpoint");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = endpoint;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Post<Endpoint>("/services/{id}/endpoints", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("AddEndpoint", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// create endpoint &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Endpoint</returns>
    public async Task<Endpoint> AddEndpointAsync(string id, Endpoint endpoint = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await AddEndpointWithHttpInfoAsync(id, endpoint, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// create endpoint &lt;h3&gt;Administrator creates a new endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="endpoint"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Endpoint)</returns>
    public async Task<ApiResponse<Endpoint>> AddEndpointWithHttpInfoAsync(string id, Endpoint endpoint = default,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->AddEndpoint");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = endpoint;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<Endpoint>("/services/{id}/endpoints", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("AddEndpoint", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// add access rights to selected service for new ServiceClients &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    public List<ServiceClient> AddServiceServiceClients(string id, ServiceClients serviceClients = default)
    {
        var localVarResponse = AddServiceServiceClientsWithHttpInfo(id, serviceClients);
        return localVarResponse.Data;
    }

    /// <summary>
    /// add access rights to selected service for new ServiceClients &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    public ApiResponse<List<ServiceClient>> AddServiceServiceClientsWithHttpInfo(string id,
        ServiceClients serviceClients = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServicesApi->AddServiceServiceClients");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Post<List<ServiceClient>>("/services/{id}/service-clients", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("AddServiceServiceClients", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// add access rights to selected service for new ServiceClients &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    public async Task<List<ServiceClient>> AddServiceServiceClientsAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await AddServiceServiceClientsWithHttpInfoAsync(id, serviceClients, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// add access rights to selected service for new ServiceClients &lt;h3&gt;Adds access rights to selected service for new ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    public async Task<ApiResponse<List<ServiceClient>>> AddServiceServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServicesApi->AddServiceServiceClients");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<List<ServiceClient>>("/services/{id}/service-clients",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        var exception = ExceptionFactory?.Invoke("AddServiceServiceClients", localVarResponse);
        if (exception != null) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// remove access to selected service from given ServiceClients &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns></returns>
    public void DeleteServiceServiceClients(string id, ServiceClients serviceClients = default)
    {
        DeleteServiceServiceClientsWithHttpInfo(id, serviceClients);
    }

    /// <summary>
    /// remove access to selected service from given ServiceClients &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteServiceServiceClientsWithHttpInfo(string id,
        ServiceClients serviceClients = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServicesApi->DeleteServiceServiceClients");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/services/{id}/service-clients/delete", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("DeleteServiceServiceClients", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// remove access to selected service from given ServiceClients &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteServiceServiceClientsAsync(string id, ServiceClients serviceClients = default,
        CancellationToken cancellationToken = default)
    {
        await DeleteServiceServiceClientsWithHttpInfoAsync(id, serviceClients, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// remove access to selected service from given ServiceClients &lt;h3&gt;Administrator removes access to selected service from given ServiceClients.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteServiceServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServicesApi->DeleteServiceServiceClients");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/services/{id}/service-clients/delete",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("DeleteServiceServiceClients", localVarResponse) is { } exception) 
            throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get service &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>Service</returns>
    public Service GetService(string id)
    {
        var localVarResponse = GetServiceWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get service &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>ApiResponse of Service</returns>
    public ApiResponse<Service> GetServiceWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetService");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Get<Service>("/services/{id}", localVarRequestOptions, Configuration);
        var exception = ExceptionFactory?.Invoke("GetService", localVarResponse);
        if (exception != null) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get service &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Service</returns>
    public async Task<Service> GetServiceAsync(string id, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetServiceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get service &lt;h3&gt;Administrator views selected service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Service)</returns>
    public async Task<ApiResponse<Service>> GetServiceWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->GetService");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<Service>("/services/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        var exception = ExceptionFactory?.Invoke("GetService", localVarResponse);
        if (exception != null) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get service clients who have access rights for the selected service &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    public List<ServiceClient> GetServiceServiceClients(string id)
    {
        var localVarResponse = GetServiceServiceClientsWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get service clients who have access rights for the selected service &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    public ApiResponse<List<ServiceClient>> GetServiceServiceClientsWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServicesApi->GetServiceServiceClients");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Get<List<ServiceClient>>("/services/{id}/service-clients", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetServiceServiceClients", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get service clients who have access rights for the selected service &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    public async Task<List<ServiceClient>> GetServiceServiceClientsAsync(string id,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await GetServiceServiceClientsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get service clients who have access rights for the selected service &lt;h3&gt;Administrator views service clients who have access to the given service.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    public async Task<ApiResponse<List<ServiceClient>>> GetServiceServiceClientsWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling ServicesApi->GetServiceServiceClients");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<List<ServiceClient>>("/services/{id}/service-clients",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetServiceServiceClients", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// update service &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <returns>Service</returns>
    public Service UpdateService(string id, ServiceUpdate serviceUpdate = default)
    {
        var localVarResponse = UpdateServiceWithHttpInfo(id, serviceUpdate);
        return localVarResponse.Data;
    }

    /// <summary>
    /// update service &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <returns>ApiResponse of Service</returns>
    public ApiResponse<Service> UpdateServiceWithHttpInfo(string id, ServiceUpdate serviceUpdate = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateService");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceUpdate;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Patch<Service>("/services/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("UpdateService", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// update service &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Service</returns>
    public async Task<Service> UpdateServiceAsync(string id, ServiceUpdate serviceUpdate = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await UpdateServiceWithHttpInfoAsync(id, serviceUpdate, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// update service &lt;h3&gt;Administrator updates the service.&lt;/h3&gt; &lt;p&gt; This endpoint can return a warnings response which can be ignored by setting &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; true. If &lt;code&gt;ServiceUpdate.ignore_warnings&lt;/code&gt; &#x3D; false, it is possible to receive a warnings response from this endpoint if any one of the following conditions is true &lt;ul&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because SSL handshake fails&lt;/li&gt; &lt;li&gt;SSL authentication is set to true, but https connection to the service URL fails because of other errors (e.g. host unreachable)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the service</param>
    /// <param name="serviceUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Service)</returns>
    public async Task<ApiResponse<Service>> UpdateServiceWithHttpInfoAsync(string id,
        ServiceUpdate serviceUpdate = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling ServicesApi->UpdateService");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceUpdate;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<Service>("/services/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("UpdateService", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }
}