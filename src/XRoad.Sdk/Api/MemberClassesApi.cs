/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;

namespace XRoad.Sdk.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMemberClassesApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// get list of known member classes
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <returns>List&lt;string&gt;</returns>
    List<string> GetMemberClasses(bool? currentInstance = default);

    /// <summary>
    /// get list of known member classes
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetMemberClassesWithHttpInfo(bool? currentInstance = default);

    /// <summary>
    /// get list of known member classes for a given instance
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <returns>List&lt;string&gt;</returns>
    List<string> GetMemberClassesForInstance(string id);

    /// <summary>
    /// get list of known member classes for a given instance
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    ApiResponse<List<string>> GetMemberClassesForInstanceWithHttpInfo(string id);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMemberClassesApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// get list of known member classes
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetMemberClassesAsync(bool? currentInstance = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get list of known member classes
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetMemberClassesWithHttpInfoAsync(bool? currentInstance = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get list of known member classes for a given instance
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    Task<List<string>> GetMemberClassesForInstanceAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get list of known member classes for a given instance
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    Task<ApiResponse<List<string>>> GetMemberClassesForInstanceWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMemberClassesApi : IMemberClassesApiSync, IMemberClassesApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class MemberClassesApi : IMemberClassesApi
{
    private ExceptionFactory _exceptionFactory = (_, _) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="MemberClassesApi"/> class.
    /// </summary>
    /// <returns></returns>
    public MemberClassesApi() : this((string) null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MemberClassesApi"/> class.
    /// </summary>
    /// <returns></returns>
    public MemberClassesApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MemberClassesApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public MemberClassesApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MemberClassesApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public MemberClassesApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// get list of known member classes &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <returns>List&lt;string&gt;</returns>
    public List<string> GetMemberClasses(bool? currentInstance = default)
    {
        var localVarResponse = GetMemberClassesWithHttpInfo(currentInstance);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get list of known member classes &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetMemberClassesWithHttpInfo(bool? currentInstance = default)
    {
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        if (currentInstance != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "current_instance", currentInstance));
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Get<List<string>>("/member-classes", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetMemberClasses", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get list of known member classes &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    public async Task<List<string>> GetMemberClassesAsync(bool? currentInstance = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetMemberClassesWithHttpInfoAsync(currentInstance, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get list of known member classes &lt;h3&gt;Administrator lists member classes.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentInstance">if true, return member classes for this instance. if false (default), return member classes for all instances (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    public async Task<ApiResponse<List<string>>> GetMemberClassesWithHttpInfoAsync(bool? currentInstance = default,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        if (currentInstance != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "current_instance", currentInstance));
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<List<string>>("/member-classes", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetMemberClasses", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get list of known member classes for a given instance &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <returns>List&lt;string&gt;</returns>
    public List<string> GetMemberClassesForInstance(string id)
    {
        var localVarResponse = GetMemberClassesForInstanceWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get list of known member classes for a given instance &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <returns>ApiResponse of List&lt;string&gt;</returns>
    public ApiResponse<List<string>> GetMemberClassesForInstanceWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling MemberClassesApi->GetMemberClassesForInstance");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Get<List<string>>("/member-classes/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetMemberClassesForInstance", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get list of known member classes for a given instance &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;string&gt;</returns>
    public async Task<List<string>> GetMemberClassesForInstanceAsync(string id,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await GetMemberClassesForInstanceWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get list of known member classes for a given instance &lt;h3&gt;Administrator lists member classes for a given instance.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">instance id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
    public async Task<ApiResponse<List<string>>> GetMemberClassesForInstanceWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling MemberClassesApi->GetMemberClassesForInstance");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<List<string>>("/member-classes/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetMemberClassesForInstance", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }
}