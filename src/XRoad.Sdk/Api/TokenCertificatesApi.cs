/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;
using XRoad.Sdk.Model;

namespace XRoad.Sdk.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ITokenCertificatesApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// activate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    void ActivateCertificate(string hash);

    /// <summary>
    /// activate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ActivateCertificateWithHttpInfo(string hash);

    /// <summary>
    /// delete certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    void DeleteCertificate(string hash);

    /// <summary>
    /// delete certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteCertificateWithHttpInfo(string hash);

    /// <summary>
    /// deactivate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    void DisableCertificate(string hash);

    /// <summary>
    /// deactivate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DisableCertificateWithHttpInfo(string hash);

    /// <summary>
    /// get certificate information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>TokenCertificate</returns>
    TokenCertificate GetCertificate(string hash);

    /// <summary>
    /// get certificate information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of TokenCertificate</returns>
    ApiResponse<TokenCertificate> GetCertificateWithHttpInfo(string hash);

    /// <summary>
    /// get possible actions for one certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>List&lt;PossibleAction&gt;</returns>
    List<PossibleAction> GetPossibleActionsForCertificate(string hash);

    /// <summary>
    /// get possible actions for one certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of List&lt;PossibleAction&gt;</returns>
    ApiResponse<List<PossibleAction>> GetPossibleActionsForCertificateWithHttpInfo(string hash);

    /// <summary>
    /// import new certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <returns>TokenCertificate</returns>
    TokenCertificate ImportCertificate(Stream body = default);

    /// <summary>
    /// import new certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <returns>ApiResponse of TokenCertificate</returns>
    ApiResponse<TokenCertificate> ImportCertificateWithHttpInfo(Stream body = default);

    /// <summary>
    /// import an existing certificate from a token by cert hash
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>TokenCertificate</returns>
    TokenCertificate ImportCertificateFromToken(string hash);

    /// <summary>
    /// import an existing certificate from a token by cert hash
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of TokenCertificate</returns>
    ApiResponse<TokenCertificate> ImportCertificateFromTokenWithHttpInfo(string hash);

    /// <summary>
    /// marks an auth certificate for deletion
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    void MarkAuthCertForDeletion(string hash);

    /// <summary>
    /// marks an auth certificate for deletion
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> MarkAuthCertForDeletionWithHttpInfo(string hash);

    /// <summary>
    /// register certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <returns></returns>
    void RegisterCertificate(string hash, SecurityServerAddress securityServerAddress = default);

    /// <summary>
    /// register certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> RegisterCertificateWithHttpInfo(string hash,
        SecurityServerAddress securityServerAddress = default);

    /// <summary>
    /// unregister authentication certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    void UnregisterAuthCertificate(string hash);

    /// <summary>
    /// unregister authentication certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> UnregisterAuthCertificateWithHttpInfo(string hash);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ITokenCertificatesApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// activate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ActivateCertificateAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// activate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ActivateCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// delete certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteCertificateAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// delete certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// deactivate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DisableCertificateAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// deactivate certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DisableCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get certificate information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TokenCertificate</returns>
    Task<TokenCertificate> GetCertificateAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// get certificate information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TokenCertificate)</returns>
    Task<ApiResponse<TokenCertificate>> GetCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get possible actions for one certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;PossibleAction&gt;</returns>
    Task<List<PossibleAction>> GetPossibleActionsForCertificateAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get possible actions for one certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;PossibleAction&gt;)</returns>
    Task<ApiResponse<List<PossibleAction>>> GetPossibleActionsForCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// import new certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TokenCertificate</returns>
    Task<TokenCertificate> ImportCertificateAsync(Stream body = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// import new certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TokenCertificate)</returns>
    Task<ApiResponse<TokenCertificate>> ImportCertificateWithHttpInfoAsync(Stream body = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// import an existing certificate from a token by cert hash
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TokenCertificate</returns>
    Task<TokenCertificate> ImportCertificateFromTokenAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// import an existing certificate from a token by cert hash
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TokenCertificate)</returns>
    Task<ApiResponse<TokenCertificate>> ImportCertificateFromTokenWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// marks an auth certificate for deletion
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task MarkAuthCertForDeletionAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// marks an auth certificate for deletion
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> MarkAuthCertForDeletionWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// register certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task RegisterCertificateAsync(string hash, SecurityServerAddress securityServerAddress = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// register certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> RegisterCertificateWithHttpInfoAsync(string hash,
        SecurityServerAddress securityServerAddress = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// unregister authentication certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task UnregisterAuthCertificateAsync(string hash, CancellationToken cancellationToken = default);

    /// <summary>
    /// unregister authentication certificate
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> UnregisterAuthCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ITokenCertificatesApi : ITokenCertificatesApiSync, ITokenCertificatesApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class TokenCertificatesApi : ITokenCertificatesApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificatesApi"/> class.
    /// </summary>
    /// <returns></returns>
    public TokenCertificatesApi() : this((string) null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificatesApi"/> class.
    /// </summary>
    /// <returns></returns>
    public TokenCertificatesApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificatesApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public TokenCertificatesApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TokenCertificatesApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public TokenCertificatesApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        Client = client ?? throw new ArgumentNullException(nameof(client));
        AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
        Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// activate certificate &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    public void ActivateCertificate(string hash)
    {
        ActivateCertificateWithHttpInfo(hash);
    }

    /// <summary>
    /// activate certificate &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ActivateCertificateWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->ActivateCertificate");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/token-certificates/{hash}/activate", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("ActivateCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// activate certificate &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ActivateCertificateAsync(string hash, CancellationToken cancellationToken = default)
    {
        await ActivateCertificateWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// activate certificate &lt;h3&gt;Administrator activates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ActivateCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->ActivateCertificate");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/token-certificates/{hash}/activate",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("ActivateCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// delete certificate &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    public void DeleteCertificate(string hash)
    {
        DeleteCertificateWithHttpInfo(hash);
    }

    /// <summary>
    /// delete certificate &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteCertificateWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->DeleteCertificate");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Delete<object>("/token-certificates/{hash}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("DeleteCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// delete certificate &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteCertificateAsync(string hash, CancellationToken cancellationToken = default)
    {
        await DeleteCertificateWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// delete certificate &lt;h3&gt;Administrator deletes the certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the certificate is not found. The metadata array contains the id of that certificate.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->DeleteCertificate");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/token-certificates/{hash}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("DeleteCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// deactivate certificate &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    public void DisableCertificate(string hash)
    {
        DisableCertificateWithHttpInfo(hash);
    }

    /// <summary>
    /// deactivate certificate &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DisableCertificateWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->DisableCertificate");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/token-certificates/{hash}/disable", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("DisableCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// deactivate certificate &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DisableCertificateAsync(string hash, CancellationToken cancellationToken = default)
    {
        await DisableCertificateWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// deactivate certificate &lt;h3&gt;Administrator deactivates selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DisableCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->DisableCertificate");


        var localVarRequestOptions = new RequestOptions();

        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/token-certificates/{hash}/disable",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("DisableCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// get certificate information &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>TokenCertificate</returns>
    public TokenCertificate GetCertificate(string hash)
    {
        var localVarResponse = GetCertificateWithHttpInfo(hash);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get certificate information &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of TokenCertificate</returns>
    public ApiResponse<TokenCertificate> GetCertificateWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->GetCertificate");

        var localVarRequestOptions = new RequestOptions();

        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Get<TokenCertificate>("/token-certificates/{hash}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// get certificate information &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TokenCertificate</returns>
    public async Task<TokenCertificate> GetCertificateAsync(string hash, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetCertificateWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get certificate information &lt;h3&gt;Administrator views certificate details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TokenCertificate)</returns>
    public async Task<ApiResponse<TokenCertificate>> GetCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->GetCertificate");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<TokenCertificate>("/token-certificates/{hash}", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("GetCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// get possible actions for one certificate &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>List&lt;PossibleAction&gt;</returns>
    public List<PossibleAction> GetPossibleActionsForCertificate(string hash)
    {
        var localVarResponse = GetPossibleActionsForCertificateWithHttpInfo(hash);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get possible actions for one certificate &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of List&lt;PossibleAction&gt;</returns>
    public ApiResponse<List<PossibleAction>> GetPossibleActionsForCertificateWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->GetPossibleActionsForCertificate");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = Client.Get<List<PossibleAction>>("/token-certificates/{hash}/possible-actions",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetPossibleActionsForCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// get possible actions for one certificate &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;PossibleAction&gt;</returns>
    public async Task<List<PossibleAction>> GetPossibleActionsForCertificateAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetPossibleActionsForCertificateWithHttpInfoAsync(hash, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get possible actions for one certificate &lt;h3&gt;UI needs to know which actions can be done on one certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;PossibleAction&gt;)</returns>
    public async Task<ApiResponse<List<PossibleAction>>> GetPossibleActionsForCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->GetPossibleActionsForCertificate");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<List<PossibleAction>>("/token-certificates/{hash}/possible-actions", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("GetPossibleActionsForCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// import new certificate &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <returns>TokenCertificate</returns>
    public TokenCertificate ImportCertificate(Stream body = default)
    {
        var localVarResponse = ImportCertificateWithHttpInfo(body);
        return localVarResponse.Data;
    }

    /// <summary>
    /// import new certificate &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <returns>ApiResponse of TokenCertificate</returns>
    public ApiResponse<TokenCertificate> ImportCertificateWithHttpInfo(Stream body = default)
    {
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/octet-stream"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = body;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Post<TokenCertificate>("/token-certificates", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("ImportCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// import new certificate &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TokenCertificate</returns>
    public async Task<TokenCertificate> ImportCertificateAsync(Stream body = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await ImportCertificateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// import new certificate &lt;h3&gt;Imports certificate to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for the certificate is not found. The metadata array contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="body">certificate to import (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TokenCertificate)</returns>
    public async Task<ApiResponse<TokenCertificate>> ImportCertificateWithHttpInfoAsync(Stream body = default,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/octet-stream"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = body;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<TokenCertificate>("/token-certificates", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("ImportCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// import an existing certificate from a token by cert hash &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>TokenCertificate</returns>
    public TokenCertificate ImportCertificateFromToken(string hash)
    {
        var localVarResponse = ImportCertificateFromTokenWithHttpInfo(hash);
        return localVarResponse.Data;
    }

    /// <summary>
    /// import an existing certificate from a token by cert hash &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of TokenCertificate</returns>
    public ApiResponse<TokenCertificate> ImportCertificateFromTokenWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->ImportCertificateFromToken");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Post<TokenCertificate>("/token-certificates/{hash}/import", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("ImportCertificateFromToken", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// import an existing certificate from a token by cert hash &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TokenCertificate</returns>
    public async Task<TokenCertificate> ImportCertificateFromTokenAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ImportCertificateFromTokenWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// import an existing certificate from a token by cert hash &lt;h3&gt;Imports certificate from a token to the system.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if the client for this certificate is not found. The metadata contains the identifier of that client.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TokenCertificate)</returns>
    public async Task<ApiResponse<TokenCertificate>> ImportCertificateFromTokenWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->ImportCertificateFromToken");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<TokenCertificate>("/token-certificates/{hash}/import",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("ImportCertificateFromToken", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// marks an auth certificate for deletion &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    public void MarkAuthCertForDeletion(string hash)
    {
        MarkAuthCertForDeletionWithHttpInfo(hash);
    }

    /// <summary>
    /// marks an auth certificate for deletion &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> MarkAuthCertForDeletionWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->MarkAuthCertForDeletion");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = Client.Put<object>("/token-certificates/{hash}/mark-for-deletion",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("MarkAuthCertForDeletion", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// marks an auth certificate for deletion &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task MarkAuthCertForDeletionAsync(string hash, CancellationToken cancellationToken = default)
    {
        await MarkAuthCertForDeletionWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// marks an auth certificate for deletion &lt;h3&gt;Administrator marks an auth certificate for deletion.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> MarkAuthCertForDeletionWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->MarkAuthCertForDeletion");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/token-certificates/{hash}/mark-for-deletion",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("MarkAuthCertForDeletion", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// register certificate &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <returns></returns>
    public void RegisterCertificate(string hash, SecurityServerAddress securityServerAddress = default)
    {
        RegisterCertificateWithHttpInfo(hash, securityServerAddress);
    }

    /// <summary>
    /// register certificate &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> RegisterCertificateWithHttpInfo(string hash,
        SecurityServerAddress securityServerAddress = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->RegisterCertificate");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter
        localVarRequestOptions.Data = securityServerAddress;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/token-certificates/{hash}/register", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("RegisterCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// register certificate &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task RegisterCertificateAsync(string hash, SecurityServerAddress securityServerAddress = default,
        CancellationToken cancellationToken = default)
    {
        await RegisterCertificateWithHttpInfoAsync(hash, securityServerAddress, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// register certificate &lt;h3&gt;Administrator registers selected certificate.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="securityServerAddress"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> RegisterCertificateWithHttpInfoAsync(string hash,
        SecurityServerAddress securityServerAddress = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->RegisterCertificate");


        var localVarRequestOptions = new RequestOptions();

        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter
        localVarRequestOptions.Data = securityServerAddress;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/token-certificates/{hash}/register",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("RegisterCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// unregister authentication certificate &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns></returns>
    public void UnregisterAuthCertificate(string hash)
    {
        UnregisterAuthCertificateWithHttpInfo(hash);
    }

    /// <summary>
    /// unregister authentication certificate &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> UnregisterAuthCertificateWithHttpInfo(string hash)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->UnregisterAuthCertificate");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/token-certificates/{hash}/unregister", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("UnregisterAuthCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// unregister authentication certificate &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task UnregisterAuthCertificateAsync(string hash, CancellationToken cancellationToken = default)
    {
        await UnregisterAuthCertificateWithHttpInfoAsync(hash, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// unregister authentication certificate &lt;h3&gt;Administrator unregisters selected authentication certificate.&lt;/h3&gt; &lt;p&gt;This endpoint can also return metadata in the error response if sending the management request fails. The metadata array contains the error details that were generated in core. The message is in plain English.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="hash">SHA-1 hash of the certificate</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> UnregisterAuthCertificateWithHttpInfoAsync(string hash,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'hash' is set
        if (hash == null)
            throw new ApiException(400,
                "Missing required parameter 'hash' when calling TokenCertificatesApi->UnregisterAuthCertificate");


        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("hash", ClientUtils.ParameterToString(hash)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PutAsync<object>("/token-certificates/{hash}/unregister",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("UnregisterAuthCertificate", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }
}