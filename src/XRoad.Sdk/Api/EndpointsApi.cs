/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;
using XRoad.Sdk.Model;

namespace XRoad.Sdk.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IEndpointsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator add access rights for a service clients to the selected endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    List<ServiceClient> AddEndpointServiceClients(string id, ServiceClients serviceClients = default);

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator add access rights for a service clients to the selected endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    ApiResponse<List<ServiceClient>> AddEndpointServiceClientsWithHttpInfo(string id,
        ServiceClients serviceClients = default);

    /// <summary>
    ///     delete endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns></returns>
    void DeleteEndpoint(string id);

    /// <summary>
    ///     delete endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteEndpointWithHttpInfo(string id);

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes access rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <returns></returns>
    void DeleteEndpointServiceClients(string id, ServiceClients serviceClients = default);

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes access rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteEndpointServiceClientsWithHttpInfo(string id, ServiceClients serviceClients = default);

    /// <summary>
    ///     Get an endpoint by its id
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>Endpoint</returns>
    Endpoint GetEndpoint(string id);

    /// <summary>
    ///     Get an endpoint by its id
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>ApiResponse of Endpoint</returns>
    ApiResponse<Endpoint> GetEndpointWithHttpInfo(string id);

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator views endpoints access rights.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    List<ServiceClient> GetEndpointServiceClients(string id);

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator views endpoints access rights.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    ApiResponse<List<ServiceClient>> GetEndpointServiceClientsWithHttpInfo(string id);

    /// <summary>
    ///     Update an endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <returns>Endpoint</returns>
    Endpoint UpdateEndpoint(string id, EndpointUpdate endpointUpdate = default);

    /// <summary>
    ///     Update an endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <returns>ApiResponse of Endpoint</returns>
    ApiResponse<Endpoint> UpdateEndpointWithHttpInfo(string id, EndpointUpdate endpointUpdate = default);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IEndpointsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator add access rights for a service clients to the selected endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    Task<List<ServiceClient>> AddEndpointServiceClientsAsync(string id, ServiceClients serviceClients = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator add access rights for a service clients to the selected endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    Task<ApiResponse<List<ServiceClient>>> AddEndpointServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default);

    /// <summary>
    ///     delete endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteEndpointAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    ///     delete endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteEndpointWithHttpInfoAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes access rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteEndpointServiceClientsAsync(string id, ServiceClients serviceClients = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator removes access rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteEndpointServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default);

    /// <summary>
    ///     Get an endpoint by its id
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Endpoint</returns>
    Task<Endpoint> GetEndpointAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    ///     Get an endpoint by its id
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Endpoint)</returns>
    Task<ApiResponse<Endpoint>> GetEndpointWithHttpInfoAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator views endpoints access rights.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    Task<List<ServiceClient>> GetEndpointServiceClientsAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator views endpoints access rights.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    Task<ApiResponse<List<ServiceClient>>> GetEndpointServiceClientsWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    ///     Update an endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Endpoint</returns>
    Task<Endpoint> UpdateEndpointAsync(string id, EndpointUpdate endpointUpdate = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    ///     Update an endpoint
    /// </summary>
    /// <remarks>
    ///     &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Endpoint)</returns>
    Task<ApiResponse<Endpoint>> UpdateEndpointWithHttpInfoAsync(string id, EndpointUpdate endpointUpdate = default,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IEndpointsApi : IEndpointsApiSync, IEndpointsApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class EndpointsApi : IEndpointsApi
{
    private ExceptionFactory _exceptionFactory = (_, _) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="EndpointsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public EndpointsApi() : this((string) null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="EndpointsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public EndpointsApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="EndpointsApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public EndpointsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="EndpointsApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public EndpointsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint &lt;h3&gt;Administrator add access rights for
    ///     a service clients to the selected endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    public List<ServiceClient> AddEndpointServiceClients(string id, ServiceClients serviceClients = default)
    {
        var localVarResponse = AddEndpointServiceClientsWithHttpInfo(id, serviceClients);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint &lt;h3&gt;Administrator add access rights for
    ///     a service clients to the selected endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    public ApiResponse<List<ServiceClient>> AddEndpointServiceClientsWithHttpInfo(string id,
        ServiceClients serviceClients = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling EndpointsApi->AddEndpointServiceClients");

        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
                "application/json"
            };

        // to determine the Accept header
        string[] accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Post<List<ServiceClient>>("/endpoints/{id}/service-clients", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("AddEndpointServiceClients", localVarResponse) is { } exception)
            throw exception;

        return localVarResponse;
    }

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint &lt;h3&gt;Administrator add access rights for
    ///     a service clients to the selected endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    public async Task<List<ServiceClient>> AddEndpointServiceClientsAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await AddEndpointServiceClientsWithHttpInfoAsync(id, serviceClients, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     add access rights for given service clients to the selected endpoint &lt;h3&gt;Administrator add access rights for
    ///     a service clients to the selected endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    public async Task<ApiResponse<List<ServiceClient>>> AddEndpointServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling EndpointsApi->AddEndpointServiceClients");


        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
                "application/json"
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<List<ServiceClient>>("/endpoints/{id}/service-clients", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("AddEndpointServiceClients", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     delete endpoint &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns></returns>
    public void DeleteEndpoint(string id)
    {
        DeleteEndpointWithHttpInfo(id);
    }

    /// <summary>
    ///     delete endpoint &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteEndpointWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->DeleteEndpoint");

        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = Client.Delete<object>("/endpoints/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("DeleteEndpoint", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     delete endpoint &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteEndpointAsync(string id, CancellationToken cancellationToken = default)
    {
        await DeleteEndpointWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    ///     delete endpoint &lt;h3&gt;Administrator removes an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteEndpointWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->DeleteEndpoint");


        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/endpoints/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("DeleteEndpoint", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint &lt;h3&gt;Administrator removes access
    ///     rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <returns></returns>
    public void DeleteEndpointServiceClients(string id, ServiceClients serviceClients = default)
    {
        DeleteEndpointServiceClientsWithHttpInfo(id, serviceClients);
    }

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint &lt;h3&gt;Administrator removes access
    ///     rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteEndpointServiceClientsWithHttpInfo(string id,
        ServiceClients serviceClients = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling EndpointsApi->DeleteEndpointServiceClients");

        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
                "application/json"
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = Client.Post<object>("/endpoints/{id}/service-clients/delete", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("DeleteEndpointServiceClients", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint &lt;h3&gt;Administrator removes access
    ///     rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteEndpointServiceClientsAsync(string id, ServiceClients serviceClients = default,
        CancellationToken cancellationToken = default)
    {
        await DeleteEndpointServiceClientsWithHttpInfoAsync(id, serviceClients, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    ///     remove access rights from specified service clients to the selected endpoint &lt;h3&gt;Administrator removes access
    ///     rights from a service clients to an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="serviceClients">Service client to be removed (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteEndpointServiceClientsWithHttpInfoAsync(string id,
        ServiceClients serviceClients = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling EndpointsApi->DeleteEndpointServiceClients");


        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
                "application/json"
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = serviceClients;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/endpoints/{id}/service-clients/delete",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("DeleteEndpointServiceClients", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Get an endpoint by its id &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>Endpoint</returns>
    public Endpoint GetEndpoint(string id)
    {
        var localVarResponse = GetEndpointWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Get an endpoint by its id &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>ApiResponse of Endpoint</returns>
    public ApiResponse<Endpoint> GetEndpointWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetEndpoint");

        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = Client.Get<Endpoint>("/endpoints/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetEndpoint", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Get an endpoint by its id &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Endpoint</returns>
    public async Task<Endpoint> GetEndpointAsync(string id, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetEndpointWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Get an endpoint by its id &lt;h3&gt;Administrator fetches an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Endpoint)</returns>
    public async Task<ApiResponse<Endpoint>> GetEndpointWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->GetEndpoint");


        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<Endpoint>("/endpoints/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetEndpoint", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint &lt;h3&gt;Administrator views endpoints access
    ///     rights.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>List&lt;ServiceClient&gt;</returns>
    public List<ServiceClient> GetEndpointServiceClients(string id)
    {
        var localVarResponse = GetEndpointServiceClientsWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint &lt;h3&gt;Administrator views endpoints access
    ///     rights.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <returns>ApiResponse of List&lt;ServiceClient&gt;</returns>
    public ApiResponse<List<ServiceClient>> GetEndpointServiceClientsWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling EndpointsApi->GetEndpointServiceClients");

        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Get<List<ServiceClient>>("/endpoints/{id}/service-clients", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetEndpointServiceClients", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint &lt;h3&gt;Administrator views endpoints access
    ///     rights.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;ServiceClient&gt;</returns>
    public async Task<List<ServiceClient>> GetEndpointServiceClientsAsync(string id,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await GetEndpointServiceClientsWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     get service clients who have access rights for the selected endpoint &lt;h3&gt;Administrator views endpoints access
    ///     rights.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;ServiceClient&gt;)</returns>
    public async Task<ApiResponse<List<ServiceClient>>> GetEndpointServiceClientsWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling EndpointsApi->GetEndpointServiceClients");


        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<List<ServiceClient>>("/endpoints/{id}/service-clients",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("GetEndpointServiceClients", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Update an endpoint &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <returns>Endpoint</returns>
    public Endpoint UpdateEndpoint(string id, EndpointUpdate endpointUpdate = default)
    {
        var localVarResponse = UpdateEndpointWithHttpInfo(id, endpointUpdate);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Update an endpoint &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <returns>ApiResponse of Endpoint</returns>
    public ApiResponse<Endpoint> UpdateEndpointWithHttpInfo(string id, EndpointUpdate endpointUpdate = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->UpdateEndpoint");

        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes =
        {
            "application/json"
        };

        // to determine the Accept header
        string[] accepts =
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = endpointUpdate;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = Client.Patch<Endpoint>("/endpoints/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var exception = ExceptionFactory("UpdateEndpoint", localVarResponse);
            if (exception != null) throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    ///     Update an endpoint &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Endpoint</returns>
    public async Task<Endpoint> UpdateEndpointAsync(string id, EndpointUpdate endpointUpdate = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await UpdateEndpointWithHttpInfoAsync(id, endpointUpdate, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///     Update an endpoint &lt;h3&gt;Administrator updates an endpoint.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the endpoint</param>
    /// <param name="endpointUpdate"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Endpoint)</returns>
    public async Task<ApiResponse<Endpoint>> UpdateEndpointWithHttpInfoAsync(string id,
        EndpointUpdate endpointUpdate = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400, "Missing required parameter 'id' when calling EndpointsApi->UpdateEndpoint");


        var localVarRequestOptions = new RequestOptions();

        string[] contentTypes
            =
            {
                "application/json"
            };

        // to determine the Accept header
        string[] accepts
            =
            {
                "application/json"
            };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes
        );
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts
        );
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.Data = endpointUpdate;

        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<Endpoint>("/endpoints/{id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);

        if (ExceptionFactory?.Invoke("UpdateEndpoint", localVarResponse) is { } exception)
            throw exception;

        return localVarResponse;
    }
}