/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;
using XRoad.Sdk.Model;

namespace XRoad.Sdk.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILocalGroupsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// add new member for the local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns>Members</returns>
    Members AddLocalGroupMember(string groupId, Members members = default);

    /// <summary>
    /// add new member for the local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns>ApiResponse of Members</returns>
    ApiResponse<Members> AddLocalGroupMemberWithHttpInfo(string groupId, Members members = default);

    /// <summary>
    /// delete local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns></returns>
    void DeleteLocalGroup(string groupId);

    /// <summary>
    /// delete local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteLocalGroupWithHttpInfo(string groupId);

    /// <summary>
    /// delete member from local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns></returns>
    void DeleteLocalGroupMember(string groupId, Members members = default);

    /// <summary>
    /// delete member from local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> DeleteLocalGroupMemberWithHttpInfo(string groupId, Members members = default);

    /// <summary>
    /// get local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns>LocalGroup</returns>
    LocalGroup GetLocalGroup(string groupId);

    /// <summary>
    /// get local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns>ApiResponse of LocalGroup</returns>
    ApiResponse<LocalGroup> GetLocalGroupWithHttpInfo(string groupId);

    /// <summary>
    /// update local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <returns>LocalGroup</returns>
    LocalGroup UpdateLocalGroup(string groupId, LocalGroupDescription localGroupDescription = default);

    /// <summary>
    /// update local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <returns>ApiResponse of LocalGroup</returns>
    ApiResponse<LocalGroup> UpdateLocalGroupWithHttpInfo(string groupId,
        LocalGroupDescription localGroupDescription = default);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILocalGroupsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// add new member for the local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Members</returns>
    Task<Members> AddLocalGroupMemberAsync(string groupId, Members members = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// add new member for the local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Members)</returns>
    Task<ApiResponse<Members>> AddLocalGroupMemberWithHttpInfoAsync(string groupId, Members members = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// delete local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteLocalGroupAsync(string groupId, CancellationToken cancellationToken = default);

    /// <summary>
    /// delete local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteLocalGroupWithHttpInfoAsync(string groupId,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// delete member from local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task DeleteLocalGroupMemberAsync(string groupId, Members members = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// delete member from local group
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> DeleteLocalGroupMemberWithHttpInfoAsync(string groupId, Members members = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LocalGroup</returns>
    Task<LocalGroup> GetLocalGroupAsync(string groupId, CancellationToken cancellationToken = default);

    /// <summary>
    /// get local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LocalGroup)</returns>
    Task<ApiResponse<LocalGroup>> GetLocalGroupWithHttpInfoAsync(string groupId,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// update local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LocalGroup</returns>
    Task<LocalGroup> UpdateLocalGroupAsync(string groupId, LocalGroupDescription localGroupDescription = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// update local group information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LocalGroup)</returns>
    Task<ApiResponse<LocalGroup>> UpdateLocalGroupWithHttpInfoAsync(string groupId,
        LocalGroupDescription localGroupDescription = default, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILocalGroupsApi : ILocalGroupsApiSync, ILocalGroupsApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class LocalGroupsApi : ILocalGroupsApi
{
    private ExceptionFactory _exceptionFactory = (_, _) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="LocalGroupsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public LocalGroupsApi() : this((string) null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LocalGroupsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public LocalGroupsApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LocalGroupsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public LocalGroupsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LocalGroupsApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public LocalGroupsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// add new member for the local group &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns>Members</returns>
    public Members AddLocalGroupMember(string groupId, Members members = default)
    {
        var localVarResponse = AddLocalGroupMemberWithHttpInfo(groupId, members);
        return localVarResponse.Data;
    }

    /// <summary>
    /// add new member for the local group &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns>ApiResponse of Members</returns>
    public ApiResponse<Members> AddLocalGroupMemberWithHttpInfo(string groupId, Members members = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->AddLocalGroupMember");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        localVarRequestOptions.Data = members;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Post<Members>("/local-groups/{group_id}/members", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("AddLocalGroupMember", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// add new member for the local group &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Members</returns>
    public async Task<Members> AddLocalGroupMemberAsync(string groupId, Members members = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await AddLocalGroupMemberWithHttpInfoAsync(groupId, members, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// add new member for the local group &lt;h3&gt;Administrator adds a new member for the local group.&lt;/h3&gt; &lt;p&gt;The new member can be an X-Road member or a subsystem.&lt;/p&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Members)</returns>
    public async Task<ApiResponse<Members>> AddLocalGroupMemberWithHttpInfoAsync(string groupId,
        Members members = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->AddLocalGroupMember");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        localVarRequestOptions.Data = members;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<Members>("/local-groups/{group_id}/members",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("AddLocalGroupMember", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// delete local group &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns></returns>
    public void DeleteLocalGroup(string groupId)
    {
        DeleteLocalGroupWithHttpInfo(groupId);
    }

    /// <summary>
    /// delete local group &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteLocalGroupWithHttpInfo(string groupId)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->DeleteLocalGroup");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Delete<object>("/local-groups/{group_id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("DeleteLocalGroup", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// delete local group &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteLocalGroupAsync(string groupId, CancellationToken cancellationToken = default)
    {
        await DeleteLocalGroupWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// delete local group &lt;h3&gt;Administrator deletes the local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteLocalGroupWithHttpInfoAsync(string groupId,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->DeleteLocalGroup");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/local-groups/{group_id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("DeleteLocalGroup", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// delete member from local group &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns></returns>
    public void DeleteLocalGroupMember(string groupId, Members members = default)
    {
        DeleteLocalGroupMemberWithHttpInfo(groupId, members);
    }

    /// <summary>
    /// delete member from local group &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> DeleteLocalGroupMemberWithHttpInfo(string groupId, Members members = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->DeleteLocalGroupMember");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        localVarRequestOptions.Data = members;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = Client.Post<object>("/local-groups/{group_id}/members/delete", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory?.Invoke("DeleteLocalGroupMember", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// delete member from local group &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task DeleteLocalGroupMemberAsync(string groupId, Members members = default,
        CancellationToken cancellationToken = default)
    {
        await DeleteLocalGroupMemberWithHttpInfoAsync(groupId, members, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// delete member from local group &lt;h3&gt;Administrator deletes the member from local group.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="members"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> DeleteLocalGroupMemberWithHttpInfoAsync(string groupId,
        Members members = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->DeleteLocalGroupMember");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(Array.Empty<string>());
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        localVarRequestOptions.Data = members;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/local-groups/{group_id}/members/delete",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("DeleteLocalGroupMember", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get local group information &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns>LocalGroup</returns>
    public LocalGroup GetLocalGroup(string groupId)
    {
        var localVarResponse = GetLocalGroupWithHttpInfo(groupId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get local group information &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <returns>ApiResponse of LocalGroup</returns>
    public ApiResponse<LocalGroup> GetLocalGroupWithHttpInfo(string groupId)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->GetLocalGroup");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Get<LocalGroup>("/local-groups/{group_id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetLocalGroup", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get local group information &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LocalGroup</returns>
    public async Task<LocalGroup> GetLocalGroupAsync(string groupId, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetLocalGroupWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get local group information &lt;h3&gt;Administrator views local group details.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LocalGroup)</returns>
    public async Task<ApiResponse<LocalGroup>> GetLocalGroupWithHttpInfoAsync(string groupId,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->GetLocalGroup");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<LocalGroup>("/local-groups/{group_id}", localVarRequestOptions, Configuration, cancellationToken)
            .ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetLocalGroup", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// update local group information &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <returns>LocalGroup</returns>
    public LocalGroup UpdateLocalGroup(string groupId, LocalGroupDescription localGroupDescription = default)
    {
        var localVarResponse = UpdateLocalGroupWithHttpInfo(groupId, localGroupDescription);
        return localVarResponse.Data;
    }

    /// <summary>
    /// update local group information &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <returns>ApiResponse of LocalGroup</returns>
    public ApiResponse<LocalGroup> UpdateLocalGroupWithHttpInfo(string groupId,
        LocalGroupDescription localGroupDescription = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->UpdateLocalGroup");

        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        localVarRequestOptions.Data = localGroupDescription;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Patch<LocalGroup>("/local-groups/{group_id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("UpdateLocalGroup", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// update local group information &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of LocalGroup</returns>
    public async Task<LocalGroup> UpdateLocalGroupAsync(string groupId,
        LocalGroupDescription localGroupDescription = default, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await UpdateLocalGroupWithHttpInfoAsync(groupId, localGroupDescription, cancellationToken)
                .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// update local group information &lt;h3&gt;Administrator updates the local group information.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="groupId">id of the local group</param>
    /// <param name="localGroupDescription"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (LocalGroup)</returns>
    public async Task<ApiResponse<LocalGroup>> UpdateLocalGroupWithHttpInfoAsync(string groupId,
        LocalGroupDescription localGroupDescription = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'groupId' is set
        if (groupId == null)
            throw new ApiException(400,
                "Missing required parameter 'groupId' when calling LocalGroupsApi->UpdateLocalGroup");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(new []{"application/json"});
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("group_id", ClientUtils.ParameterToString(groupId)); // path parameter
        localVarRequestOptions.Data = localGroupDescription;
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<LocalGroup>("/local-groups/{group_id}", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("UpdateLocalGroup", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }
}