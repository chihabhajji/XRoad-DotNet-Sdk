/*
 * X-Road Security Server Admin API
 *
 * X-Road Security Server Admin API. Note that the error metadata responses described in some endpoints are subjects to change and may be updated in upcoming versions.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@niis.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Client;
using XRoad.Sdk.Model;

namespace XRoad.Sdk.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISecurityServersApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// get security server information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <returns>SecurityServer</returns>
    SecurityServer GetSecurityServer(string id);

    /// <summary>
    /// get security server information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <returns>ApiResponse of SecurityServer</returns>
    ApiResponse<SecurityServer> GetSecurityServerWithHttpInfo(string id);

    /// <summary>
    /// get all security servers
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <returns>List&lt;SecurityServer&gt;</returns>
    List<SecurityServer> GetSecurityServers(bool? currentServer = default);

    /// <summary>
    /// get all security servers
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <returns>ApiResponse of List&lt;SecurityServer&gt;</returns>
    ApiResponse<List<SecurityServer>> GetSecurityServersWithHttpInfo(bool? currentServer = default);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISecurityServersApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// get security server information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SecurityServer</returns>
    Task<SecurityServer> GetSecurityServerAsync(string id, CancellationToken cancellationToken = default);

    /// <summary>
    /// get security server information
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SecurityServer)</returns>
    Task<ApiResponse<SecurityServer>> GetSecurityServerWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get all security servers
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;SecurityServer&gt;</returns>
    Task<List<SecurityServer>> GetSecurityServersAsync(bool? currentServer = default,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// get all security servers
    /// </summary>
    /// <remarks>
    /// &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;SecurityServer&gt;)</returns>
    Task<ApiResponse<List<SecurityServer>>> GetSecurityServersWithHttpInfoAsync(bool? currentServer = default,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISecurityServersApi : ISecurityServersApiSync, ISecurityServersApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class SecurityServersApi : ISecurityServersApi
{
    private ExceptionFactory _exceptionFactory = (_, _) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServersApi"/> class.
    /// </summary>
    /// <returns></returns>
    public SecurityServersApi() : this((string) null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServersApi"/> class.
    /// </summary>
    /// <returns></returns>
    public SecurityServersApi(string basePath)
    {
        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration {BasePath = basePath}
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServersApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public SecurityServersApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = Sdk.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SecurityServersApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public SecurityServersApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = Sdk.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// get security server information &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <returns>SecurityServer</returns>
    public SecurityServer GetSecurityServer(string id)
    {
        var localVarResponse = GetSecurityServerWithHttpInfo(id);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get security server information &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <returns>ApiResponse of SecurityServer</returns>
    public ApiResponse<SecurityServer> GetSecurityServerWithHttpInfo(string id)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling SecurityServersApi->GetSecurityServer");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse =
            Client.Get<SecurityServer>("/security-servers/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetSecurityServer", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get security server information &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SecurityServer</returns>
    public async Task<SecurityServer> GetSecurityServerAsync(string id, CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetSecurityServerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get security server information &lt;h3&gt;Administrator views the details of a security server.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="id">id of the security server</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SecurityServer)</returns>
    public async Task<ApiResponse<SecurityServer>> GetSecurityServerWithHttpInfoAsync(string id,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling SecurityServersApi->GetSecurityServer");
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<SecurityServer>("/security-servers/{id}", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetSecurityServer", localVarResponse) is { } exception) throw exception;

        return localVarResponse;
    }

    /// <summary>
    /// get all security servers &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <returns>List&lt;SecurityServer&gt;</returns>
    public List<SecurityServer> GetSecurityServers(bool? currentServer = default)
    {
        var localVarResponse = GetSecurityServersWithHttpInfo(currentServer);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get all security servers &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <returns>ApiResponse of List&lt;SecurityServer&gt;</returns>
    public ApiResponse<List<SecurityServer>> GetSecurityServersWithHttpInfo(bool? currentServer = default)
    {
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        if (currentServer != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "current_server", currentServer));
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));

        // make the HTTP request
        var localVarResponse =
            Client.Get<List<SecurityServer>>("/security-servers", localVarRequestOptions, Configuration);
        if (ExceptionFactory?.Invoke("GetSecurityServers", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }

    /// <summary>
    /// get all security servers &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;SecurityServer&gt;</returns>
    public async Task<List<SecurityServer>> GetSecurityServersAsync(bool? currentServer = default,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await GetSecurityServersWithHttpInfoAsync(currentServer, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// get all security servers &lt;h3&gt;Administrator views the details of all security servers.&lt;/h3&gt;
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="currentServer">whether to only get the current server&#39;s identifier (optional, default to false)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;SecurityServer&gt;)</returns>
    public async Task<ApiResponse<List<SecurityServer>>> GetSecurityServersWithHttpInfoAsync(
        bool? currentServer = default, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();
        var localVarContentType = ClientUtils.SelectHeaderContentType(Array.Empty<string>());
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        var localVarAccept = ClientUtils.SelectHeaderAccept(new []{"application/json"});
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        if (currentServer != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "current_server", currentServer));
        // authentication (ApiKeyAuth) required
        if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            localVarRequestOptions.HeaderParameters.Add("Authorization",
                Configuration.GetApiKeyWithPrefix("Authorization"));
        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<List<SecurityServer>>("/security-servers", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        if (ExceptionFactory?.Invoke("GetSecurityServers", localVarResponse) is { } exception) throw exception;
        return localVarResponse;
    }
}