using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using XRoad.Sdk.Models;

namespace XRoad.Sdk
{
    public interface IXRoadClient
    {
        string BaseUrl { get; set; }
        bool ReadResponseAsString { get; set; }

        Task ActivateCertificateAsync(string hash);
        Task ActivateCertificateAsync(string hash, CancellationToken cancellationToken);
        Task<Backup> AddBackupAsync();
        Task<Backup> AddBackupAsync(CancellationToken cancellationToken);
        Task<BackupExt> AddBackupExtAsync();
        Task<BackupExt> AddBackupExtAsync(CancellationToken cancellationToken);
        Task<Client> AddClientAsync(ClientAdd body);
        Task<Client> AddClientAsync(ClientAdd body, CancellationToken cancellationToken);
        Task<LocalGroup> AddClientLocalGroupAsync(string id, LocalGroupAdd body);
        Task<LocalGroup> AddClientLocalGroupAsync(string id, LocalGroupAdd body, CancellationToken cancellationToken);
        Task<ServiceDescription> AddClientServiceDescriptionAsync(string id, ServiceDescriptionAdd body);
        Task<ServiceDescription> AddClientServiceDescriptionAsync(string id, ServiceDescriptionAdd body, CancellationToken cancellationToken);
        Task<CertificateDetails> AddClientTlsCertificateAsync(string id, Stream body);
        Task<CertificateDetails> AddClientTlsCertificateAsync(string id, Stream body, CancellationToken cancellationToken);
        Task<TimestampingService> AddConfiguredTimestampingServiceAsync(TimestampingService body);
        Task<TimestampingService> AddConfiguredTimestampingServiceAsync(TimestampingService body, CancellationToken cancellationToken);
        Task<Endpoint> AddEndpointAsync(string id, Endpoint body);
        Task<Endpoint> AddEndpointAsync(string id, Endpoint body, CancellationToken cancellationToken);
        Task<ICollection<ServiceClient>> AddEndpointServiceClientsAsync(string id, ServiceClients body);
        Task<ICollection<ServiceClient>> AddEndpointServiceClientsAsync(string id, ServiceClients body, CancellationToken cancellationToken);
        Task<KeyWithCertificateSigningRequestId> AddKeyAndCsrAsync(string id, KeyLabelWithCsrGenerate body);
        Task<KeyWithCertificateSigningRequestId> AddKeyAndCsrAsync(string id, KeyLabelWithCsrGenerate body, CancellationToken cancellationToken);
        Task<Key> AddKeyAsync(string id, KeyLabel body);
        Task<Key> AddKeyAsync(string id, KeyLabel body, CancellationToken cancellationToken);
        Task<Members> AddLocalGroupMemberAsync(string group_id, Members body);
        Task<Members> AddLocalGroupMemberAsync(string group_id, Members body, CancellationToken cancellationToken);
        Task<ICollection<AccessRight>> AddServiceClientAccessRightsAsync(string id, string sc_id, AccessRights body);
        Task<ICollection<AccessRight>> AddServiceClientAccessRightsAsync(string id, string sc_id, AccessRights body, CancellationToken cancellationToken);
        Task<ICollection<ServiceClient>> AddServiceServiceClientsAsync(string id, ServiceClients body);
        Task<ICollection<ServiceClient>> AddServiceServiceClientsAsync(string id, ServiceClients body, CancellationToken cancellationToken);
        Task ChangeOwnerAsync(string id);
        Task ChangeOwnerAsync(string id, CancellationToken cancellationToken);
        Task DeleteBackupAsync(string filename);
        Task DeleteBackupAsync(string filename, CancellationToken cancellationToken);
        Task DeleteCertificateAsync(string hash);
        Task DeleteCertificateAsync(string hash, CancellationToken cancellationToken);
        Task DeleteClientAsync(string id);
        Task DeleteClientAsync(string id, CancellationToken cancellationToken);
        Task DeleteClientTlsCertificateAsync(string id, string hash);
        Task DeleteClientTlsCertificateAsync(string id, string hash, CancellationToken cancellationToken);
        Task DeleteConfiguredTimestampingServiceAsync(TimestampingService body);
        Task DeleteConfiguredTimestampingServiceAsync(TimestampingService body, CancellationToken cancellationToken);
        Task DeleteCsrAsync(string id, string csr_id);
        Task DeleteCsrAsync(string id, string csr_id, CancellationToken cancellationToken);
        Task DeleteEndpointAsync(string id);
        Task DeleteEndpointAsync(string id, CancellationToken cancellationToken);
        Task DeleteEndpointServiceClientsAsync(string id, ServiceClients body);
        Task DeleteEndpointServiceClientsAsync(string id, ServiceClients body, CancellationToken cancellationToken);
        Task DeleteKeyAsync(string id, bool? ignore_warnings);
        Task DeleteKeyAsync(string id, bool? ignore_warnings, CancellationToken cancellationToken);
        Task DeleteLocalGroupAsync(string group_id);
        Task DeleteLocalGroupAsync(string group_id, CancellationToken cancellationToken);
        Task DeleteLocalGroupMemberAsync(string group_id, Members body);
        Task DeleteLocalGroupMemberAsync(string group_id, Members body, CancellationToken cancellationToken);
        Task DeleteOrphansAsync(string id);
        Task DeleteOrphansAsync(string id, CancellationToken cancellationToken);
        Task DeleteServiceClientAccessRightsAsync(string id, string sc_id, AccessRights body);
        Task DeleteServiceClientAccessRightsAsync(string id, string sc_id, AccessRights body, CancellationToken cancellationToken);
        Task DeleteServiceDescriptionAsync(string id);
        Task DeleteServiceDescriptionAsync(string id, CancellationToken cancellationToken);
        Task DeleteServiceServiceClientsAsync(string id, ServiceClients body);
        Task DeleteServiceServiceClientsAsync(string id, ServiceClients body, CancellationToken cancellationToken);
        Task DisableCertificateAsync(string hash);
        Task DisableCertificateAsync(string hash, CancellationToken cancellationToken);
        Task DisableServiceDescriptionAsync(string id, ServiceDescriptionDisabledNotice body);
        Task DisableServiceDescriptionAsync(string id, ServiceDescriptionDisabledNotice body, CancellationToken cancellationToken);
        Task<FileResponse> DownloadAnchorAsync();
        Task<FileResponse> DownloadAnchorAsync(CancellationToken cancellationToken);
        Task<FileResponse> DownloadBackupAsync(string filename);
        Task<FileResponse> DownloadBackupAsync(string filename, CancellationToken cancellationToken);
        Task<FileResponse> DownloadCsrAsync(string id, string csr_id, CsrFormat? csr_format);
        Task<FileResponse> DownloadCsrAsync(string id, string csr_id, CsrFormat? csr_format, CancellationToken cancellationToken);
        Task<FileResponse> DownloadOpenApiAsync();
        Task<FileResponse> DownloadOpenApiAsync(CancellationToken cancellationToken);
        Task<FileResponse> DownloadSystemCertificateAsync();
        Task<FileResponse> DownloadSystemCertificateAsync(CancellationToken cancellationToken);
        Task EnableServiceDescriptionAsync(string id);
        Task EnableServiceDescriptionAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<Client>> FindClientsAsync(string name, string instance, string member_class, string member_code, string subsystem_code, bool? show_members, bool? internal_search, bool? local_valid_sign_cert, bool? exclude_local);
        Task<ICollection<Client>> FindClientsAsync(string name, string instance, string member_class, string member_code, string subsystem_code, bool? show_members, bool? internal_search, bool? local_valid_sign_cert, bool? exclude_local, CancellationToken cancellationToken);
        Task<MemberName> FindMemberNameAsync(string member_class, string member_code);
        Task<MemberName> FindMemberNameAsync(string member_class, string member_code, CancellationToken cancellationToken);
        Task<ICollection<ServiceClient>> FindServiceClientCandidatesAsync(string id, string member_name_group_description, ServiceClientType? service_client_type, string instance, string member_class, string member_group_code, string subsystem_code);
        Task<ICollection<ServiceClient>> FindServiceClientCandidatesAsync(string id, string member_name_group_description, ServiceClientType? service_client_type, string instance, string member_class, string member_group_code, string subsystem_code, CancellationToken cancellationToken);
        Task<FileResponse> GenerateCsrAsync(string id, CsrGenerate body);
        Task<FileResponse> GenerateCsrAsync(string id, CsrGenerate body, CancellationToken cancellationToken);
        Task<FileResponse> GenerateSystemCertificateRequestAsync(DistinguishedName body);
        Task<FileResponse> GenerateSystemCertificateRequestAsync(DistinguishedName body, CancellationToken cancellationToken);
        Task GenerateSystemTlsKeyAndCertificateAsync();
        Task GenerateSystemTlsKeyAndCertificateAsync(CancellationToken cancellationToken);
        Task<Anchor> GetAnchorAsync();
        Task<Anchor> GetAnchorAsync(CancellationToken cancellationToken);
        Task<ICollection<CertificateAuthority>> GetApprovedCertificateAuthoritiesAsync(KeyUsageType? key_usage_type, bool? include_intermediate_cas);
        Task<ICollection<CertificateAuthority>> GetApprovedCertificateAuthoritiesAsync(KeyUsageType? key_usage_type, bool? include_intermediate_cas, CancellationToken cancellationToken);
        Task<ICollection<TimestampingService>> GetApprovedTimestampingServicesAsync();
        Task<ICollection<TimestampingService>> GetApprovedTimestampingServicesAsync(CancellationToken cancellationToken);
        Task<ICollection<Backup>> GetBackupsAsync();
        Task<ICollection<Backup>> GetBackupsAsync(CancellationToken cancellationToken);
        Task<TokenCertificate> GetCertificateAsync(string hash);
        Task<TokenCertificate> GetCertificateAsync(string hash, CancellationToken cancellationToken);
        Task<Client> GetClientAsync(string id);
        Task<Client> GetClientAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<LocalGroup>> GetClientLocalGroupsAsync(string id);
        Task<ICollection<LocalGroup>> GetClientLocalGroupsAsync(string id, CancellationToken cancellationToken);
        Task<OrphanInformation> GetClientOrphansAsync(string id);
        Task<OrphanInformation> GetClientOrphansAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<ServiceClient>> GetClientServiceClientsAsync(string id);
        Task<ICollection<ServiceClient>> GetClientServiceClientsAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<ServiceDescription>> GetClientServiceDescriptionsAsync(string id);
        Task<ICollection<ServiceDescription>> GetClientServiceDescriptionsAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<TokenCertificate>> GetClientSignCertificatesAsync(string id);
        Task<ICollection<TokenCertificate>> GetClientSignCertificatesAsync(string id, CancellationToken cancellationToken);
        Task<CertificateDetails> GetClientTlsCertificateAsync(string id, string hash);
        Task<CertificateDetails> GetClientTlsCertificateAsync(string id, string hash, CancellationToken cancellationToken);
        Task<ICollection<CertificateDetails>> GetClientTlsCertificatesAsync(string id);
        Task<ICollection<CertificateDetails>> GetClientTlsCertificatesAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<TimestampingService>> GetConfiguredTimestampingServicesAsync();
        Task<ICollection<TimestampingService>> GetConfiguredTimestampingServicesAsync(CancellationToken cancellationToken);
        Task<Endpoint> GetEndpointAsync(string id);
        Task<Endpoint> GetEndpointAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<ServiceClient>> GetEndpointServiceClientsAsync(string id);
        Task<ICollection<ServiceClient>> GetEndpointServiceClientsAsync(string id, CancellationToken cancellationToken);
        Task<GlobalConfDiagnostics> GetGlobalConfDiagnosticsAsync();
        Task<GlobalConfDiagnostics> GetGlobalConfDiagnosticsAsync(CancellationToken cancellationToken);
        Task<InitializationStatus> GetInitializationStatusAsync();
        Task<InitializationStatus> GetInitializationStatusAsync(CancellationToken cancellationToken);
        Task<Key> GetKeyAsync(string id);
        Task<Key> GetKeyAsync(string id, CancellationToken cancellationToken);
        Task<LocalGroup> GetLocalGroupAsync(string group_id);
        Task<LocalGroup> GetLocalGroupAsync(string group_id, CancellationToken cancellationToken);
        Task<ICollection<string>> GetMemberClassesAsync(bool? current_instance);
        Task<ICollection<string>> GetMemberClassesAsync(bool? current_instance, CancellationToken cancellationToken);
        Task<ICollection<string>> GetMemberClassesForInstanceAsync(string id);
        Task<ICollection<string>> GetMemberClassesForInstanceAsync(string id, CancellationToken cancellationToken);
        Task<NodeTypeResponse> GetNodeTypeAsync();
        Task<NodeTypeResponse> GetNodeTypeAsync(CancellationToken cancellationToken);
        Task<ICollection<OcspResponderDiagnostics>> GetOcspRespondersDiagnosticsAsync();
        Task<ICollection<OcspResponderDiagnostics>> GetOcspRespondersDiagnosticsAsync(CancellationToken cancellationToken);
        Task<ICollection<PossibleAction>> GetPossibleActionsForCertificateAsync(string hash);
        Task<ICollection<PossibleAction>> GetPossibleActionsForCertificateAsync(string hash, CancellationToken cancellationToken);
        Task<ICollection<PossibleAction>> GetPossibleActionsForCsrAsync(string id, string csr_id);
        Task<ICollection<PossibleAction>> GetPossibleActionsForCsrAsync(string id, string csr_id, CancellationToken cancellationToken);
        Task<ICollection<PossibleAction>> GetPossibleActionsForKeyAsync(string id);
        Task<ICollection<PossibleAction>> GetPossibleActionsForKeyAsync(string id, CancellationToken cancellationToken);
        Task<SecurityServer> GetSecurityServerAsync(string id);
        Task<SecurityServer> GetSecurityServerAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<SecurityServer>> GetSecurityServersAsync(bool? current_server);
        Task<ICollection<SecurityServer>> GetSecurityServersAsync(bool? current_server, CancellationToken cancellationToken);
        Task<Service> GetServiceAsync(string id);
        Task<Service> GetServiceAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<AccessRight>> GetServiceClientAccessRightsAsync(string id, string sc_id);
        Task<ICollection<AccessRight>> GetServiceClientAccessRightsAsync(string id, string sc_id, CancellationToken cancellationToken);
        Task<ServiceClient> GetServiceClientAsync(string id, string sc_id);
        Task<ServiceClient> GetServiceClientAsync(string id, string sc_id, CancellationToken cancellationToken);
        Task<ServiceDescription> GetServiceDescriptionAsync(string id);
        Task<ServiceDescription> GetServiceDescriptionAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<Service>> GetServiceDescriptionServicesAsync(string id);
        Task<ICollection<Service>> GetServiceDescriptionServicesAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<ServiceClient>> GetServiceServiceClientsAsync(string id);
        Task<ICollection<ServiceClient>> GetServiceServiceClientsAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<CsrSubjectFieldDescription>> GetSubjectFieldDescriptionsAsync(string ca_name, string key_id, KeyUsageType key_usage_type, string member_id, bool? is_new_member);
        Task<ICollection<CsrSubjectFieldDescription>> GetSubjectFieldDescriptionsAsync(string ca_name, string key_id, KeyUsageType key_usage_type, string member_id, bool? is_new_member, CancellationToken cancellationToken);
        Task<CertificateDetails> GetSystemCertificateAsync();
        Task<CertificateDetails> GetSystemCertificateAsync(CancellationToken cancellationToken);
        Task<ICollection<TimestampingServiceDiagnostics>> GetTimestampingServicesDiagnosticsAsync();
        Task<ICollection<TimestampingServiceDiagnostics>> GetTimestampingServicesDiagnosticsAsync(CancellationToken cancellationToken);
        Task<Token> GetTokenAsync(string id);
        Task<Token> GetTokenAsync(string id, CancellationToken cancellationToken);
        Task<ICollection<Token>> GetTokensAsync();
        Task<ICollection<Token>> GetTokensAsync(CancellationToken cancellationToken);
        Task<User> GetUserAsync();
        Task<User> GetUserAsync(CancellationToken cancellationToken);
        Task<ICollection<string>> GetXroadInstancesAsync();
        Task<ICollection<string>> GetXroadInstancesAsync(CancellationToken cancellationToken);
        Task<TokenCertificate> ImportCertificateAsync(Stream body);
        Task<TokenCertificate> ImportCertificateAsync(Stream body, CancellationToken cancellationToken);
        Task<TokenCertificate> ImportCertificateFromTokenAsync(string hash);
        Task<TokenCertificate> ImportCertificateFromTokenAsync(string hash, CancellationToken cancellationToken);
        Task<CertificateDetails> ImportSystemCertificateAsync(Stream body);
        Task<CertificateDetails> ImportSystemCertificateAsync(Stream body, CancellationToken cancellationToken);
        Task InitSecurityServerAsync(InitialServerConf body);
        Task InitSecurityServerAsync(InitialServerConf body, CancellationToken cancellationToken);
        Task<Language> LanguageAsync(string code);
        Task<Language> LanguageAsync(string code, CancellationToken cancellationToken);
        Task<Token> LoginTokenAsync(string id, TokenPassword body);
        Task<Token> LoginTokenAsync(string id, TokenPassword body, CancellationToken cancellationToken);
        Task<Token> LogoutTokenAsync(string id);
        Task<Token> LogoutTokenAsync(string id, CancellationToken cancellationToken);
        Task MarkAuthCertForDeletionAsync(string hash);
        Task MarkAuthCertForDeletionAsync(string hash, CancellationToken cancellationToken);
        Task<Anchor> PreviewAnchorAsync(bool? validate_instance, Stream body);
        Task<Anchor> PreviewAnchorAsync(bool? validate_instance, Stream body, CancellationToken cancellationToken);
        Task<ServiceDescription> RefreshServiceDescriptionAsync(string id, IgnoreWarnings body);
        Task<ServiceDescription> RefreshServiceDescriptionAsync(string id, IgnoreWarnings body, CancellationToken cancellationToken);
        Task RegisterCertificateAsync(string hash, SecurityServerAddress body);
        Task RegisterCertificateAsync(string hash, SecurityServerAddress body, CancellationToken cancellationToken);
        Task RegisterClientAsync(string id);
        Task RegisterClientAsync(string id, CancellationToken cancellationToken);
        Task ReplaceAnchorAsync(Stream body);
        Task ReplaceAnchorAsync(Stream body, CancellationToken cancellationToken);
        Task<TokensLoggedOut> RestoreBackupAsync(string filename);
        Task<TokensLoggedOut> RestoreBackupAsync(string filename, CancellationToken cancellationToken);
        Task<VersionInfo> SystemVersionAsync();
        Task<VersionInfo> SystemVersionAsync(CancellationToken cancellationToken);
        Task UnregisterAuthCertificateAsync(string hash);
        Task UnregisterAuthCertificateAsync(string hash, CancellationToken cancellationToken);
        Task UnregisterClientAsync(string id);
        Task UnregisterClientAsync(string id, CancellationToken cancellationToken);
        Task<Client> UpdateClientAsync(string id, ConnectionTypeWrapper body);
        Task<Client> UpdateClientAsync(string id, ConnectionTypeWrapper body, CancellationToken cancellationToken);
        Task<Endpoint> UpdateEndpointAsync(string id, EndpointUpdate body);
        Task<Endpoint> UpdateEndpointAsync(string id, EndpointUpdate body, CancellationToken cancellationToken);
        Task<Key> UpdateKeyAsync(string id, KeyName body);
        Task<Key> UpdateKeyAsync(string id, KeyName body, CancellationToken cancellationToken);
        Task<LocalGroup> UpdateLocalGroupAsync(string group_id, LocalGroupDescription body);
        Task<LocalGroup> UpdateLocalGroupAsync(string group_id, LocalGroupDescription body, CancellationToken cancellationToken);
        Task<Service> UpdateServiceAsync(string id, ServiceUpdate body);
        Task<Service> UpdateServiceAsync(string id, ServiceUpdate body, CancellationToken cancellationToken);
        Task<ServiceDescription> UpdateServiceDescriptionAsync(string id, ServiceDescriptionUpdate body);
        Task<ServiceDescription> UpdateServiceDescriptionAsync(string id, ServiceDescriptionUpdate body, CancellationToken cancellationToken);
        Task<Token> UpdateTokenAsync(string id, TokenName body);
        Task<Token> UpdateTokenAsync(string id, TokenName body, CancellationToken cancellationToken);
        Task UpdateTokenPinAsync(string id, TokenPinUpdate body);
        Task UpdateTokenPinAsync(string id, TokenPinUpdate body, CancellationToken cancellationToken);
        Task<Backup> UploadBackupAsync(bool? ignore_warnings, Stream body);
        Task<Backup> UploadBackupAsync(bool? ignore_warnings, Stream body, CancellationToken cancellationToken);
        Task UploadInitialAnchorAsync(Stream body);
        Task UploadInitialAnchorAsync(Stream body, CancellationToken cancellationToken);
    }
}